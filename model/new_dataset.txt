
hi, how are you doing?	i'm fine. how about yourself?
i'm fine. how about yourself?	i'm pretty good. thanks for asking.
i'm pretty good. thanks for asking.	no problem. so how have you been?
no problem. so how have you been?	i've been great. what about you?
i've been great. what about you?	i've been good. i'm in school right now.
i've been good. i'm in school right now.	what school do you go to?
what school do you go to?	i go to pcc.
i go to pcc.	do you like it there?
do you like it there?	it's okay. it's a really big campus.
it's okay. it's a really big campus.	good luck with school.
good luck with school.	thank you very much.
how's it going?	i'm doing well. how about you?
i'm doing well. how about you?	never better, thanks.
never better, thanks.	so how have you been lately?
so how have you been lately?	i've actually been pretty good. you?
i've actually been pretty good. you?	i'm actually in school right now.
i'm actually in school right now.	which school do you attend?
which school do you attend?	i'm attending pcc right now.
i'm attending pcc right now.	are you enjoying it there?
are you enjoying it there?	it's not bad. there are a lot of people there.
it's not bad. there are a lot of people there.	good luck with that.
good luck with that.	thanks.
how are you doing today?	i'm doing great. what about you?
i'm doing great. what about you?	i'm absolutely lovely, thank you.
i'm absolutely lovely, thank you.	everything's been good with you?
everything's been good with you?	i haven't been better. how about yourself?
i haven't been better. how about yourself?	i started school recently.
i started school recently.	where are you going to school?
where are you going to school?	i'm going to pcc.
i'm going to pcc.	how do you like it so far?
how do you like it so far?	i like it so far. my classes are pretty good right now.
i like it so far. my classes are pretty good right now.	i wish you luck.
it's an ugly day today.	i know. i think it may rain.
i know. i think it may rain.	it's the middle of summer, it shouldn't rain today.
it's the middle of summer, it shouldn't rain today.	that would be weird.
that would be weird.	yeah, especially since it's ninety degrees outside.
yeah, especially since it's ninety degrees outside.	i know, it would be horrible if it rained and it was hot outside.
i know, it would be horrible if it rained and it was hot outside.	yes, it would be. 
yes, it would be. 	i really wish it wasn't so hot every day. 
i really wish it wasn't so hot every day. 	me too. i can't wait until winter.
me too. i can't wait until winter.	i like winter too, but sometimes it gets too cold.
i like winter too, but sometimes it gets too cold.	i'd rather be cold than hot.
i'd rather be cold than hot.	me too.
it doesn't look very nice outside today.	you're right. i think it's going to rain later.
you're right. i think it's going to rain later.	in the middle of the summer, it shouldn't be raining.
in the middle of the summer, it shouldn't be raining.	that wouldn't seem right.
that wouldn't seem right.	considering that it's over ninety degrees outside, that would be weird.
considering that it's over ninety degrees outside, that would be weird.	exactly, it wouldn't be nice if it started raining. it's too hot.
exactly, it wouldn't be nice if it started raining. it's too hot.	i know, you're absolutely right.
i know, you're absolutely right.	i wish it would cool off one day.
i wish it would cool off one day.	that's how i feel, i want winter to come soon.
that's how i feel, i want winter to come soon.	i enjoy the winter, but it gets really cold sometimes.
i enjoy the winter, but it gets really cold sometimes.	i know what you mean, but i'd rather be cold than hot.
i know what you mean, but i'd rather be cold than hot.	that's exactly how i feel.
i wish it was a nicer day today.	that is true. i hope it doesn't rain.
that is true. i hope it doesn't rain.	it wouldn't rain in the middle of the summer.
it wouldn't rain in the middle of the summer.	it wouldn't seem right if it started raining right now.
it wouldn't seem right if it started raining right now.	it would be weird if it started raining in ninety degree weather.
it would be weird if it started raining in ninety degree weather.	any rain right now would be pointless.
any rain right now would be pointless.	that's right, it really would be.
that's right, it really would be.	i want it to cool down some.
i want it to cool down some.	i know what you mean, i can't wait until it's winter.
i know what you mean, i can't wait until it's winter.	winter is great. i wish it didn't get so cold sometimes though.
winter is great. i wish it didn't get so cold sometimes though.	i would rather deal with the winter than the summer.
it's such a nice day.	yes, it is.
yes, it is.	it looks like it may rain soon.
it looks like it may rain soon.	yes, and i hope that it does.
yes, and i hope that it does.	why is that?
why is that?	i really love how rain clears the air.
i really love how rain clears the air.	me too. it always smells so fresh after it rains.
me too. it always smells so fresh after it rains.	yes, but i love the night air after it rains.
yes, but i love the night air after it rains.	really? why is it?
really? why is it?	because you can see the stars perfectly.
because you can see the stars perfectly.	i really hope it rains today.
i really hope it rains today.	yeah, me too.
isn't it a nice day?	it really is.
it really is.	it seems that it may rain today.
it seems that it may rain today.	hopefully it will.
hopefully it will.	how come?
how come?	i like how clear the sky gets after it rains.
i like how clear the sky gets after it rains.	i feel the same way. it smells so good after it rains.
i feel the same way. it smells so good after it rains.	i especially love the night air when it rains.
i especially love the night air when it rains.	really? why?
really? why?	the stars look so much closer after it rains.
the stars look so much closer after it rains.	i really want it to rain today.
i really want it to rain today.	yeah, so do i.
don't you think it's nice out?	yes, i think so too.
yes, i think so too.	i think that it's going to rain.
i think that it's going to rain.	i hope that it does rain.
i hope that it does rain.	you like the rain?
you like the rain?	the sky looks so clean after it rains. i love it.
the sky looks so clean after it rains. i love it.	i understand. rain does make it smell cleaner.
i understand. rain does make it smell cleaner.	i love most how it is at night after it rains.
i love most how it is at night after it rains.	how come?
how come?	you can see the stars so much more clearly after it rains.
you can see the stars so much more clearly after it rains.	i would love for it to rain today.
i really want to go to the beach this weekend.	that sounds like fun. what's the weather going to be like?
that sounds like fun. what's the weather going to be like?	i heard that it's going to be warm this weekend.
i heard that it's going to be warm this weekend.	is it going to be perfect beach weather?
is it going to be perfect beach weather?	i believe so.
i believe so.	good. i hope it doesn't cool off this weekend.
good. i hope it doesn't cool off this weekend.	i know. i really want to go to the beach.
i know. i really want to go to the beach.	but you know that california weather is really unpredictable.
but you know that california weather is really unpredictable.	you're right. one minute it's hot, and then the next minute it's cold.
you're right. one minute it's hot, and then the next minute it's cold.	i really wish the weather would just stay the same.
i really wish the weather would just stay the same.	i do too. that way we can have our activities planned ahead of time.
i do too. that way we can have our activities planned ahead of time.	yeah, that would make things a lot easier.
i would like to take a trip to the beach this weekend.	a trip to the beach would be fun. how is the weather going to be?
a trip to the beach would be fun. how is the weather going to be?	the forecast says that it will be warm on the weekend.
the forecast says that it will be warm on the weekend.	so do you think it'll be perfect weather for the beach?
so do you think it'll be perfect weather for the beach?	it sounds like it will be.
it sounds like it will be.	i really hope it doesn't get cold.
i really hope it doesn't get cold.	that would ruin things, i want to go so badly.
that would ruin things, i want to go so badly.	the weather in california is unpredictable, so you never know.
the weather in california is unpredictable, so you never know.	that is true. the weather is constantly changing.
that is true. the weather is constantly changing.	it would be nice if the weather would never change.
it would be nice if the weather would never change.	that would be great, then we could plan things sooner.
that would be great, then we could plan things sooner.	true. predictable weather would make life easier.
it would be nice to go to the beach sometime this weekend.	what's the weather going to be like? i may want to go too.
what's the weather going to be like? i may want to go too.	the weather this weekend is supposed to be warm.
the weather this weekend is supposed to be warm.	will it be good beach weather?
will it be good beach weather?	i think it will be.
i think it will be.	it wouldn't be good if it got cold this weekend.
it wouldn't be good if it got cold this weekend.	i want this trip to be perfect, i hope it stays warm.
i want this trip to be perfect, i hope it stays warm.	this california weather is so uncertain, it's impossible to know what'll happen.
this california weather is so uncertain, it's impossible to know what'll happen.	i know. every day the weather seems different.
i know. every day the weather seems different.	i would love it if it wasn't always so unpredictable.
i would love it if it wasn't always so unpredictable.	that would make it easier for us to make plans.
hello, may i speak to alice please?	this is she. how's it going?
this is she. how's it going?	i've been trying to call you all day.
i've been trying to call you all day.	sorry about that. i was cleaning up.
sorry about that. i was cleaning up.	it's okay.
it's okay.	so what were you calling me about?
so what were you calling me about?	oh, i just wanted to see if you wanted to hang out tomorrow.
oh, i just wanted to see if you wanted to hang out tomorrow.	sure, what did you want to do?
sure, what did you want to do?	maybe we can go see a movie or something.
maybe we can go see a movie or something.	that sounds like fun. let's do it.
that sounds like fun. let's do it.	i'll see you tomorrow then.
i'll see you tomorrow then.	see you then. goodbye.
hi, how are you. is alice there?	speaking. what's up?
speaking. what's up?	why haven't you answered the phone?
why haven't you answered the phone?	my bad, i had chores to do.
my bad, i had chores to do.	that's all right.
that's all right.	what was the reason for your call?
what was the reason for your call?	i want to do something tomorrow with you.
i want to do something tomorrow with you.	sounds good. what did you have in mind?
sounds good. what did you have in mind?	i was thinking about seeing a movie.
i was thinking about seeing a movie.	okay, let's go see a movie.
okay, let's go see a movie.	until then.
until then.	talk to you later.
is alice available?	you're talking to her.
you're talking to her.	i've called you a hundred times today.
i've called you a hundred times today.	i was busy doing something. i apologize.
i was busy doing something. i apologize.	no problem.
no problem.	did you need something?
did you need something?	do you want to do something tomorrow?
do you want to do something tomorrow?	is there somewhere special you wanted to go?
is there somewhere special you wanted to go?	how about a movie?
how about a movie?	a movie sounds good.
a movie sounds good.	call me tomorrow then.
have you seen the new girl in school?	no, i haven't.
no, i haven't.	she's really pretty.
she's really pretty.	describe her to me.
describe her to me.	she's not too tall.
she's not too tall.	well, how tall is she?
well, how tall is she?	she's about five feet even.
she's about five feet even.	what does she look like, though?
what does she look like, though?	she has pretty light brown eyes.
she has pretty light brown eyes.	i may know which girl you're talking about.
i may know which girl you're talking about.	so you have seen her around?
so you have seen her around?	yes, i have.
there's a new girl in school, have you seen her yet?	i haven't seen her yet.
i haven't seen her yet.	i think that she is very pretty.
i think that she is very pretty.	tell me how she looks.
tell me how she looks.	she's kind of short.
she's kind of short.	what height is she?
what height is she?	she's probably about five feet.
she's probably about five feet.	that's nice, but tell me what she looks like.
that's nice, but tell me what she looks like.	the first thing i noticed was her beautiful brown eyes.
the first thing i noticed was her beautiful brown eyes.	i think i might've bumped into her before.
i think i might've bumped into her before.	are you telling me that you've seen her before?
are you telling me that you've seen her before?	i believe so.
have you met the new girl?	no. have you?
no. have you?	she's one of the prettiest girls at the school.
she's one of the prettiest girls at the school.	what does she look like?
what does she look like?	well, she's quite short.
well, she's quite short.	how tall would you say that she is?
how tall would you say that she is?	i would say she's only five feet.
i would say she's only five feet.	what about her facial features?
what about her facial features?	she has light brown eyes, absolutely beautiful.
she has light brown eyes, absolutely beautiful.	i think i know who you're talking about.
i think i know who you're talking about.	have you seen her?
why weren't you at school yesterday?	i wasn't really feeling well.
i wasn't really feeling well.	what was wrong with you?
what was wrong with you?	my stomach was upset.
my stomach was upset.	do you feel better now?
do you feel better now?	i don't really feel too well yet.
i don't really feel too well yet.	do you want anything to make you feel better?
do you want anything to make you feel better?	no, thanks. i already took some medicine.
no, thanks. i already took some medicine.	i hope you feel better.
i hope you feel better.	thank you.
what reason do you have for missing school?	i was sick.
i was sick.	how were you sick?
how were you sick?	i had a stomachache.
i had a stomachache.	did it get any better?
did it get any better?	i'm still feeling under the weather.
i'm still feeling under the weather.	would you like anything for your stomach?
would you like anything for your stomach?	i took something earlier.
i took something earlier.	get better.
get better.	thanks a lot.
why didn't you go to school yesterday?	i stayed home because i wasn't feeling well.
i stayed home because i wasn't feeling well.	what was your problem?
what was your problem?	my stomach was bothering me.
my stomach was bothering me.	are you feeling any better?
are you feeling any better?	i'm still feeling a little sick.
i'm still feeling a little sick.	i'm going to the store, would you like any pepto bismol?
i'm going to the store, would you like any pepto bismol?	that's okay.
that's okay.	i hope you feel better.
did you hear the good news?	no, i haven't.
no, i haven't.	i got a promotion at my job.
i got a promotion at my job.	did you really?
did you really?	seriously, i am so excited.
seriously, i am so excited.	well, congratulations.
well, congratulations.	thank you.
thank you.	i'm so happy for you.
i'm so happy for you.	really?
really?	yes. you really deserved this.
yes. you really deserved this.	you think so?
you think so?	yes. good for you.
have you heard my good news?	you haven't told me anything yet.
you haven't told me anything yet.	i got a promotion at work earlier this week.
i got a promotion at work earlier this week.	is that right?
is that right?	it's the truth. i am really happy.
it's the truth. i am really happy.	congratulations on your promotion.
congratulations on your promotion.	thank you very much.
thank you very much.	i am really excited for you.
i am really excited for you.	are you really?
are you really?	i'm serious. you deserved this promotion.
i'm serious. you deserved this promotion.	is that what you really think?
is that what you really think?	yes, i do.
i haven't told you what happened yet, have i?	i haven't heard anything.
i haven't heard anything.	my boss offered me a promotion, and i took it.
my boss offered me a promotion, and i took it.	are you serious?
are you serious?	yes, i am really excited.
yes, i am really excited.	that's great. congratulations.
that's great. congratulations.	i appreciate that.
i appreciate that.	you have no idea how happy i am for you.
you have no idea how happy i am for you.	for real?
you look really nice today. 	thank you. i just got this outfit the other day.
thank you. i just got this outfit the other day.	really, where did you get it?
really, where did you get it?	i got it from macy's.
i got it from macy's.	it's really nice.
it's really nice.	thanks again. you look nice today, too.
thanks again. you look nice today, too.	thank you. i just got these shoes today.
thank you. i just got these shoes today.	really? what kind of shoes are they?
really? what kind of shoes are they?	these are called all star chuck taylors.
these are called all star chuck taylors.	i really like those. how much did they cost?
i really like those. how much did they cost?	they were about forty dollars.
they were about forty dollars.	i think i'm going to go buy myself a pair.
i absolutely love what you're wearing today.	you do? i just bought this outfit a couple days ago.
you do? i just bought this outfit a couple days ago.	seriously, it looks really nice on you. where did you buy it from?
seriously, it looks really nice on you. where did you buy it from?	i bought it from the macy's at the santa anita mall.
i bought it from the macy's at the santa anita mall.	i really like that outfit.
i really like that outfit.	thanks. i think you look nice today, too.
thanks. i think you look nice today, too.	thank you. i just bought these new shoes earlier today.
thank you. i just bought these new shoes earlier today.	those are nice. what are they?
those are nice. what are they?	these are some chucks.
these are some chucks.	those are great. how much were they?
those are great. how much were they?	i got them for forty.
i got them for forty.	i think i might go and find me my own pair of chucks.
i think that you look very cute today.	is that right? this is a brand new outfit.
is that right? this is a brand new outfit.	what store did you get it from?
what store did you get it from?	i went to macy's and picked it out.
i went to macy's and picked it out.	i love your outfit right now.
i love your outfit right now.	well, i think you look nice today too.
well, i think you look nice today too.	thanks. i found these new shoes earlier at the store.
thanks. i found these new shoes earlier at the store.	i think that those are some really nice shoes. what kind are they?
i think that those are some really nice shoes. what kind are they?	these are chucks.
these are chucks.	your shoes look really nice. how much did you get them for?
your shoes look really nice. how much did you get them for?	they only cost me about forty dollars.
tell me, what do you enjoy doing in your spare time?	i enjoy drawing and painting.
i enjoy drawing and painting.	you know how to draw and paint?
you know how to draw and paint?	yes, i do.
yes, i do.	when did you learn how to do that?
when did you learn how to do that?	i learned back in high school.
i learned back in high school.	oh, so you took an art class?
oh, so you took an art class?	yeah, i loved that class.
yeah, i loved that class.	i see that you're pretty talented.
i see that you're pretty talented.	thank you very much.
thank you very much.	i wish i had a talent like that.
i wish i had a talent like that.	i'm sure you have a talent. it's just hidden.
what kinds of things do you like to do?	i've always liked to draw and paint.
i've always liked to draw and paint.	i didn't know you knew how to draw and paint.
i didn't know you knew how to draw and paint.	i do it every once in a while.
i do it every once in a while.	how long have you known how to do that?
how long have you known how to do that?	i first learned how to do it in high school.
i first learned how to do it in high school.	did you take some sort of art class or something?
did you take some sort of art class or something?	that was my favorite class.
that was my favorite class.	you have got to be talented.
you have got to be talented.	thanks.
thanks.	if only i was talented.
if only i was talented.	you have a talent. you just don't know what it is yet.
are there any hobbies you do?	when i have time, i sometimes draw and paint.
when i have time, i sometimes draw and paint.	oh, you actually do that?
oh, you actually do that?	every so often, i do.
every so often, i do.	did you always know how to draw and paint?
did you always know how to draw and paint?	i was taught in high school how to draw and paint.
i was taught in high school how to draw and paint.	you had an art class?
you had an art class?	exactly, it was my favorite class.
exactly, it was my favorite class.	well, it's good that you're so talented.
well, it's good that you're so talented.	i appreciate that.
i appreciate that.	talent is a great thing, i wish i had one.
what's your favorite movie?	my favorite movie is superbad.
my favorite movie is superbad.	oh, why is that?
oh, why is that?	it's the funniest movie that i've ever seen.
it's the funniest movie that i've ever seen.	that's true. it is a very funny movie.
that's true. it is a very funny movie.	you've seen it before? 
you've seen it before? 	yes, i saw that movie the first day it came out in theaters.
yes, i saw that movie the first day it came out in theaters.	didn't you laugh through the whole movie? i did.
didn't you laugh through the whole movie? i did.	me too. that movie brought tears to my eyes.
me too. that movie brought tears to my eyes.	mine too.
mine too.	i have it on dvd at my house if you want to come over and watch it.
i have it on dvd at my house if you want to come over and watch it.	sure, let's go.
which movie is your favorite to watch?	i have to say, my favorite movie is superbad.
i have to say, my favorite movie is superbad.	is that right? why?
is that right? why?	honestly, it is one of the funniest movies i've seen in a long time.
honestly, it is one of the funniest movies i've seen in a long time.	you're right. that movie is hilarious.
you're right. that movie is hilarious.	i didn't think you saw that movie.
i didn't think you saw that movie.	i went to see it the day it came out.
i went to see it the day it came out.	i was laughing through the whole movie.
i was laughing through the whole movie.	i couldn't help laughing, either. 
i couldn't help laughing, either. 	same here.
same here.	i bought the movie. would you like to come to my house and watch it?
i bought the movie. would you like to come to my house and watch it?	of course.
out of every movie that you've seen, which one is your favorite?	i'm going to have to say that superbad is the best movie ever.
i'm going to have to say that superbad is the best movie ever.	you think so, how come?
you think so, how come?	well, superbad is super funny.
well, superbad is super funny.	you're not lying, i found that movie absolutely hilarious.
you're not lying, i found that movie absolutely hilarious.	i didn't know that you saw superbad before.
i didn't know that you saw superbad before.	i made sure to be in line to see it the first day it came out.
i made sure to be in line to see it the first day it came out.	i couldn't keep from laughing throughout the whole movie.
i couldn't keep from laughing throughout the whole movie.	i was laughing hysterically the whole time; my stomach muscles hurt afterwards.
i was laughing hysterically the whole time; my stomach muscles hurt afterwards.	that's exactly how i felt.
that's exactly how i felt.	i got the movie when it came out on dvd, do you want to come over?
what type of music do you like to listen to?	i like listening to different kinds of music.
i like listening to different kinds of music.	like what, for instance?
like what, for instance?	i enjoy rock and r&b.
i enjoy rock and r&b.	why is that?
why is that?	i like the different instruments that they use.
i like the different instruments that they use.	that's a good reason to like something.
that's a good reason to like something.	yeah, i think so too.
what kind of music do you enjoy listening to?	i enjoy listening to all kinds of music.
i enjoy listening to all kinds of music.	what kind?
what kind?	i like to listen to rock and r&b.
i like to listen to rock and r&b.	why do you like that type of music?
why do you like that type of music?	i like the kinds of instruments that they use.
i like the kinds of instruments that they use.	i think that's an excellent reason to like something.
i think that's an excellent reason to like something.	thanks, i feel the same way.
what is your favorite kind of music?	i listen to various types of music.
i listen to various types of music.	what genres?
what genres?	i enjoy listening to both rock and r&b.
i enjoy listening to both rock and r&b.	what interests you in that type of music?
what interests you in that type of music?	i enjoy the different types of instruments that they use.
i enjoy the different types of instruments that they use.	that is a perfect reason to like a certain kind of music.
did you go to the basketball game on friday?	no, i couldn't make it.
no, i couldn't make it.	you missed a really good game.
you missed a really good game.	oh, really? who won?
oh, really? who won?	our school did. they played really well.
our school did. they played really well.	too bad i was busy. i really wanted to go.
too bad i was busy. i really wanted to go.	yeah, you should have. it was really exciting.
yeah, you should have. it was really exciting.	so what was the score?
so what was the score?	the score was 101-98.
the score was 101-98.	man, that was a really close game.
man, that was a really close game.	that's what made it so great.
that's what made it so great.	i'll make sure and make it to the next one.
were you able to attend friday night's basketball game?	i was unable to make it.
i was unable to make it.	you should have been there. it was intense.
you should have been there. it was intense.	is that right. who ended up winning?
is that right. who ended up winning?	our team was victorious.
our team was victorious.	i wish i was free that night. i'm kind of mad that i didn't go.
i wish i was free that night. i'm kind of mad that i didn't go.	it was a great game.
it was a great game.	what was the score at the end of the game?
what was the score at the end of the game?	our team won 101-98.
our team won 101-98.	sounds like it was a close game.
sounds like it was a close game.	that's the reason it was such a great game.
that's the reason it was such a great game.	the next game, i will definitely be there.
i was meaning to ask you if you saw the basketball game on friday.	i wanted to go, but i couldn't.
i wanted to go, but i couldn't.	it was a great game.
it was a great game.	it's too bad that i couldn't make it. who won?
it's too bad that i couldn't make it. who won?	our team played hard and won.
our team played hard and won.	i really wish i went to the game.
i really wish i went to the game.	it was the best game ever.
it was the best game ever.	so tell me the final score.
so tell me the final score.	the other team lost by three points, 101-98. 
the other team lost by three points, 101-98. 	it must've been a close game.
it must've been a close game.	it really was. you should've gone.
what are you doing this weekend?	i'm going to the movies with a friend. how about you?
i'm going to the movies with a friend. how about you?	i'm not sure yet.
i'm not sure yet.	well, did you want to go see a movie with me?
well, did you want to go see a movie with me?	what movie are you going to see?
what movie are you going to see?	i'm not sure yet. is there something you want to see?
i'm not sure yet. is there something you want to see?	there's nothing i can think of.
there's nothing i can think of.	so, did you want to go?
so, did you want to go?	no, thanks, maybe another time.
no, thanks, maybe another time.	okay, sounds good.
do you know what you're going to do this weekend?	i am going to see a movie with a friend of mine. what about you?
i am going to see a movie with a friend of mine. what about you?	i don't know.
i don't know.	would you like to see a movie with me and my friend?
would you like to see a movie with me and my friend?	do you know what movie you're going to watch?
do you know what movie you're going to watch?	i don't know, but was there a certain movie you wanted to see?
i don't know, but was there a certain movie you wanted to see?	none that i can think of.
none that i can think of.	well, would you like to go?
well, would you like to go?	thank you for inviting me, but i think i'll pass.
thank you for inviting me, but i think i'll pass.	all right. another time then.
you have any ideas as to what you want to do this weekend?	i'm going to the movie theater with my friend. what are you going to do?
i'm going to the movie theater with my friend. what are you going to do?	i'm not quite sure yet.
i'm not quite sure yet.	how about you see a movie with me and my friend?
how about you see a movie with me and my friend?	what movie are you and your friend planning on watching?
what movie are you and your friend planning on watching?	not sure. is there a movie out that catches your eye?
not sure. is there a movie out that catches your eye?	no good movies come to mind.
no good movies come to mind.	have you decided whether or not you would like to go?
have you decided whether or not you would like to go?	no, thanks. maybe another time.
did you go to school today?	yeah, i went to school today. were you there?
yeah, i went to school today. were you there?	no, i didn't go, i've been sick.
no, i didn't go, i've been sick.	that sucks. did you want the assignments from english class?
that sucks. did you want the assignments from english class?	that would be nice, thank you.
that would be nice, thank you.	no problem, you're welcome.
no problem, you're welcome.	i will be glad to do the same for you when you're sick.
i will be glad to do the same for you when you're sick.	well, thank you. i hope to see you at school tomorrow.
have you attended school today?	i attended school today. did you?
i attended school today. did you?	i wasn't able to attend school because i was feeling ill.
i wasn't able to attend school because i was feeling ill.	i'm sorry to hear that. would you like the assignments from english class?
i'm sorry to hear that. would you like the assignments from english class?	i would really appreciate that, thanks.
i would really appreciate that, thanks.	it's no trouble at all.
it's no trouble at all.	if you get sick, i'll return the favor.
if you get sick, i'll return the favor.	thanks. see you at school tomorrow if you feel better.
have you gone to school today?	i went to school today. did you go to school?
i went to school today. did you go to school?	i couldn't go to school today, i was sick.
i couldn't go to school today, i was sick.	that's horrible. i'd be happy to give you the assignments from english class.
that's horrible. i'd be happy to give you the assignments from english class.	thank you very much, that's kind of you.
thank you very much, that's kind of you.	don't mention it.
don't mention it.	when you miss a day of school, i'll be happy to give you the english assignments.
did you hear the news?	what happened?
what happened?	our cousin went into labor and had her baby last week.
our cousin went into labor and had her baby last week.	she did? why didn't anyone tell me?
she did? why didn't anyone tell me?	i would've thought that somebody would have told you.
i would've thought that somebody would have told you.	no, i had no idea.
no, i had no idea.	well, she did, her baby was 8 pounds 6 ounces.
well, she did, her baby was 8 pounds 6 ounces.	oh my god, that's great!
oh my god, that's great!	are you going to go and visit her and the baby?
are you going to go and visit her and the baby?	i think that i might.
i think that i might.	good! i just thought i'd let you know.
good! i just thought i'd let you know.	thanks for telling me.
have you heard what happened?	heard what?
heard what?	debrah already had her baby.
debrah already had her baby.	i didn't know that.
i didn't know that.	i thought you knew.
i thought you knew.	i honestly didn't know.
i honestly didn't know.	the baby was 8 pounds 6 ounces.
the baby was 8 pounds 6 ounces.	that's good to hear.
that's good to hear.	will you go and visit them?
will you go and visit them?	of course i will.
of course i will.	i just wanted to give you the good news.
i just wanted to give you the good news.	thanks for letting me know.
have you heard the news?	i haven't heard anything.
i haven't heard anything.	debrah had her baby last week.
debrah had her baby last week.	nobody told me.
nobody told me.	i thought you heard.
i thought you heard.	i really wasn't told anything.
i really wasn't told anything.	she was a cute 8 pounds 6 ounces.
she was a cute 8 pounds 6 ounces.	wow, how exciting.
wow, how exciting.	i know, you should really go and see her and the baby.
i know, you should really go and see her and the baby.	of course i will.
of course i will.	i just wanted to let you know what happened.
did you go to school today?	of course. did you?
of course. did you?	i didn't want to, so i didn't.
i didn't want to, so i didn't.	that's sad, but have you gone to the movies recently?
that's sad, but have you gone to the movies recently?	that's a switch.
that's a switch.	i'm serious, have you?
i'm serious, have you?	no, i haven't. why?
no, i haven't. why?	i really want to go to the movies this weekend.
i really want to go to the movies this weekend.	so go then.
so go then.	i really don't want to go by myself.
i really don't want to go by myself.	well anyway, do you plan on going to school tomorrow?
well anyway, do you plan on going to school tomorrow?	no, i think i'm going to go to the movies.
did you make it to school today?	i always do. did you go to school today?
i always do. did you go to school today?	no, i didn't.
no, i didn't.	you should have, but have you seen any movies lately?
you should have, but have you seen any movies lately?	that was an odd change of subject.
that was an odd change of subject.	maybe it was, but answer the question.
maybe it was, but answer the question.	no, not recently.
no, not recently.	i want to go to see a movie this weekend.
i want to go to see a movie this weekend.	what's stopping you then?
what's stopping you then?	i don't want to go alone.
i don't want to go alone.	so, will you be at school tomorrow?
so, will you be at school tomorrow?	no, i want to go to the movies instead.
did you even bother to go to school today?	yeah, i went. did you go?
yeah, i went. did you go?	no, i didn't feel like it.
no, i didn't feel like it.	that's nice, have you been to the movies lately?
that's nice, have you been to the movies lately?	no, but that was a random change of subject.
no, but that was a random change of subject.	it may have been random, but have you?
it may have been random, but have you?	i haven't lately.
i haven't lately.	i would love to catch a movie this weekend.
i would love to catch a movie this weekend.	so then, why don't you just go?
so then, why don't you just go?	i don't want to see a movie by myself.
i don't want to see a movie by myself.	okay, so are you going to school tomorrow?
thanks for coming to see me today.	it's no problem. i was really missing you anyway.
it's no problem. i was really missing you anyway.	i missed you too.
i missed you too.	why haven't you tried to come see me then?
why haven't you tried to come see me then?	i've been really busy.
i've been really busy.	doing what?
doing what?	working.
working.	i would've come to see you sooner, but i've been busy too.
i would've come to see you sooner, but i've been busy too.	what have you been doing?
what have you been doing?	i've been working too.
i've been working too.	well regardless, i'm very happy that you came to see me.
well regardless, i'm very happy that you came to see me.	i am too.
i'm really glad that you came to see me.	i had to. i was missing you a lot.
i had to. i was missing you a lot.	i was missing you too.
i was missing you too.	so, why haven't you visited me?
so, why haven't you visited me?	i've actually been busy lately.
i've actually been busy lately.	what have you been doing?
what have you been doing?	i've just been working really hard.
i've just been working really hard.	i've also been busy.
i've also been busy.	tell me what you've been doing.
tell me what you've been doing.	basically, i've been working too.
basically, i've been working too.	well whatever, i'm glad you came.
well whatever, i'm glad you came.	so am i.
i'm really happy that you came to visit me.	i really missed you a lot.
i really missed you a lot.	i've been missing you like crazy.
i've been missing you like crazy.	i don't understand why you haven't come to visit me.
i don't understand why you haven't come to visit me.	lately, i've been quite busy.
lately, i've been quite busy.	tell me what you've been up to.
tell me what you've been up to.	i've really been working a lot lately.
i've really been working a lot lately.	i've been pretty busy myself.
i've been pretty busy myself.	so what have you been up to?
so what have you been up to?	i've just been working a lot.
i've just been working a lot.	whatever the reason may be, i'm glad you visited me.
hey, did you hear about jessica's party this weekend?	yeah, but i'm still waiting for my invitation.
yeah, but i'm still waiting for my invitation.	oh really? she gave me mine earlier today.
oh really? she gave me mine earlier today.	well, she'll probably just give me my invitation later on today.
well, she'll probably just give me my invitation later on today.	yeah, so are you planning on going?
yeah, so are you planning on going?	i think so. it sounds like it's going to be a lot of fun.
i think so. it sounds like it's going to be a lot of fun.	it really does, i can't wait.
it really does, i can't wait.	what time does the party start?
what time does the party start?	it starts at 8 o'clock.
it starts at 8 o'clock.	oh, well, how many people has she given invites to so far?
oh, well, how many people has she given invites to so far?	i'm not sure, but i don't think she's given out that many.
i'm not sure, but i don't think she's given out that many.	well, hopefully she'll give me my invite later on today.
have you heard about jessica's party on saturday?	i've heard about it, but i'm still waiting for my invitation.
i've heard about it, but i'm still waiting for my invitation.	really? i got mine from her this morning.
really? i got mine from her this morning.	i'm guessing that she's going to give me my invite today or tomorrow.
i'm guessing that she's going to give me my invite today or tomorrow.	you're probably right, do you intend on going to the party?
you're probably right, do you intend on going to the party?	i want to. i heard it's going to be really fun.
i want to. i heard it's going to be really fun.	i know, it does sound pretty awesome.
i know, it does sound pretty awesome.	well, when does the party start?
well, when does the party start?	it's supposed to start at about eight.
it's supposed to start at about eight.	how many invitations has she given out?
how many invitations has she given out?	i really don't know, but i don't think she gave out that many yet.
i really don't know, but i don't think she gave out that many yet.	i really want to go, so i hope that she gives me my invite soon.
has anyone told you about jessica's party coming up?	i was told about it already. i'm just waiting for my invitation.
i was told about it already. i'm just waiting for my invitation.	is that right? i already got my invitation from her earlier.
is that right? i already got my invitation from her earlier.	i believe that she will give me the invitation today.
i believe that she will give me the invitation today.	are you even going to go?
are you even going to go?	yeah, it sounds like it's going to be the best party of the year.
yeah, it sounds like it's going to be the best party of the year.	exactly, it seems like it's going to be loads of fun.
exactly, it seems like it's going to be loads of fun.	when exactly does the party start?
when exactly does the party start?	the invitation says it starts at 8:00 p.m.
the invitation says it starts at 8:00 p.m.	has she given out a lot of invitations yet?
has she given out a lot of invitations yet?	i have no idea, she hasn't given out many though.
hey, what's up?	nothing really.
nothing really.	i'm throwing a party on friday.
i'm throwing a party on friday.	i didn't realize that.
i didn't realize that.	you didn't?
you didn't?	nobody has told me anything about your party.
nobody has told me anything about your party.	did you want to go?
did you want to go?	when does it start?
when does it start?	at 8:00 p.m.
at 8:00 p.m.	i'll be there.
i'll be there.	i'd better see you there.
i'd better see you there.	of course.
what's going on with you?	fine. what's going on with you?
fine. what's going on with you?	i'm having a party this friday.
i'm having a party this friday.	i had no idea.
i had no idea.	is that right?
is that right?	i didn't hear anything about it.
i didn't hear anything about it.	can you go?
can you go?	what time?
what time?	it starts at 8 o'clock.
it starts at 8 o'clock.	i'll go.
i'll go.	i hope that i'll see you there.
i hope that i'll see you there.	no doubt.
what's going on?	not much.
not much.	this friday, i'm throwing a party.
this friday, i'm throwing a party.	oh really? i didn't know that.
oh really? i didn't know that.	are you serious?
are you serious?	i haven't heard anything about it.
i haven't heard anything about it.	can you make it?
can you make it?	what time does it start?
what time does it start?	the party starts at 8.
the party starts at 8.	yeah, i think i'll go.
yeah, i think i'll go.	am i going to see you there?
what's going on?	nothing really, you?
nothing really, you?	i'm throwing a party next saturday.
i'm throwing a party next saturday.	is that right?
is that right?	yeah, are you going to come?
yeah, are you going to come?	i'm sorry, i can't.
i'm sorry, i can't.	why not?
why not?	i don't really want to.
i don't really want to.	well, why don't you?
well, why don't you?	i hate going to parties.
i hate going to parties.	well, that's okay.
well, that's okay.	yeah, sorry.
what's up?	nothing, how about you?
nothing, how about you?	next saturday, i'm going to have a party.
next saturday, i'm going to have a party.	oh, really?
oh, really?	you are coming?
you are coming?	probably not.
probably not.	why is that?
why is that?	i don't feel like going.
i don't feel like going.	why not?
why not?	i really can't stand going to parties.
i really can't stand going to parties.	i understand, i guess.
i understand, i guess.	sorry about that.
what's happening?	not a lot, what about you?
not a lot, what about you?	i'm having a party next saturday.
i'm having a party next saturday.	that's nice.
that's nice.	are you going to be there?
are you going to be there?	i don't think so.
i don't think so.	is there a reason why?
is there a reason why?	i just really don't want to go.
i just really don't want to go.	how come?
how come?	i don't really like parties.
i don't really like parties.	i wish you would go, but that's okay.
what's up?	nothing much, what's going on?
nothing much, what's going on?	i'm having a party this friday.
i'm having a party this friday.	oh, really? that's nice.
oh, really? that's nice.	i wanted to see if you wanted to come.
i wanted to see if you wanted to come.	this friday? sorry, i already have plans.
this friday? sorry, i already have plans.	doing what?
doing what?	i'm going to dinner with my family.
i'm going to dinner with my family.	i really wanted you to come, but i understand.
i really wanted you to come, but i understand.	yeah, maybe next time.
yeah, maybe next time.	i'll hold you to that.
i'll hold you to that.	sounds like a plan.
hey, what's good with you?	not a lot. what about you?
not a lot. what about you?	i'm throwing a party on friday.
i'm throwing a party on friday.	that sounds like fun.
that sounds like fun.	do you think you can come?
do you think you can come?	i'm sorry. i'm already doing something this friday.
i'm sorry. i'm already doing something this friday.	what are you going to be doing?
what are you going to be doing?	my family and i are going to dinner.
my family and i are going to dinner.	i was hoping you would come.
i was hoping you would come.	i'll definitely try to make it the next time.
i'll definitely try to make it the next time.	i'd better see you there.
i'd better see you there.	all right. i'll see you next time.
what's going on?	nothing really. how about you?
nothing really. how about you?	a lot, like the party i'm having on friday.
a lot, like the party i'm having on friday.	well, that's cool.
well, that's cool.	will you be able to make it?
will you be able to make it?	i'm busy this friday. i'm sorry.
i'm busy this friday. i'm sorry.	what do you have to do?
what do you have to do?	i'm having dinner with my family
i'm having dinner with my family	maybe you can come next time.
maybe you can come next time.	i'll make sure and come to your next party.
i'll make sure and come to your next party.	i'll look for you at my next party.
it was nice talking to you.	why are you trying to rush me off the phone?
why are you trying to rush me off the phone?	i really have to go.
i really have to go.	why? i still wanted to talk to you.
why? i still wanted to talk to you.	i have things to do.
i have things to do.	like what?
like what?	don't be nosey.
don't be nosey.	i'm not. i just want to know.
i'm not. i just want to know.	well, it's really none of your business.
well, it's really none of your business.	that's harsh.
that's harsh.	i'm sorry, but i have to go.
i'm sorry, but i have to go.	fine.
i've enjoyed conversing with you.	is there a reason why you're trying to get off the phone so fast?
is there a reason why you're trying to get off the phone so fast?	i've got to go.
i've got to go.	i wasn't done talking to you.
i wasn't done talking to you.	i have to do some things, and besides, it's not polite to be nosey.
i have to do some things, and besides, it's not polite to be nosey.	i'm not being nosey. i'm just asking.
i'm not being nosey. i'm just asking.	i really don't think it's any of your business.
i really don't think it's any of your business.	that's not nice.
that's not nice.	i apologize, but i'm getting off the phone now.
i apologize, but i'm getting off the phone now.	okay.
i'll talk to you later.	what's the rush?
what's the rush?	i have to get off the phone now.
i have to get off the phone now.	i'm not ready to get off the phone with you.
i'm not ready to get off the phone with you.	there are other things i need to take care of.
there are other things i need to take care of.	what is it that you need to do? 
what is it that you need to do? 	please don't be nosey.
please don't be nosey.	i'm not being nosey, it's just a question.
i'm not being nosey, it's just a question.	you don't need to worry about that.
you don't need to worry about that.	that was mean to say.
that was mean to say.	i am very sorry, but i must go.
well, it was nice talking to you.	it was nice talking to you too.
it was nice talking to you too.	we should really hang out again.
we should really hang out again.	that would be fun.
that would be fun.	where do you want to go?
where do you want to go?	i think we should go out to eat.
i think we should go out to eat.	that sounds good.
that sounds good.	all right, so i'll see you then.
all right, so i'll see you then.	i'll call you later.
i'll call you later.	okay, i'll talk to you later then.
okay, i'll talk to you later then.	see you later.
see you later.	bye.
i enjoyed talking to you.	i enjoyed talking to you too.
i enjoyed talking to you too.	we should hang out some time.
we should hang out some time.	i think that would be nice.
i think that would be nice.	is there anything you would like to do next time?
is there anything you would like to do next time?	do you want to go out to eat?
do you want to go out to eat?	i'd like that.
i'd like that.	so i'll see you next time.
so i'll see you next time.	i'm going to call you soon. 
i'm going to call you soon. 	i'll talk to you later.
i'll talk to you later.	see you soon.
see you soon.	goodbye.
i had fun talking to you.	it was really nice talking to you also.
it was really nice talking to you also.	i think we should really do something sometime.
i think we should really do something sometime.	that should be loads of fun.
that should be loads of fun.	what do you want to do next time?
what do you want to do next time?	would you like to go to dinner or something?
would you like to go to dinner or something?	yeah, let's do that.
yeah, let's do that.	okay, until next time then.
okay, until next time then.	i'll call you so we can set that up.
i'll call you so we can set that up.	talk to you then.
talk to you then.	all right, see you.
where do you live?	i live in pasadena.
i live in pasadena.	where is pasadena?
where is pasadena?	it's in california.
it's in california.	is it in northern california?
is it in northern california?	no. it's in southern california.
no. it's in southern california.	is pasadena a big city?
is pasadena a big city?	it's pretty big.
it's pretty big.	how big is "pretty big"?
how big is "pretty big"?	it has about 140,000 people.
it has about 140,000 people.	how big is los angeles?
how big is los angeles?	it has about 3 million people.
do you have a car?	yes, i do.
yes, i do.	what kind of car do you have?
what kind of car do you have?	i have a honda.
i have a honda.	is it new?
is it new?	it was new in 2003.
it was new in 2003.	so, it's pretty old now.
so, it's pretty old now.	yes, it is. but it still looks good.
yes, it is. but it still looks good.	do you take good care of it?
do you take good care of it?	oh, yes. i wash it once a week.
oh, yes. i wash it once a week.	do you change the oil?
do you change the oil?	my mechanic changes the oil twice a year.
do you have a girlfriend?	no, i don't. do you?
no, i don't. do you?	i don't have a girlfriend, either.
i don't have a girlfriend, either.	why not?
why not?	i don't know. maybe i'm not rich enough.
i don't know. maybe i'm not rich enough.	girls like guys with money.
girls like guys with money.	they sure do.
they sure do.	they like guys with new cars.
they like guys with new cars.	i don't have money or a new car.
i don't have money or a new car.	me, neither.
me, neither.	but girls like guys who are funny.
but girls like guys who are funny.	maybe we should learn some good jokes.
where are you going?	i have to walk the dog.
i have to walk the dog.	what kind of dog do you have?
what kind of dog do you have?	i have a little poodle.
i have a little poodle.	poodles bark a lot.
poodles bark a lot.	they sure do.
they sure do.	they bark at everything.
they bark at everything.	they never shut up.
they never shut up.	why did you get a poodle?
why did you get a poodle?	it's my mom's dog.
it's my mom's dog.	so she likes poodles.
so she likes poodles.	she says they're good watchdogs.
can i borrow $5?	sure. why do you need it?
sure. why do you need it?	i want to buy lunch.
i want to buy lunch.	where's your money?
where's your money?	it's not in my wallet.
it's not in my wallet.	your wallet is empty?
your wallet is empty?	i don't have even one dollar in it.
i don't have even one dollar in it.	being broke is no fun.
being broke is no fun.	even if it's only for a short while.
even if it's only for a short while.	it's always good to have friends.
it's always good to have friends.	friends will lend you money when you're broke.
friends will lend you money when you're broke.	as long as you pay them back.
let's go to the beach.	that's a great idea.
that's a great idea.	we haven't been in a while.
we haven't been in a while.	we haven't been in a month.
we haven't been in a month.	the last time we went, you almost drowned.
the last time we went, you almost drowned.	no, i didn't.
no, i didn't.	then why did the lifeguard dive into the water?
then why did the lifeguard dive into the water?	i think he wanted to cool off.
i think he wanted to cool off.	he swam right up to you.
he swam right up to you.	and then he turned right around.
and then he turned right around.	maybe you're right.
maybe you're right.	maybe we should get going.
are you married?	no. i'm divorced.
no. i'm divorced.	when did you get divorced?
when did you get divorced?	i got divorced two years ago.
i got divorced two years ago.	why did you get divorced?
why did you get divorced?	my wife left me.
my wife left me.	why did she leave you?
why did she leave you?	she said she didn't love me anymore.
she said she didn't love me anymore.	wow! that's terrible.
wow! that's terrible.	yes, it was.
yes, it was.	why didn't she love you anymore?
why didn't she love you anymore?	she fell in love with my best friend.
i'm bored.	what's on tv?
what's on tv?	nothing.
nothing.	there must be something on tv!
there must be something on tv!	nothing that's interesting.
nothing that's interesting.	what about that new game show?
what about that new game show?	which one?
which one?	"deal or no deal"
"deal or no deal"	tell me you're joking.
tell me you're joking.	i love that show.
i love that show.	i watched it once. that was enough.
i watched it once. that was enough.	it's on right now. let's watch it together.
i like living here.	i agree. pasadena is a nice city.
i agree. pasadena is a nice city.	it's not too big.
it's not too big.	and it's not too small.
and it's not too small.	it has great weather all year long.
it has great weather all year long.	it has the rose parade.
it has the rose parade.	it has beautiful houses.
it has beautiful houses.	it has wonderful restaurants.
it has wonderful restaurants.	it has great schools.
it has great schools.	it's close to the mountains.
it's close to the mountains.	the people are friendly.
the people are friendly.	i'm not ever going to leave.
we need a new mattress.	what's the matter with this one?
what's the matter with this one?	it's not comfortable.
it's not comfortable.	it seems fine to me.
it seems fine to me.	i toss and turn all night.
i toss and turn all night.	you should stop drinking coffee.
you should stop drinking coffee.	look at these marks on my arms.
look at these marks on my arms.	what are they?
what are they?	they are bites.
they are bites.	did the cat bite you?
did the cat bite you?	no. the bedbugs in that mattress bit me.
no. the bedbugs in that mattress bit me.	okay. let's get a new mattress.
my laptop is so slow.	buy a new one.
buy a new one.	i would if i had the money.
i would if i had the money.	why is it so slow?
why is it so slow?	that's a good question.
that's a good question.	did you take it to a computer shop?
did you take it to a computer shop?	i would if i had the money.
i would if i had the money.	well, i guess you have to live with it.
well, i guess you have to live with it.	sometimes i want to throw it out the window.
sometimes i want to throw it out the window.	you don't want to do that.
you don't want to do that.	why not?
why not?	you might hit someone in the head.
what's for dinner?	i'm not sure.
i'm not sure.	how about a pizza?
how about a pizza?	you had pizza for lunch.
you had pizza for lunch.	but i love pizza.
but i love pizza.	everybody loves pizza.
everybody loves pizza.	so why can't i have pizza for dinner?
so why can't i have pizza for dinner?	because you need variety.
because you need variety.	what's "variety?
what's "variety?	different thingsÂ—not the same thing all the time.
different thingsÂ—not the same thing all the time.	you mean, like a pepperoni pizza instead of a cheese pizza?
you mean, like a pepperoni pizza instead of a cheese pizza?	no, i mean a salad instead of a pizza.
we need to save money.	why do we need to save money?
why do we need to save money?	because we need to buy a house.
because we need to buy a house.	but a house is so expensive.
but a house is so expensive.	that's why we need to save money.
that's why we need to save money.	how much do we need to save?
how much do we need to save?	we need to save enough for a down payment.
we need to save enough for a down payment.	how much is that?
how much is that?	that's about $30,000.
that's about $30,000.	thirty thousand dollars! that will take forever.
thirty thousand dollars! that will take forever.	not if we save every penny.
not if we save every penny.	okay. here's seven pennies.
the ocean is so big.	you can't see the end of it.
you can't see the end of it.	it goes on and on forever.
it goes on and on forever.	and it's deep, too.
and it's deep, too.	i think it's five miles deep.
i think it's five miles deep.	are there fish at the bottom?
are there fish at the bottom?	there are fish at the top and the bottom.
there are fish at the top and the bottom.	are there more fish or more people?
are there more fish or more people?	i think there are more fish.
i think there are more fish.	i hope so. i love to eat fish.
i'm upset with my mom.	why is that?
why is that?	i warned her about her new boyfriend. she didn't listen to me.
i warned her about her new boyfriend. she didn't listen to me.	what happened?
what happened?	i gave her $1,000 for her birthday. i told her to spend it on herself.
i gave her $1,000 for her birthday. i told her to spend it on herself.	that was very nice of you.
that was very nice of you.	i found out that she gave it to her new boyfriend.
i found out that she gave it to her new boyfriend.	why did she do that?
why did she do that?	he said he would buy her a nice ring.
he said he would buy her a nice ring.	what's wrong with that?
what's wrong with that?	he went to las vegas. he lost it all gambling.
he went to las vegas. he lost it all gambling.	i hope your mom broke up with him.
do animals talk to each other?	of course they talk to each other.
of course they talk to each other.	what do they talk about?
what do they talk about?	they talk about other animals.
they talk about other animals.	what else do they talk about?
what else do they talk about?	they talk about food and the weather.
they talk about food and the weather.	do they talk about us?
do they talk about us?	of course they talk about us.
of course they talk about us.	what do they say about us?
what do they say about us?	they say that we are funny-looking.
they say that we are funny-looking.	ha! we're not funny-looking; animals are funny-looking.
ha! we're not funny-looking; animals are funny-looking.	we're funny-looking because we wear clothes.
i have to clean the house.	yes, it's very dirty.
yes, it's very dirty.	you can help me.
you can help me.	why me?
why me?	because you helped make it dirty.
because you helped make it dirty.	what do you want me to do?
what do you want me to do?	i want you to clean the bathroom.
i want you to clean the bathroom.	oh, that's easy.
oh, that's easy.	clean the sink, the tub, the counter, and the toilet.
clean the sink, the tub, the counter, and the toilet.	that's a lot of work.
that's a lot of work.	tell me when you finish.
tell me when you finish.	i don't think so. you'll just give me more work.
you're watching too much tv.	what do you mean?
what do you mean?	i mean you're wasting your life.
i mean you're wasting your life.	i'm having fun.
i'm having fun.	you're sitting there with your mouth open.
you're sitting there with your mouth open.	who cares?
who cares?	i care. do something.
i care. do something.	okay. i did something.
okay. i did something.	what did you do?
what did you do?	i turned up the volume.
i turned up the volume.	that's not what i meant by "do something."
that's not what i meant by "do something."	will you do something? leave me alone.
did you write a letter to grandma?	yes, i did.
yes, i did.	did you tell her about school?
did you tell her about school?	i told her that school is fun.
i told her that school is fun.	did you put the letter in an envelope?
did you put the letter in an envelope?	yes, and i sealed the envelope.
yes, and i sealed the envelope.	did you put a stamp on the envelope?
did you put a stamp on the envelope?	i couldn't find any stamps.
i couldn't find any stamps.	they're in the kitchen drawer.
they're in the kitchen drawer.	okay. i just put a stamp on the envelope.
okay. i just put a stamp on the envelope.	give me the envelope, and i'll mail it for you.
give me the envelope, and i'll mail it for you.	when is grandma going to learn about e-mail?
why are you yawning?	i'm sleepy.
i'm sleepy.	why don't you go to bed?
why don't you go to bed?	i want to watch this tv show.
i want to watch this tv show.	maybe you should record it.
maybe you should record it.	the tape recorder is broken.
the tape recorder is broken.	then you should watch the rerun.
then you should watch the rerun.	why? i'm watching the original.
why? i'm watching the original.	but you'll be asleep in about one minute.
but you'll be asleep in about one minute.	i'm just yawning because the commercials are on.
i'm just yawning because the commercials are on.	okay. i'll tell you how the show ends.
okay. i'll tell you how the show ends.	zzz.
it's sunday.	so?
so?	you know what that means.
you know what that means.	i forgot.
i forgot.	sunday means we go to church.
sunday means we go to church.	oh, yeah.
oh, yeah.	put on a coat and tie.
put on a coat and tie.	why?
why?	to show respect to god and others.
to show respect to god and others.	i'm glad sunday is only once a week.
i'm glad sunday is only once a week.	i hope god didn't hear that.
i hope god didn't hear that.	he'll forgive me.
did you feed the cat?	i'll do that in a minute.
i'll do that in a minute.	the cat is meowing. he's hungry.
the cat is meowing. he's hungry.	okay. i'll feed him right now.
okay. i'll feed him right now.	you shouldn't make him wait.
you shouldn't make him wait.	i was doing my homework.
i was doing my homework.	the cat doesn't care about your homework.
the cat doesn't care about your homework.	the cat doesn't care about anything.
the cat doesn't care about anything.	that's the way cats are.
that's the way cats are.	all they think about is themselves.
all they think about is themselves.	maybe we should get rid of him.
maybe we should get rid of him.	of course not! he's family.
i hate shaving.	me too.
me too.	i just cut myself again.
i just cut myself again.	did you use a new blade?
did you use a new blade?	it doesn't matter. old blades cut, new blades cut.
it doesn't matter. old blades cut, new blades cut.	maybe you should use an electric shaver.
maybe you should use an electric shaver.	they make a lot of noise, but they don't give a close shave.
they make a lot of noise, but they don't give a close shave.	maybe you should stop shaving.
maybe you should stop shaving.	and grow a beard?
and grow a beard?	sure. why not?
sure. why not?	because food and other stuff sticks in my beard.
because food and other stuff sticks in my beard.	hmm. here's an idea. put cream on your face and have the cat lick it off.
excuse me.	yes?
yes?	are you reading this paper?
are you reading this paper?	oh, no. help yourself.
oh, no. help yourself.	i asked because the paper is sitting next to you.
i asked because the paper is sitting next to you.	thank you. that's polite of you to ask.
thank you. that's polite of you to ask.	some people would just pick it up.
some people would just pick it up.	yes, i know. some people are rude.
yes, i know. some people are rude.	i always try to be polite.
i always try to be polite.	so do i.
so do i.	the world needs more polite people like us.
the world needs more polite people like us.	i agree 100 percent.
mom, i want a puppy.	let me think about it.
let me think about it.	why do you have to think about it?
why do you have to think about it?	because a puppy costs money.
because a puppy costs money.	no, it doesn't. puppies are free.
no, it doesn't. puppies are free.	yes, but a puppy needs shots.
yes, but a puppy needs shots.	shots for what?
shots for what?	so it won't get sick. just like you get shots.
so it won't get sick. just like you get shots.	i hate shots.
i hate shots.	and a puppy eats food. food costs money.
and a puppy eats food. food costs money.	no problem. i'll give him food off my plate.
no problem. i'll give him food off my plate.	oh, no you don't. puppies don't eat vegetables.
look at all these kittens!	how many are there?
how many are there?	eight.
eight.	they're all so cute.
they're all so cute.	yes, but i can't keep them.
yes, but i can't keep them.	what are you going to do with them?
what are you going to do with them?	i'm going to give them away. do you want one?
i'm going to give them away. do you want one?	yes, i would love one.
yes, i would love one.	which one do you want?
which one do you want?	that one. the one that's all black.
that one. the one that's all black.	yes, i like that one, too.
yes, i like that one, too.	i'll call him blacky.
my parents go to church every sunday.	they trust in god.
they trust in god.	they hope they will go to heaven.
they hope they will go to heaven.	they probably will.
they probably will.	but no one knows for sure.
but no one knows for sure.	that's for sure.
that's for sure.	no one knows what happens after we die.
no one knows what happens after we die.	if we are good, we will be happy in heaven with god.
if we are good, we will be happy in heaven with god.	that's what many people believe.
that's what many people believe.	if we are bad, we will be unhappy forever in hell.
if we are bad, we will be unhappy forever in hell.	i don't want to go to hell.
i don't want to go to hell.	let's go to church with your parents on sunday.
my husband died.	i'm sorry for you.
i'm sorry for you.	thank you.
thank you.	when did he die?
when did he die?	a couple of months ago.
a couple of months ago.	you still miss him.
you still miss him.	yes, but i talk to him almost every day.
yes, but i talk to him almost every day.	when you go to church?
when you go to church?	no, when i call him on his cell phone.
no, when i call him on his cell phone.	what do you mean?
what do you mean?	i buried him with his cell phone.
i buried him with his cell phone.	what will you do when the battery dies?
today is friday the thirteenth.	that's a bad day.
that's a bad day.	it's supposed to be unlucky.
it's supposed to be unlucky.	you're supposed to stay home all day.
you're supposed to stay home all day.	that's what i do.
that's what i do.	my friend stayed in a hotel on friday the thirteenth.
my friend stayed in a hotel on friday the thirteenth.	that was a mistake.
that was a mistake.	he stayed on the thirteenth floor.
he stayed on the thirteenth floor.	what happened?
what happened?	someone stole his laptop.
someone stole his laptop.	he was asking for it.
he was asking for it.	he learned his lesson. he's home today.
do you really love me?	of course.
of course.	prove it.
prove it.	how can i prove it?
how can i prove it?	take me to dinner.
take me to dinner.	that's it? that's all i have to do?
that's it? that's all i have to do?	take me to a nice restaurant, not to mcdonald's.
take me to a nice restaurant, not to mcdonald's.	but a nice restaurant costs money.
but a nice restaurant costs money.	yes, and you have to make a reservation.
yes, and you have to make a reservation.	that's such a hassle.
that's such a hassle.	i knew you didn't love me.
i knew you didn't love me.	okay, okay! i'll make a reservation right now.
my parents are divorced.	so are mine.
so are mine.	why did your parents get divorced?
why did your parents get divorced?	my father found a new girlfriend.
my father found a new girlfriend.	that's too bad.
that's too bad.	my mother was hurt and angry.
my mother was hurt and angry.	she had good reason. what did she do?
she had good reason. what did she do?	she told him to drop his girlfriend.
she told him to drop his girlfriend.	what did your father do?
what did your father do?	he moved out of our house.
he moved out of our house.	i guess he really liked his new girlfriend.
i guess he really liked his new girlfriend.	yes, but she left him a year later.
my grandma's apartment smells funny.	so does mine.
so does mine.	i think it's an old people's smell.
i think it's an old people's smell.	really?
really?	yes. i think when you get old, you begin to smell.
yes. i think when you get old, you begin to smell.	like fruit that is too ripe?
like fruit that is too ripe?	yes, just like fruit that is too ripe.
yes, just like fruit that is too ripe.	but the smell is different.
but the smell is different.	yes, old people don't smell like fruit.
yes, old people don't smell like fruit.	no, they smell like a thrift shop.
no, they smell like a thrift shop.	yes, a thrift shop has that same smell.
yes, a thrift shop has that same smell.	yes, an old smell.
the price of stamps goes up and up.	i think stamps used to cost a penny.
i think stamps used to cost a penny.	that was a long time ago.
that was a long time ago.	it was before i was born.
it was before i was born.	now a stamp is 42 cents.
now a stamp is 42 cents.	but in may it will be 44 cents.
but in may it will be 44 cents.	have you ever lost a letter in the mail?
have you ever lost a letter in the mail?	no, i haven't.
no, i haven't.	neither have i.
neither have i.	so, they do a good job for the money.
so, they do a good job for the money.	yes, they do.
yes, they do.	maybe we shouldn't complain.
a button came off my shirt.	what are you going to do?
what are you going to do?	first, i have to find the button.
first, i have to find the button.	where did you lose it?
where did you lose it?	i have no idea.
i have no idea.	a button is hard to find. did you look in your pant cuffs?
a button is hard to find. did you look in your pant cuffs?	that's a good idea.
that's a good idea.	i found a button in my pant cuffs one time.
i found a button in my pant cuffs one time.	let me look. no, it's not there.
let me look. no, it's not there.	many shirts come with an extra button.
many shirts come with an extra button.	you're right. this one does have an extra button.
you're right. this one does have an extra button.	now all you have to do is sew it on.
i have to go to the bathroom.	you drink too much coffee.
you drink too much coffee.	but i love coffee.
but i love coffee.	well, it's your life.
well, it's your life.	you eat too much chocolate.
you eat too much chocolate.	i don't think so.
i don't think so.	have you looked in the mirror?
have you looked in the mirror?	do you think i'm getting fat?
do you think i'm getting fat?	i didn't say that.
i didn't say that.	what did you say?
what did you say?	i said i have to go to the bathroom.
i said i have to go to the bathroom.	that's what i thought you said.
did you do the laundry?	yes, i did.
yes, i did.	what did you wash?
what did you wash?	i washed the sheets and towels.
i washed the sheets and towels.	what about the pillowcases?
what about the pillowcases?	yes, i took them off the pillows and washed them.
yes, i took them off the pillows and washed them.	did you dry everything in the dryer?
did you dry everything in the dryer?	yes, i dried everything in the dryer.
yes, i dried everything in the dryer.	then what did you do?
then what did you do?	i folded all the towels.
i folded all the towels.	did you put the sheets on the beds?
did you put the sheets on the beds?	yes, and i put the pillowcases on the pillows.
do you listen to the radio?	i listen day and night.
i listen day and night.	what do you listen to?
what do you listen to?	mostly talk radio.
mostly talk radio.	what's that?
what's that?	people talk about current events.
people talk about current events.	what do they say?
what do they say?	they say they want change.
they say they want change.	what kind of change?
what kind of change?	they want tax cuts.
they want tax cuts.	why do they want tax cuts?
why do they want tax cuts?	because tax cuts will save them money.
mom, i'm hungry.	look in the fridge.
look in the fridge.	i'm looking. there's nothing to eat.
i'm looking. there's nothing to eat.	are you sure?
are you sure?	it's almost empty.
it's almost empty.	i went to the market yesterday.
i went to the market yesterday.	i don't see anything.
i don't see anything.	i bought lots of oranges and apples.
i bought lots of oranges and apples.	i don't want fruit. i want something tasty.
i don't want fruit. i want something tasty.	eat the fruit. it's good for you.
eat the fruit. it's good for you.	next time you go to the market, let me go with you.
next time you go to the market, let me go with you.	no, thank you. all you want to eat are hot dogs and candy bars.
what is there to eat?	i don't know. look in the fridge.
i don't know. look in the fridge.	i think i'll make a sandwich.
i think i'll make a sandwich.	what kind?
what kind?	a ham sandwich.
a ham sandwich.	the bread is in the cabinet.
the bread is in the cabinet.	where's the mustard?
where's the mustard?	it's in the fridge, i think.
it's in the fridge, i think.	oh, yes, here it is. do you want a sandwich?
oh, yes, here it is. do you want a sandwich?	yes, that sounds nice.
yes, that sounds nice.	how about some potato chips?
how about some potato chips?	yes. and a pickle, if we have any.
it's time for your bath, young lady.	but, mom, i'm not dirty.
but, mom, i'm not dirty.	you need a bath every day.
you need a bath every day.	why?
why?	because you don't want to smell bad.
because you don't want to smell bad.	i don't smell bad.
i don't smell bad.	that's what you think.
that's what you think.	if i smelled bad, i could smell me.
if i smelled bad, i could smell me.	i can smell you.
i can smell you.	i can smell you, too.
i can smell you, too.	that's my perfume.
that's my perfume.	when can i wear perfume?
something's wrong with my computer.	exactly what?
exactly what?	all i get is a black screen.
all i get is a black screen.	what's the matter?
what's the matter?	i think i know, because this happened before.
i think i know, because this happened before.	what happened before?
what happened before?	my hard drive crashed.
my hard drive crashed.	oh, no. that's bad news.
oh, no. that's bad news.	it sure is, but i'm going to call hp first, just to make sure.
it sure is, but i'm going to call hp first, just to make sure.	will you lose all your files?
will you lose all your files?	no, i always back up my files.
no, i always back up my files.	you're smart.
i called hp about my computer.	what did they say?
what did they say?	they said i need a new hard drive.
they said i need a new hard drive.	that's too bad. how much is a new one?
that's too bad. how much is a new one?	it's not too much, only about $85.
it's not too much, only about $85.	plus installation?
plus installation?	no, my hard drive is easy to remove and replace.
no, my hard drive is easy to remove and replace.	really?
really?	yes, it's just a couple of screws.
yes, it's just a couple of screws.	that's nice.
that's nice.	it's a lot better than paying someone $60.
it's a lot better than paying someone $60.	if my hard drive crashes, i'll just call you.
what's your email address?	it's bluedog123.
it's bluedog123.	bluedog123. are you sure that's all?
bluedog123. are you sure that's all?	yes.
yes.	no. that's incomplete.
no. that's incomplete.	what do you mean?
what do you mean?	what's your mailing address?
what's your mailing address?	456 cherry drive, pasadena, ca 91170.
456 cherry drive, pasadena, ca 91170.	that's correct.
that's correct.	so what's the problem?
so what's the problem?	bluedog123 is just the street. you have to give me the city, state, and zip code.
bluedog123 is just the street. you have to give me the city, state, and zip code.	oh, i get it. my email address is bluedog123@yahoo.com.
i'm going to take a nap.	you should unplug the phone.
you should unplug the phone.	that's a good idea.
that's a good idea.	do you want me to wake you in an hour?
do you want me to wake you in an hour?	no, thanks. just let me sleep until i wake up.
no, thanks. just let me sleep until i wake up.	i'll start dinner at 6:00.
i'll start dinner at 6:00.	okay. i think i'll be awake by then.
okay. i think i'll be awake by then.	if not, your nose will wake you up.
if not, your nose will wake you up.	you mean i will smell the food cooking?
you mean i will smell the food cooking?	you might even dream about dinner.
you might even dream about dinner.	i don't think i'm going to dream about anything. i'm really tired.
i don't think i'm going to dream about anything. i'm really tired.	have a nice nap.
that was a nice funeral.	yes, dad, it was.
yes, dad, it was.	the son gave a nice speech about his father.
the son gave a nice speech about his father.	it was long, too.
it was long, too.	i think it was about 45 minutes long.
i think it was about 45 minutes long.	but it went by fast. it was interesting.
but it went by fast. it was interesting.	i liked it.
i liked it.	i'll give you a speech like that, too.
i'll give you a speech like that, too.	do you think anyone will come to my funeral?
do you think anyone will come to my funeral?	of course.
of course.	i think only the family will be there.
i think only the family will be there.	you have lots of friends. they will be there, too!
yikes! what was that noise?	i had to blow my nose.
i had to blow my nose.	did you have to blow right next to the phone?
did you have to blow right next to the phone?	did you hear that?
did you hear that?	of course i heard that. i thought a plane had crashed into your house.
of course i heard that. i thought a plane had crashed into your house.	it wasn't that loud.
it wasn't that loud.	i will blow my nose sometime for you, and you'll see.
i will blow my nose sometime for you, and you'll see.	okay. i'll take your word for it.
okay. i'll take your word for it.	i thought you had an elephant in your house.
i thought you had an elephant in your house.	you're funny.
you're funny.	what did you say? i think i've gone deaf.
what did you say? i think i've gone deaf.	i'm going into the bathroom to blow my nose. i'll be right back.
i have lots of friends.	really? how many do you have?
really? how many do you have?	i don't know, maybe one hundred.
i don't know, maybe one hundred.	that is a lot of friends. do you have a best friend?
that is a lot of friends. do you have a best friend?	of course. i have lots of best friends.
of course. i have lots of best friends.	how many best friends do you have?
how many best friends do you have?	i think about twenty-five.
i think about twenty-five.	hmm. i have only one best friend.
hmm. i have only one best friend.	i feel sorry for you.
i feel sorry for you.	i have only a few friends.
i have only a few friends.	you must be lonely. i will share my friends with you.
you must be lonely. i will share my friends with you.	that's very nice of you.
don't you ever cheat on me.	why would i do that?
why would i do that?	because men like to cheat.
because men like to cheat.	some men do, but not me.
some men do, but not me.	i'm watching you.
i'm watching you.	i'm an open book. watch me all you want.
i'm an open book. watch me all you want.	if i catch you, you'll be sorry.
if i catch you, you'll be sorry.	you won't catch me, because i love you. i'm not a cheater.
you won't catch me, because i love you. i'm not a cheater.	i will poke your eyes out. 
i will poke your eyes out. 	i don't want any other woman.
i don't want any other woman.	i will chop your toes off, one by one.
i will chop your toes off, one by one.	honey, please. you're the only woman for me, forever. i swear it.
i hate to go outside.	me too.
me too.	why do you hate to go outside?
why do you hate to go outside?	i meet too many jerks.
i meet too many jerks.	i agree.
i agree.	this city is full of jerks.
this city is full of jerks.	rude people are everywhere.
rude people are everywhere.	but what can you do?
but what can you do?	you can yell at them.
you can yell at them.	and they will yell back at you.
and they will yell back at you.	yelling doesn't do any good.
yelling doesn't do any good.	no. the best thing to do is just stay home.
will you look at this form?	are you having problems with it?
are you having problems with it?	i don't understand some things.
i don't understand some things.	let me help you.
let me help you.	what does "mi" mean?
what does "mi" mean?	"mi" stands for middle initial.
"mi" stands for middle initial.	what does "mm/dd/yy" mean?
what does "mm/dd/yy" mean?	that means month/day/year. use numbers.
that means month/day/year. use numbers.	i don't understand.
i don't understand.	for example, if your birth date is january 12, 1987, write 01/12/87.
for example, if your birth date is january 12, 1987, write 01/12/87.	oh. that's simple enough.
oh. that's simple enough.	always print clearly, and fill in the bubbles completely.
let's go to the animal shelter.	what do you want to do?
what do you want to do?	i want to get a puppy for my son.
i want to get a puppy for my son.	that will make him so happy.
that will make him so happy.	i'll get him one of those little dogs.
i'll get him one of those little dogs.	one that won't grow up too big.
one that won't grow up too big.	and eat too much.
and eat too much.	do you know which one he would like?
do you know which one he would like?	oh, yes, i took him there yesterday. he showed me one that he really liked.
oh, yes, i took him there yesterday. he showed me one that he really liked.	i bet you had to drag him away.
i bet you had to drag him away.	he wanted to take it home yesterday.
he wanted to take it home yesterday.	i wonder what he'll name it.
what's the weather like?	i don't know. i just woke up.
i don't know. i just woke up.	why don't you look outside?
why don't you look outside?	okay. it looks like rain.
okay. it looks like rain.	why do you say that?
why do you say that?	the sky is gray.
the sky is gray.	is it raining right now?
is it raining right now?	no.
no.	how do you know?
how do you know?	the street isn't wet.
the street isn't wet.	i have to go shopping today.
i have to go shopping today.	you'd better take an umbrella.
i can't believe how hot it is.	it's not even noon yet.
it's not even noon yet.	that means it will get hotter.
that means it will get hotter.	i am dying from the heat.
i am dying from the heat.	turn on the air conditioner.
turn on the air conditioner.	it doesn't work.
it doesn't work.	what happened?
what happened?	i don't know.
i don't know.	did you call the repairman?
did you call the repairman?	of course.
of course.	when is he coming?
when is he coming?	he's busy. he said next week.
i'll be glad when winter comes.	why is that?
why is that?	because i love the snow.
because i love the snow.	yes, the snow is fun.
yes, the snow is fun.	last year we made a big snowman.
last year we made a big snowman.	how big was it?
how big was it?	it was seven feet tall.
it was seven feet tall.	how long did it take?
how long did it take?	it took us all day.
it took us all day.	did you give him a nose?
did you give him a nose?	of course. we gave him a big carrot for a nose.
of course. we gave him a big carrot for a nose.	let me help you make one this year.
i'm going to the bank.	what do you need to do?
what do you need to do?	i need to withdraw some money.
i need to withdraw some money.	how are you going to do that?
how are you going to do that?	i'll just use the atm.
i'll just use the atm.	what's that?
what's that?	it's the automatic teller machine.
it's the automatic teller machine.	it gives you money?
it gives you money?	i just insert my debit card into the machine.
i just insert my debit card into the machine.	and it gives you money?
and it gives you money?	well, it gives me money, but it's my own money.
well, it gives me money, but it's my own money.	oh. what good is that? i thought it gave you free money.
did you put the blue bin out on the street?	oh, no. i forgot.
oh, no. i forgot.	well, you'd better take it out front.
well, you'd better take it out front.	what time does the recycle truck come by?
what time does the recycle truck come by?	it usually gets here at noon on tuesday, which is tomorrow.
it usually gets here at noon on tuesday, which is tomorrow.	i'll just take it out to the street tomorrow morning.
i'll just take it out to the street tomorrow morning.	oh, no, you don't.
oh, no, you don't.	what do you mean?
what do you mean?	every morning you get up late and rush off to work late.
every morning you get up late and rush off to work late.	do you think i'll forget to do it?
do you think i'll forget to do it?	you'll remember to do it, but you won't have time to do it.
you'll remember to do it, but you won't have time to do it.	okay, i'll take it out front right now.
are you ready?	ready for what?
ready for what?	ready for the big switch.
ready for the big switch.	what are you talking about?
what are you talking about?	the nation is switching to digital tv.
the nation is switching to digital tv.	oh. of course i'm ready.
oh. of course i'm ready.	did you buy the converter?
did you buy the converter?	no, i don't need a converter because i bought a digital tv.
no, i don't need a converter because i bought a digital tv.	how much was that?
how much was that?	it was only about $120 for a 13-inch screen.
it was only about $120 for a 13-inch screen.	does it pick up any digital channels?
does it pick up any digital channels?	oh, yes. i get six korean channels but nothing in english!
people are funny.	they sure are.
they sure are.	did you hear about the pilot?
did you hear about the pilot?	the one that stole a small plane?
the one that stole a small plane?	yes, he stole a plane in canada and flew into the u.s.
yes, he stole a plane in canada and flew into the u.s.	did they catch him?
did they catch him?	yes. after two u.s. fighter jets followed him for an hour, he landed on a highway.
yes. after two u.s. fighter jets followed him for an hour, he landed on a highway.	did he crash?
did he crash?	no, he just landed the plane and walked to a restaurant.
no, he just landed the plane and walked to a restaurant.	did the cops find out why he flew into the u.s.?
did the cops find out why he flew into the u.s.?	his life sucked. he was hoping a fighter jet would shoot him down.
his life sucked. he was hoping a fighter jet would shoot him down.	poor guy.
the police need our help finding a robber.	how do you know?
how do you know?	the tv news is reporting a bank robbery.
the tv news is reporting a bank robbery.	do they know what the robber looks like?
do they know what the robber looks like?	yes, he's 6 feet tall, 200 pounds, black hair, and about 30 years old.
yes, he's 6 feet tall, 200 pounds, black hair, and about 30 years old.	what race is he?
what race is he?	they didn't say.
they didn't say.	the tv news doesn't tell us the race anymore.
the tv news doesn't tell us the race anymore.	of course not. that would be racist.
of course not. that would be racist.	but how can we identify someone if we don't know their race?
but how can we identify someone if we don't know their race?	don't ask me.
don't ask me.	then they also shouldn't tell us if the robber is male or female, because that is sexist.
don't wipe your nose on your sleeve.	but i don't have a tissue.
but i don't have a tissue.	then go find a tissue in the bathroom.
then go find a tissue in the bathroom.	i didn't have time to get one from there.
i didn't have time to get one from there.	your sleeves are not tissues.
your sleeves are not tissues.	but mom, all my friends use their sleeves.
but mom, all my friends use their sleeves.	that doesn't make it right.
that doesn't make it right.	i saw dad wipe his nose on his sleeve yesterday.
i saw dad wipe his nose on his sleeve yesterday.	i will talk to your father about that.
i will talk to your father about that.	i bet dad did it all the time when he was my age.
i bet dad did it all the time when he was my age.	your daddy was a good little boy.
your daddy was a good little boy.	how do you know? were you his mommy, too?
i'm worried.	worried about what?
worried about what?	i'm getting married.
i'm getting married.	you should be happy, not worried.
you should be happy, not worried.	i am happy, but marriage is a lot of responsibility.
i am happy, but marriage is a lot of responsibility.	yes, you have to take care of your wife.
yes, you have to take care of your wife.	and i have to take care of our children.
and i have to take care of our children.	are you going to start a family?
are you going to start a family?	yes. we want to have a little boy and a little girl.
yes. we want to have a little boy and a little girl.	that sounds wonderful.
that sounds wonderful.	except we can't afford it!
except we can't afford it!	no wonder you're worried.
i don't get art.	or artists.
or artists.	they're in a different world.
they're in a different world.	i saw a painting of a jar that was full of pencils.
i saw a painting of a jar that was full of pencils.	the artist said the jar was both full and empty.
the artist said the jar was both full and empty.	but it was full of pencils! how could he say it was empty?
but it was full of pencils! how could he say it was empty?	artists see things differently.
artists see things differently.	did you ever see anything that picasso painted?
did you ever see anything that picasso painted?	of course! he's world famous.
of course! he's world famous.	did he ever take art lessons?
did he ever take art lessons?	i can't believe it. i drew paintings like that in third grade.
i can't believe it. i drew paintings like that in third grade.	where are they? maybe they are worth millions.
what's the point?	the point of what?
the point of what?	of living.
of living.	who knows? you live, and then you die.
who knows? you live, and then you die.	we must be here for some reason.
we must be here for some reason.	maybe we're here to have fun.
maybe we're here to have fun.	then why aren't i having fun?
then why aren't i having fun?	because you're thinking too much.
because you're thinking too much.	so i should stop thinking?
so i should stop thinking?	stop thinking about what the point is.
stop thinking about what the point is.	okay. i'll start thinking about having some fun.
okay. i'll start thinking about having some fun.	just be patient. fun doesn't come along every five minutes.
beer is a powerful drug.	so are cigarettes.
so are cigarettes.	which would you prefer?
which would you prefer?	what do you mean?
what do you mean?	when you die and go to heaven, they will offer you beer or cigarettes.
when you die and go to heaven, they will offer you beer or cigarettes.	i could pick only one or the other?
i could pick only one or the other?	yes. nothing's perfect, not even in heaven.
yes. nothing's perfect, not even in heaven.	boy, that's a tough one.
boy, that's a tough one.	what's so tough about it? of course, i would pick cigarettes.
what's so tough about it? of course, i would pick cigarettes.	but cigarettes taste much better when you have a cold beer.
but cigarettes taste much better when you have a cold beer.	well, you can't have everything.
well, you can't have everything.	i don't think i want to go to your heaven.
my pants have a hole in the front pocket.	you shouldn't carry pens in your pocket.
you shouldn't carry pens in your pocket.	yesterday a pen fell through my pants onto my shoe.
yesterday a pen fell through my pants onto my shoe.	lucky for you it wasn't a sharp knife.
lucky for you it wasn't a sharp knife.	who carries a sharp knife in their pocket?
who carries a sharp knife in their pocket?	criminals, of course.
criminals, of course.	anyway, i have to fix the hole.
anyway, i have to fix the hole.	you can sew it up or use an iron-on patch.
you can sew it up or use an iron-on patch.	tell me about this patch.
tell me about this patch.	the patch has glue. the hot iron melts the glue so the patch sticks on.
the patch has glue. the hot iron melts the glue so the patch sticks on.	that sounds a lot easier than sewing.
that sounds a lot easier than sewing.	it is. but after about ten washings, the glue washes off.
do you know any good jokes?	i can't remember jokes.
i can't remember jokes.	neither can i.
neither can i.	they go in one ear and out the other.
they go in one ear and out the other.	who makes up all these jokes?
who makes up all these jokes?	who knows? but there must be a hundred new ones every day.
who knows? but there must be a hundred new ones every day.	yes, just in english alone.
yes, just in english alone.	i wonder if every language has jokes.
i wonder if every language has jokes.	of course! people everywhere like good jokes.
of course! people everywhere like good jokes.	what do you think people joke about the most?
what do you think people joke about the most?	i think most jokes are about women.
i think most jokes are about women.	oh, really? i think most jokes are about men!
you're very lucky.	why do you say that?
why do you say that?	you speak two languages.
you speak two languages.	well, my english isn't perfect.
well, my english isn't perfect.	no one speaks perfect english.
no one speaks perfect english.	maybe i will be the first!
maybe i will be the first!	i've been thinking about learning spanish.
i've been thinking about learning spanish.	spanish is easy. i'll be happy to teach you.
spanish is easy. i'll be happy to teach you.	how long will it take me to learn?
how long will it take me to learn?	i think it will only take you a year or two.
i think it will only take you a year or two.	how soon can we begin?
how soon can we begin?	ahora! that means right now.
do you know what today is?	yes, it's april 22.
yes, it's april 22.	it's more than just a date.
it's more than just a date.	is it your birthday or anniversary?
is it your birthday or anniversary?	no, it's earth day.
no, it's earth day.	what's that?
what's that?	it's a yearly reminder to take care of our planet.
it's a yearly reminder to take care of our planet.	oh, you mean like reuse things and recycle stuff?
oh, you mean like reuse things and recycle stuff?	yes. we need to think green, save water, and stop using plastic bags.
yes. we need to think green, save water, and stop using plastic bags.	how about if i take shorter showers?
how about if i take shorter showers?	that's a good idea, because showers waste a lot of water.
that's a good idea, because showers waste a lot of water.	from now on i'll spend only 20 minutes in the shower.
poetry sucks.	i don't know anyone who likes it.
i don't know anyone who likes it.	some of it is okay, i guess.
some of it is okay, i guess.	yes, the poems that rhyme and are easy to remember.
yes, the poems that rhyme and are easy to remember.	like "one, two, buckle my shoe."
like "one, two, buckle my shoe."	but people still write poems.
but people still write poems.	no one makes any money at it.
no one makes any money at it.	shakespeare was a poet.
shakespeare was a poet.	did he get rich from his poetry?
did he get rich from his poetry?	probably not.
probably not.	poems are a little bit like songs.
poems are a little bit like songs.	yes, but songs have music. without music, songs would suck, too.
how smart are you?	i don't know. i think i'm average.
i don't know. i think i'm average.	did you ever take an iq test?
did you ever take an iq test?	no, i never did. all i know is that i got a's and b's in school.
no, i never did. all i know is that i got a's and b's in school.	i wish i was really smart.
i wish i was really smart.	don't be ridiculous.
don't be ridiculous.	what do you mean?
what do you mean?	if you're going to make a wish, wish that you were really rich or famous.
if you're going to make a wish, wish that you were really rich or famous.	don't you ever wonder what it's like to be super-smart?
don't you ever wonder what it's like to be super-smart?	it must be very lonely.
it must be very lonely.	why's that?
why's that?	because if you're super-smart, no one understands what you're saying.
i missed the tv news last night. what was on?	nothing that would pass as news.
nothing that would pass as news.	what's the weather going to be like this weekend?
what's the weather going to be like this weekend?	i don't know. whenever the weather comes on, i switch channels.
i don't know. whenever the weather comes on, i switch channels.	what was the lead story on the news?
what was the lead story on the news?	some actress was in court for driving without a license.
some actress was in court for driving without a license.	what was the second story?
what was the second story?	some actor married a woman young enough to be his daughter.
some actor married a woman young enough to be his daughter.	what was the third story?
what was the third story?	a bull chased a man in a supermarket.
a bull chased a man in a supermarket.	wasn't there anything about octo-mom?
wasn't there anything about octo-mom?	of course. she's going to hire a nanny for her eight infants.
what are you going to do about your death?	well, mostly i'll try to avoid it.
well, mostly i'll try to avoid it.	i mean, are you going to get buried or cremated?
i mean, are you going to get buried or cremated?	my wife and i will be cremated.
my wife and i will be cremated.	are you going to be buried next to each other?
are you going to be buried next to each other?	oh, no. our ashes will be shaken into the ocean.
oh, no. our ashes will be shaken into the ocean.	you're not going to be buried?
you're not going to be buried?	a coffin costs too much and takes up too much space.
a coffin costs too much and takes up too much space.	yes, but it will be in a cemetery where your children can visit you.
yes, but it will be in a cemetery where your children can visit you.	children seldom visit their parents in a cemetery.
children seldom visit their parents in a cemetery.	that's true. a cemetery is for dead people, not living people.
that's true. a cemetery is for dead people, not living people.	we figure our kids can visit us whenever they go to the beach.
did you wipe your feet? 	yes, of course i wiped my feet.
yes, of course i wiped my feet.	then why is there mud on the carpet?
then why is there mud on the carpet?	i don't know. it's not my mud.
i don't know. it's not my mud.	well, someone brought it into the house.
well, someone brought it into the house.	look at the bottom of my shoesÂ—they're clean.
look at the bottom of my shoesÂ—they're clean.	of course they're clean. you left all the mud on the carpet.
of course they're clean. you left all the mud on the carpet.	okay, i'll get the vacuum cleaner.
okay, i'll get the vacuum cleaner.	don't vacuum it now.
don't vacuum it now.	don't you want me to clean up the mud?
don't you want me to clean up the mud?	wait till it dries. it will be easier to vacuum.
wait till it dries. it will be easier to vacuum.	next time i will be more careful.
what are you getting for your mom?	what are you talking about?
what are you talking about?	sunday is mother's day.
sunday is mother's day.	this sunday?
this sunday?	of course. it's all over the news.
of course. it's all over the news.	i thought it was next sunday.
i thought it was next sunday.	well, you'd better get her something.
well, you'd better get her something.	i'll get her a nice card.
i'll get her a nice card.	is that it?
is that it?	yes. that's all i ever give her.
yes. that's all i ever give her.	she raised you, and all you ever give her is a card?
she raised you, and all you ever give her is a card?	it's okay. she knows that i love her.
i don't like our flag.	what's the matter with it?
what's the matter with it?	it's too much like other flags.
it's too much like other flags.	yes, a lot of flags have stripes.
yes, a lot of flags have stripes.	a flag should be pretty.
a flag should be pretty.	what should our flag look like?
what should our flag look like?	it should have a pretty woman on it.
it should have a pretty woman on it.	that's ridiculous!
that's ridiculous!	you don't like pretty women?
you don't like pretty women?	of course i do. but not on our flag!
of course i do. but not on our flag!	every nation should have a pretty woman on their flag.
every nation should have a pretty woman on their flag.	you can't go to war carrying a flag with a woman on it!
i had a busy morning.	what did you do?
what did you do?	i watered all the plants.
i watered all the plants.	you have a lot of plants.
you have a lot of plants.	then i did my laundry.
then i did my laundry.	that takes some time.
that takes some time.	i took the dog for a walk.
i took the dog for a walk.	i'll bet he enjoyed his walk.
i'll bet he enjoyed his walk.	i vacuumed the entire house.
i vacuumed the entire house.	that's a lot of work.
that's a lot of work.	and then i made lunch.
and then i made lunch.	i'll bet you were hungry!
i don't have long distance service with my home phone.	so how do you make long distance calls?
so how do you make long distance calls?	i use a calling card.
i use a calling card.	where do you get that?
where do you get that?	i buy it at the dollar store.
i buy it at the dollar store.	how much is it?
how much is it?	it's one dollar for 100 minutes.
it's one dollar for 100 minutes.	that's only a penny a minute!
that's only a penny a minute!	it's a great price. but you have to dial a lot of numbers.
it's a great price. but you have to dial a lot of numbers.	how many?
how many?	first you dial seven numbers, then ten numbers, then ten more numbers.
first you dial seven numbers, then ten numbers, then ten more numbers.	yikes. i think i'll keep my long distance service.
do you go to college?	yes, i do.
yes, i do.	what college do you go to?
what college do you go to?	i go to pasadena city college.
i go to pasadena city college.	do you like it?
do you like it?	oh, yes, i really like it.
oh, yes, i really like it.	why do you like it?
why do you like it?	because it has great teachers.
because it has great teachers.	what else?
what else?	i like all my classmates, too.
i like all my classmates, too.	anything else?
anything else?	yes. it's not expensive!
i lost my new pen.	where did you lose it?
where did you lose it?	i don't know.
i don't know.	when did you lose it?
when did you lose it?	i think i lost it today. i used it yesterday.
i think i lost it today. i used it yesterday.	did you check all your pockets?
did you check all your pockets?	i checked all my pockets.
i checked all my pockets.	did you look in your desk?
did you look in your desk?	yes. it isn't there, either.
yes. it isn't there, either.	it's probably around somewhere.
it's probably around somewhere.	oh, well, it only cost me a dollar.
oh, well, it only cost me a dollar.	only a dollar? don't even look for it.
gravity is very important.	what is gravity?
what is gravity?	it's the force that pulls everything down.
it's the force that pulls everything down.	i don't understand.
i don't understand.	if you pour water into a glass, the water goes down into the glass.
if you pour water into a glass, the water goes down into the glass.	of course it does.
of course it does.	without gravity, the water would go up.
without gravity, the water would go up.	you're joking.
you're joking.	without gravity, you would go up.
without gravity, you would go up.	what do you mean?
what do you mean?	you would float into the sky like a balloon.
you would float into the sky like a balloon.	that would be fun!
i can't read my book.	turn on the light.
turn on the light.	the light is on.
the light is on.	open the book.
open the book.	the book is open.
the book is open.	see an eye doctor.
see an eye doctor.	that's what i need to do.
that's what i need to do.	he'll give you a prescription for glasses.
he'll give you a prescription for glasses.	i'll make an appointment tomorrow.
i'll make an appointment tomorrow.	i'll get the yellow pages for an eye doctor.
i'll get the yellow pages for an eye doctor.	read the phone number to me.
read the phone number to me.	i'll read it very loud, in case your hearing is getting bad, too.
what do you need for school?	i need pencils.
i need pencils.	anything else?
anything else?	i need a notebook.
i need a notebook.	do you need a pen?
do you need a pen?	no. i already have a pen.
no. i already have a pen.	do you need a calculator?
do you need a calculator?	no. the teacher doesn't permit calculators.
no. the teacher doesn't permit calculators.	how about a dictionary?
how about a dictionary?	no, we have a big dictionary in the classroom.
no, we have a big dictionary in the classroom.	well, i guess that's it.
well, i guess that's it.	yes, that's all i need for now.
i like this magazine.	so do i.
so do i.	i read it once, and i subscribed.
i read it once, and i subscribed.	it gives you all the news.
it gives you all the news.	all the news in only 50 pages.
all the news in only 50 pages.	i like the political cartoons.
i like the political cartoons.	i like the beautiful photos of the houses for sale.
i like the beautiful photos of the houses for sale.	i always read the film reviews.
i always read the film reviews.	i never miss the food and drink section.
i never miss the food and drink section.	i gave a subscription to my parents.
i gave a subscription to my parents.	me too. they canceled their other news magazines.
me too. they canceled their other news magazines.	so did mine!
my pen is out of ink.	shake it a couple of times.
shake it a couple of times.	i shook it. there is no more ink.
i shook it. there is no more ink.	you can borrow mine.
you can borrow mine.	thank you. i'll buy a new one tomorrow.
thank you. i'll buy a new one tomorrow.	what were you doing?
what were you doing?	i was writing a letter.
i was writing a letter.	who were you writing to?
who were you writing to?	it's to my mom.
it's to my mom.	tell her i said hello.
tell her i said hello.	okay. i'll return your pen when i'm done.
okay. i'll return your pen when i'm done.	take your time.
have you done your homework?	not yet.
not yet.	then why are you watching tv?
then why are you watching tv?	this is my favorite show.
this is my favorite show.	go do your homework.
go do your homework.	but, mom!
but, mom!	you can watch tv after you do your homework.
you can watch tv after you do your homework.	but the show will be over.
but the show will be over.	there will be another show next week.
there will be another show next week.	please?
please?	you know the rules.
you know the rules.	i hate the rules! i can't wait till i grow up.
i can't wait until i graduate.	me too.
me too.	no more homework.
no more homework.	i hate homework.
i hate homework.	are you going to college?
are you going to college?	i can't afford it.
i can't afford it.	me neither.
me neither.	so what are you going to do?
so what are you going to do?	i'm joining the army.
i'm joining the army.	you're kidding. you might get killed.
you're kidding. you might get killed.	i don't think so. after i finish, i'll have enough money to go to college.
i don't think so. after i finish, i'll have enough money to go to college.	that's not a bad idea.
what is your major?	english.
english.	what are you going to do with an english major?
what are you going to do with an english major?	i'm going to be a teacher.
i'm going to be a teacher.	high school or middle school?
high school or middle school?	high school.
high school.	i teach high school english.
i teach high school english.	i didn't know that.
i didn't know that.	i started teaching five years ago.
i started teaching five years ago.	how do you like it?
how do you like it?	do you see all this gray hair? it was totally black five years ago.
do you see all this gray hair? it was totally black five years ago.	maybe i'll teach middle school.
parking at school is impossible.	i'll say.
i'll say.	i drove around for half an hour.
i drove around for half an hour.	did you find a spot?
did you find a spot?	i found a spot, but someone cut in and took it from me.
i found a spot, but someone cut in and took it from me.	did you yell at them?
did you yell at them?	yes, i did.
yes, i did.	and?
and?	and he yelled back at me.
and he yelled back at me.	how rude.
how rude.	but i got lucky a few minutes later.
but i got lucky a few minutes later.	you have to be lucky to find a parking space.
this is a huge library.	yes, it has lots of rooms and lots of space.
yes, it has lots of rooms and lots of space.	and lots of books.
and lots of books.	and lots of thieves.
and lots of thieves.	what do you mean?
what do you mean?	i mean, keep your belongings close to you.
i mean, keep your belongings close to you.	the only thing in my backpack is used books.
the only thing in my backpack is used books.	but thieves don't know that.
but thieves don't know that.	they might think that i've got an ipod or laptop in there.
they might think that i've got an ipod or laptop in there.	now you're thinking.
now you're thinking.	you'd think a library would be safe from thieves.
you'd think a library would be safe from thieves.	not even a church is safe from thieves.
how good is your math?	i can add two and two.
i can add two and two.	so you're not very good at math?
so you're not very good at math?	i'm terrible at math.
i'm terrible at math.	well, i need some help.
well, i need some help.	with what?
with what?	i'm taking a math course in school.
i'm taking a math course in school.	well, you should ask your teacher or your classmates for help.
well, you should ask your teacher or your classmates for help.	i can't do that.
i can't do that.	why not?
why not?	they might think i'm stupid.
they might think i'm stupid.	they're not going to think that! they'll be glad to help you.
do you believe in god?	of course.
of course.	do you pray to god?
do you pray to god?	occasionally.
occasionally.	when's that?
when's that?	when i need something.
when i need something.	like what?
like what?	well, if i have a big test at school.
well, if i have a big test at school.	does god answer your prayers?
does god answer your prayers?	yes, i've passed all my tests.
yes, i've passed all my tests.	do you ever pray for money?
do you ever pray for money?	not yet. i won't need to do that until i graduate from high school.
the cops finally found the husband.	what husband?
what husband?	the husband of the driver who ran over two college students at 3 a.m.
the husband of the driver who ran over two college students at 3 a.m.	oh, yeah. the girl died instantly, and the boy is still in the hospital.
oh, yeah. the girl died instantly, and the boy is still in the hospital.	the husband said he tried to help the boy.
the husband said he tried to help the boy.	yes, he pushed him off the hood of the car.
yes, he pushed him off the hood of the car.	no, he said he gently placed the boy on the street.
no, he said he gently placed the boy on the street.	so what? they still drove off.
so what? they still drove off.	the husband said a fire department was nearby.
the husband said a fire department was nearby.	so what? did he dial 911?
so what? did he dial 911?	he said he was thinking about it, but he didn't get around to it.
he said he was thinking about it, but he didn't get around to it.	he didn't get around to turning himself in, either.
i don't like riding the bus.	why not?
why not?	the seats and windows are dirty.
the seats and windows are dirty.	don't they clean the bus every night?
don't they clean the bus every night?	i think they do.
i think they do.	you should bring some wipes with you.
you should bring some wipes with you.	that's a good idea.
that's a good idea.	then you can wipe your seat and window.
then you can wipe your seat and window.	people will think i'm strange.
people will think i'm strange.	who cares? everyone is strange.
who cares? everyone is strange.	that's for sure.
that's for sure.	don't worry about what people think.
i don't like riding the bus.	why not?
why not?	number one, it's too slow.
number one, it's too slow.	you're right. a car is faster.
you're right. a car is faster.	number two, it's usually late.
number two, it's usually late.	you're right. the buses are never on time.
you're right. the buses are never on time.	number three, it doesn't run 24 hours.
number three, it doesn't run 24 hours.	you're right. buses don't run late at night.
you're right. buses don't run late at night.	number four, it's too crowded.
number four, it's too crowded.	you're right. you have to stand in the aisle.
you're right. you have to stand in the aisle.	number five, it's unsafe.
number five, it's unsafe.	you're right. bad guys might rob you.
we had a problem at school.	what was the problem?
what was the problem?	someone cut the tires.
someone cut the tires.	what tires?
what tires?	the tires on the cars.
the tires on the cars.	where were the cars?
where were the cars?	they were in the student parking lot.
they were in the student parking lot.	how many tires were cut?
how many tires were cut?	one or two tires were cut on each car.
one or two tires were cut on each car.	how many cars?
how many cars?	eleven cars.
eleven cars.	that's terrible. i hope they catch the person.
life isn't fair.	it sure isn't.
it sure isn't.	i got a ticket yesterday.
i got a ticket yesterday.	what for?
what for?	i was crossing the street.
i was crossing the street.	were you in a crosswalk?
were you in a crosswalk?	yes, but the red hand was blinking.
yes, but the red hand was blinking.	so? that's a ticket?
so? that's a ticket?	yes, it's a $140 ticket.
yes, it's a $140 ticket.	that's not right!
that's not right!	when i started to cross the street, the white walk sign was blinking.
when i started to cross the street, the white walk sign was blinking.	you need to walk faster.
you're driving too fast.	why do you say that?
why do you say that?	the speed limit is 65.
the speed limit is 65.	i know that.
i know that.	but you're doing 75.
but you're doing 75.	so is everyone else.
so is everyone else.	but a cop might stop you.
but a cop might stop you.	no, he won't. some cars are doing 85.
no, he won't. some cars are doing 85.	so the cop will stop those cars?
so the cop will stop those cars?	of course. he stops the fastest cars.
of course. he stops the fastest cars.	my friend got a ticket for doing 75.
my friend got a ticket for doing 75.	your friend was unlucky.
remember to put air in your tires.	how often do i have to do that?
how often do i have to do that?	once every two months.
once every two months.	that's a lot.
that's a lot.	what do you mean?
what do you mean?	that's six times a year!
that's six times a year!	yes, and it takes about five minutes each time.
yes, and it takes about five minutes each time.	i'll try.
i'll try.	check your tires or you'll get a flat.
check your tires or you'll get a flat.	oh. that's not good.
oh. that's not good.	no, it isn't. a flat costs you time and money.
no, it isn't. a flat costs you time and money.	and i don't have either.
you're driving too fast.	i'm in a hurry.
i'm in a hurry.	don't ever be in a hurry.
don't ever be in a hurry.	it's not my fault. you didn't wake me up.
it's not my fault. you didn't wake me up.	that's not my fault. you didn't tell me to wake you up.
that's not my fault. you didn't tell me to wake you up.	well, i meant to.
well, i meant to.	don't ever be in a hurry when you're driving.
don't ever be in a hurry when you're driving.	why not?
why not?	because you'll have an accident. most accidents are because people are in a hurry.
because you'll have an accident. most accidents are because people are in a hurry.	how do you know that?
how do you know that?	i read a lot.
i read a lot.	i thought drunks caused most accidents.
let's go for a ride.	where are we going?
where are we going?	into the mountains.
into the mountains.	that sounds nice.
that sounds nice.	i want to show you my new car.
i want to show you my new car.	you bought a new car?
you bought a new car?	yes. i bought a cadillac.
yes. i bought a cadillac.	a luxury car.
a luxury car.	luxury plus speed.
luxury plus speed.	what are we waiting for?
what are we waiting for?	let me get the keys.
let me get the keys.	let me get my camera.
i have to go to the bathroom.	why didn't you go before we left?
why didn't you go before we left?	i did, but i have to go again.
i did, but i have to go again.	well, hold on a little longer.
well, hold on a little longer.	i think i'm going to explode.
i think i'm going to explode.	just hold on.
just hold on.	oh! don't hit any more bumps!
oh! don't hit any more bumps!	we'll be at mcdonald's in just a few minutes.
we'll be at mcdonald's in just a few minutes.	i hope they are fast minutes.
i hope they are fast minutes.	think about something else. think about a hamburger.
think about something else. think about a hamburger.	i'm thinking, but i still have to go.
i'm thinking, but i still have to go.	it's the next exit. hold on!
where's the car?	what do you mean?
what do you mean?	the car isn't here.
the car isn't here.	where did you park it?
where did you park it?	i parked it right here.
i parked it right here.	are you sure?
are you sure?	yes. i remember this big tree.
yes. i remember this big tree.	maybe it's the wrong tree.
maybe it's the wrong tree.	no, this is the tree.
no, this is the tree.	did someone steal it?
did someone steal it?	i sure hope not.
i sure hope not.	maybe they towed it away.
look at this traffic.	i'd rather not.
i'd rather not.	it gets worse every year.
it gets worse every year.	why are you complaining? we're going almost 20 miles an hour.
why are you complaining? we're going almost 20 miles an hour.	the speed limit is 65!
the speed limit is 65!	well, that's between 2:00 and 4:00 a.m.
well, that's between 2:00 and 4:00 a.m.	where are all these people going?
where are all these people going?	they're all asking the same question.
they're all asking the same question.	when are they going to fix this problem?
when are they going to fix this problem?	they said they need more money.
they said they need more money.	they always need more money.
they always need more money.	it'll get worse before it gets better.
did you see that car?	yes, he went through the red light.
yes, he went through the red light.	can we call the police?
can we call the police?	no, the police don't care.
no, the police don't care.	why not?
why not?	they have to see it happen.
they have to see it happen.	they don't believe us?
they don't believe us?	no. they can only give a ticket if they see it happen.
no. they can only give a ticket if they see it happen.	so, what do we do?
so, what do we do?	we don't do anything.
we don't do anything.	maybe we should honk the horn next time.
maybe we should honk the horn next time.	the driver will just honk back at us.
my car is dirty.	why don't you wash it?
why don't you wash it?	that's what i'm going to do.
that's what i'm going to do.	are you going to wash it yourself?
are you going to wash it yourself?	of course. it's not a hard job.
of course. it's not a hard job.	i'll help you.
i'll help you.	okay, i'll get a bucket.
okay, i'll get a bucket.	i'll rinse the car first.
i'll rinse the car first.	then we can scrub it with a wet sponge and soap.
then we can scrub it with a wet sponge and soap.	after that, we can dry it with a towel.
after that, we can dry it with a towel.	then it will look like new
then it will look like new	and you save $10.
it sure is windy today.	paper is flying everywhere.
paper is flying everywhere.	this wind is dangerous for drivers.
this wind is dangerous for drivers.	especially for drivers of big trucks.
especially for drivers of big trucks.	the wind blows those trucks over.
the wind blows those trucks over.	it blows trees over, too.
it blows trees over, too.	a tree fell onto my dad's car.
a tree fell onto my dad's car.	was there much damage?
was there much damage?	my dad had to buy a new car.
my dad had to buy a new car.	wow! that's terrible.
wow! that's terrible.	never park your car under a tree.
never park your car under a tree.	the wind will get you, or the birds will get you.
when are we going to stop?	we'll stop at the next mcdonald's.
we'll stop at the next mcdonald's.	how far away is that?
how far away is that?	i think we'll be there in half an hour.
i think we'll be there in half an hour.	i hope so. i have to go to the bathroom.
i hope so. i have to go to the bathroom.	well, i can always pull over.
well, i can always pull over.	no, thank you, i'll just wait.
no, thank you, i'll just wait.	we can kill two birds with one stone.
we can kill two birds with one stone.	what do you mean?
what do you mean?	while you're using the bathroom, i'll order some food.
while you're using the bathroom, i'll order some food.	don't order for me. i'm not hungry.
don't order for me. i'm not hungry.	i'm very hungry. i'll order for you, and then i'll eat yours.
this is such a long light.	look how many cars are waiting in line.
look how many cars are waiting in line.	they need a left-turn arrow.
they need a left-turn arrow.	only two cars can make a left turn every three or four minutes.
only two cars can make a left turn every three or four minutes.	we'll be here forever.
we'll be here forever.	get out of this lane.
get out of this lane.	but we need to turn left.
but we need to turn left.	forget it. go straight.
forget it. go straight.	then what?
then what?	then we'll just make a u-turn.
then we'll just make a u-turn.	and then we can turn right at the light.
and then we can turn right at the light.	good idea. it will be so much quicker.
i need a cheap car.	how much money do you have?
how much money do you have?	$1,000.
$1,000.	well, that should get you something.
well, that should get you something.	but i need something that's reliable.
but i need something that's reliable.	you need a car with low mileage.
you need a car with low mileage.	a car that was owned by a little old lady.
a car that was owned by a little old lady.	where have you looked?
where have you looked?	i haven't looked anywhere yet.
i haven't looked anywhere yet.	why not?
why not?	because i'll never find one for such a low price.
because i'll never find one for such a low price.	you're right about that. keep saving your money.
good afternoon, officer.	your driver's license and registration, please.
your driver's license and registration, please.	here you go.
here you go.	do you know why i pulled you over?
do you know why i pulled you over?	i have no idea. all of a sudden i heard your siren.
i have no idea. all of a sudden i heard your siren.	you rolled through that stop sign back there.
you rolled through that stop sign back there.	but i stopped!
but i stopped!	no, you didn't. you slowed down, but you didn't come to a full stop.
no, you didn't. you slowed down, but you didn't come to a full stop.	well, nobody else does, so why should i?
well, nobody else does, so why should i?	that's not the attitude of a good driver.
that's not the attitude of a good driver.	but i am a good driver. i've never had a ticket in my life.
but i am a good driver. i've never had a ticket in my life.	well, you've got one now. here. have a nice day.
$140. i can't believe it.	what are you talking about?
what are you talking about?	i got a ticket downtown for $140.
i got a ticket downtown for $140.	were you speeding?
were you speeding?	no, i was crossing the street.
no, i was crossing the street.	were you jaywalking?
were you jaywalking?	no, i was in the crosswalk.
no, i was in the crosswalk.	so why did you get a ticket?
so why did you get a ticket?	the officer said the red hand was blinking.
the officer said the red hand was blinking.	was it blinking when you entered the crosswalk?
was it blinking when you entered the crosswalk?	no, the white walk sign was blinking.
no, the white walk sign was blinking.	you should fight that ticket. i'll be your witness.
they were in a crosswalk near school at 3 a.m.	who?
who?	two students from usc.
two students from usc.	what happened?
what happened?	a speeding car ran a red light, killing the girl.
a speeding car ran a red light, killing the girl.	what happened to the other student?
what happened to the other student?	he landed on the hood of the car.
he landed on the hood of the car.	did he get off the hood?
did he get off the hood?	no, the car stopped and the passenger pushed the injured student off the hood.
no, the car stopped and the passenger pushed the injured student off the hood.	i'll bet the car continued on its way.
i'll bet the car continued on its way.	of course it did. why stop after you've run over two people?
of course it did. why stop after you've run over two people?	i hope they find them and put them in jail for life.
what happened to your car?	i got a dent in the parking lot.
i got a dent in the parking lot.	how did you get it?
how did you get it?	i don't know. maybe it was from a shopping cart.
i don't know. maybe it was from a shopping cart.	those shopping carts are dangerous.
those shopping carts are dangerous.	especially the metal ones.
especially the metal ones.	i don't park at a store that uses metal shopping carts.
i don't park at a store that uses metal shopping carts.	that's a good idea, but there was a good sale at this store.
that's a good idea, but there was a good sale at this store.	did you save any money on the sale?
did you save any money on the sale?	yes, i did. i saved about $50.
yes, i did. i saved about $50.	that's great.
that's great.	yes, except this dent will cost about $150.
did you see "titanic"?	yes. it is a great movie.
yes. it is a great movie.	i saw it twelve times.
i saw it twelve times.	i saw it eight times.
i saw it eight times.	i have the dvd.
i have the dvd.	so do i.
so do i.	let's go to your home.
let's go to your home.	we can watch my dvd.
we can watch my dvd.	and then we can go to my home.
and then we can go to my home.	and watch your dvd.
and watch your dvd.	i always cry at the end.
i always cry at the end.	me too. it's so sad.
let's play cards.	i don't know any card games.
i don't know any card games.	i'll teach you one.
i'll teach you one.	okay. what will you teach me?
okay. what will you teach me?	it's called poker.
it's called poker.	is it easy to learn?
is it easy to learn?	yes, it will only take about 30 minutes.
yes, it will only take about 30 minutes.	okay. teach me how to play.
okay. teach me how to play.	we each get five cards.
we each get five cards.	oh, look. i have four tens.
oh, look. i have four tens.	that's great, but you're not supposed to tell me.
that's great, but you're not supposed to tell me.	oh. sorry. okay, i don't have four tens.
i'm a good card player.	why is that?
why is that?	because i watch the other players.
because i watch the other players.	what do you mean?
what do you mean?	people will tell you if they have a good hand.
people will tell you if they have a good hand.	how do they do that?
how do they do that?	for example, a friend of mine licks his lips.
for example, a friend of mine licks his lips.	when he licks his lips, you know he has a good hand?
when he licks his lips, you know he has a good hand?	i know he has a good hand, so i don't bet.
i know he has a good hand, so i don't bet.	he never wins your money?
he never wins your money?	nope, and it drives him crazy.
nope, and it drives him crazy.	he knows you can't read his mind. maybe he thinks you're cheating.
turn the radio down, please.	but i'm listening to it.
but i'm listening to it.	well, listen to it more quietly.
well, listen to it more quietly.	i can't wait till i grow up.
i can't wait till i grow up.	what will you do?
what will you do?	i will play the radio as loud as i want.
i will play the radio as loud as i want.	that's okay with me.
that's okay with me.	i will have a radio in every room of my house.
i will have a radio in every room of my house.	remind me to never visit you.
remind me to never visit you.	all the radios will be on extra loud.
all the radios will be on extra loud.	your neighbors will hate you.
your neighbors will hate you.	if they don't like it, they can move.
i hope i win the lotto.	your chances are very small.
your chances are very small.	but you can't win if you don't play.
but you can't win if you don't play.	ha! you can't win if you do play.
ha! you can't win if you do play.	someone has to win.
someone has to win.	that's what everyone says.
that's what everyone says.	it might as well be me.
it might as well be me.	that's what everyone says.
that's what everyone says.	you're trying to tell me something.
you're trying to tell me something.	that didn't take long.
that didn't take long.	you think i should quit playing.
you think i should quit playing.	save your money for school.
what's on tv?	nothing much.
nothing much.	what about the baseball game?
what about the baseball game?	it got rained out.
it got rained out.	rained out?
rained out?	yes, rained out.
yes, rained out.	how could that be?
how could that be?	well, you can't play baseball in a rainstorm.
well, you can't play baseball in a rainstorm.	i thought they were playing under a dome.
i thought they were playing under a dome.	the dome doesn't close.
the dome doesn't close.	why doesn't it close?
why doesn't it close?	who knows? they said they'll fix it before next season.
can i try your coffee?	sure. here you go.
sure. here you go.	hmm, that's not bad.
hmm, that's not bad.	there's nothing in it.
there's nothing in it.	what do you mean?
what do you mean?	i mean, it's just coffee.
i mean, it's just coffee.	i figured that.
i figured that.	it's not too bitter for you?
it's not too bitter for you?	it's a little bitter, but it's okay.
it's a little bitter, but it's okay.	there's no sugar or cream in it.
there's no sugar or cream in it.	no, it's a taste you have to get used to.
no, it's a taste you have to get used to.	sort of like beer.
let's take a walk.	what's the weather like?
what's the weather like?	let me step outside and see.
let me step outside and see.	it's a little chilly, right?
it's a little chilly, right?	yes, it is.
yes, it is.	i'll put on my cap.
i'll put on my cap.	wear a jacket, too.
wear a jacket, too.	i wonder if i should bring my gloves.
i wonder if i should bring my gloves.	maybe you should, just in case it gets colder.
maybe you should, just in case it gets colder.	i'll put a glove in each pocket.
i'll put a glove in each pocket.	we'll get warmer as we walk.
we'll get warmer as we walk.	yes, but it gets colder as the sun goes down.
look at the car chase on tv!	that driver is crazy.
that driver is crazy.	i can't believe he hasn't crashed.
i can't believe he hasn't crashed.	how fast is he going?
how fast is he going?	they say he's going 80 miles per hour.
they say he's going 80 miles per hour.	he's going to kill someone.
he's going to kill someone.	look! he just hit that car.
look! he just hit that car.	oh, my goodness. no one is safe on the streets.
oh, my goodness. no one is safe on the streets.	now he's slowing down.
now he's slowing down.	maybe he ran out of gas.
maybe he ran out of gas.	look! he just got out of the car and started running.
look! he just got out of the car and started running.	i hope the police catch him.
tv news is so stupid.	they shouldn't even call it news.
they shouldn't even call it news.	last night they told us about a cat in a sofa.
last night they told us about a cat in a sofa.	yesterday they told us about a dog in a pipe.
yesterday they told us about a dog in a pipe.	last week they told us about a bear in a back yard.
last week they told us about a bear in a back yard.	last month they told us about a mouse in a restaurant.
last month they told us about a mouse in a restaurant.	the weatherman tells us the temperature in every town.
the weatherman tells us the temperature in every town.	the sports guy shows us players fighting.
the sports guy shows us players fighting.	they always tell us "what's next."
they always tell us "what's next."	they always make "what's next" sound exciting, but it never is.
they always make "what's next" sound exciting, but it never is.	it's more like news for kids.
it's more like news for kids.	they should have kid reporters.
i love my computer.	computers are so cool.
computers are so cool.	i love to go online.
i love to go online.	the internet is amazing.
the internet is amazing.	you can travel all over the world.
you can travel all over the world.	i know. i went to china yesterday.
i know. i went to china yesterday.	what did you do?
what did you do?	i stood on the great wall and looked all around.
i stood on the great wall and looked all around.	what was it like?
what was it like?	it was like the real thing.
it was like the real thing.	it was like being there?
it was like being there?	yes, i felt like i was actually there.
the beatles are the best.	they are the best musical group ever.
they are the best musical group ever.	i love all their songs.
i love all their songs.	i don't know which one i like the best.
i don't know which one i like the best.	i like the ones i can sing along with.
i like the ones i can sing along with.	so do i, like "she loves you."
so do i, like "she loves you."	"she loves you, yeah, yeah, yeah!..."
"she loves you, yeah, yeah, yeah!..."	"Â…and you know you should be glad!"
"Â…and you know you should be glad!"	what a great song.
what a great song.	how about "let it be?"
how about "let it be?"	oh, yes! "let it be, let it beÂ…"
oh, yes! "let it be, let it beÂ…"	"Â…there will be an answer, let it be!"
let's go to a movie.	i'd rather not.
i'd rather not.	why not?
why not?	you know i don't like crowds.
you know i don't like crowds.	let's go to an early movie.
let's go to an early movie.	okay, that won't be very crowded.
okay, that won't be very crowded.	what would you like to see?
what would you like to see?	oh, i don't care. you're the one who wants to go out.
oh, i don't care. you're the one who wants to go out.	well, i want to see "the pursuit of happyness."
well, i want to see "the pursuit of happyness."	what have you heard about it?
what have you heard about it?	it's based on a true story about a divorced man and his young son.
it's based on a true story about a divorced man and his young son.	well, i hope it has a happy ending.
what's your favorite thing to do?	i like to watch people.
i like to watch people.	that's your favorite thing to do?
that's your favorite thing to do?	well, it's one of them.
well, it's one of them.	where do you go to watch people?
where do you go to watch people?	my girlfriend and i sit outside starbucks.
my girlfriend and i sit outside starbucks.	that sounds like a good spot.
that sounds like a good spot.	we watch people walk by with their dogs.
we watch people walk by with their dogs.	i guess you see lots of different dogs.
i guess you see lots of different dogs.	we don't even know what kind most of them are.
we don't even know what kind most of them are.	there are lots of different kinds, but they all have one thing in common.
there are lots of different kinds, but they all have one thing in common.	yes, they love to sniff each other when they meet.
they call him father dollar bill.	yes, he was on the tv news today.
yes, he was on the tv news today.	every easter sunday he gives away money.
every easter sunday he gives away money.	is it his money?
is it his money?	no. movie stars give him money to give to homeless people.
no. movie stars give him money to give to homeless people.	how much money does he give away?
how much money does he give away?	this year he gave away $15,000.
this year he gave away $15,000.	that's a lot of money.
that's a lot of money.	he gave $100 to people in wheelchairs.
he gave $100 to people in wheelchairs.	what about the other homeless people?
what about the other homeless people?	they got $1 each.
they got $1 each.	people stood in line just to get one dollar?!
old movies are the best.	even though they're in black and white.
even though they're in black and white.	a good story is more important than color.
a good story is more important than color.	actors didn't curse back then.
actors didn't curse back then.	and there was no violence.
and there was no violence.	people today don't like that.
people today don't like that.	no, today people like lots of action.
no, today people like lots of action.	i like a good story.
i like a good story.	i like to see actors who are like real people.
i like to see actors who are like real people.	like real people with real problems.
like real people with real problems.	they still make movies like that.
they still make movies like that.	yes, but they never make much money.
do you get pbs on tv?	yes, everybody gets the public broadcasting system.
yes, everybody gets the public broadcasting system.	it puts me to sleep.
it puts me to sleep.	tell me about it.
tell me about it.	a gardening show follows a knitting show.
a gardening show follows a knitting show.	a cooking show follows a sewing show.
a cooking show follows a sewing show.	a travel show follows another travel show.
a travel show follows another travel show.	i'll say! i've gone around the world a dozen times already!
i'll say! i've gone around the world a dozen times already!	now they're adding old tv shows to the old movies.
now they're adding old tv shows to the old movies.	i sure would like to see something interesting for a change.
i sure would like to see something interesting for a change.	if more people donate money, pbs could offer new shows.
if more people donate money, pbs could offer new shows.	who wants to donate? public tv should be free.
i love to watch "judge judy."	is that a tv show?
is that a tv show?	yes. it's on every afternoon.
yes. it's on every afternoon.	what's so good about it?
what's so good about it?	they have interesting lawsuits.
they have interesting lawsuits.	such as?
such as?	yesterday, a woman complained about a cell phone she bought on ebay.
yesterday, a woman complained about a cell phone she bought on ebay.	was something wrong with the phone?
was something wrong with the phone?	it works only in canada.
it works only in canada.	did the seller know that?
did the seller know that?	yes, and he didn't tell the buyer.
yes, and he didn't tell the buyer.	i hope judge judy made the seller take the phone back.
that woman is a very good singer.	yes, but she looks like a man.
yes, but she looks like a man.	what difference does it make?
what difference does it make?	female singers are supposed to be pretty.
female singers are supposed to be pretty.	singers are supposed to sound good.
singers are supposed to sound good.	they should look good, too.
they should look good, too.	there are lots of ugly men singers.
there are lots of ugly men singers.	men singers don't have to look good.
men singers don't have to look good.	then neither do women singers.
then neither do women singers.	well, i would never buy her cd.
well, i would never buy her cd.	but you would buy her cd if she was pretty?
but you would buy her cd if she was pretty?	yes. i would buy all of her cds.
all the tv stations are going to go digital.	yes, that will occur next month.
yes, that will occur next month.	most of them are already broadcasting in digital.
most of them are already broadcasting in digital.	the digital signal is very clear.
the digital signal is very clear.	oh, no, it isn't!
oh, no, it isn't!	what do you mean?
what do you mean?	i can't get a single channel.
i can't get a single channel.	do you have a digital tv?
do you have a digital tv?	of course. but i don't have cable.
of course. but i don't have cable.	you don't need to have cable, but you do need a good antenna.
you don't need to have cable, but you do need a good antenna.	but i have rabbit ears.
but i have rabbit ears.	rabbit ears aren't strong enough. buy a digital antenna.
i've got a date for you.	oh, really?
oh, really?	are you interested?
are you interested?	maybe. what is she like?
maybe. what is she like?	she's got a great personality.
she's got a great personality.	uh-oh. that means that she's fat and ugly.
uh-oh. that means that she's fat and ugly.	she's cute.
she's cute.	okay, so she's not ugly; she's just fat.
okay, so she's not ugly; she's just fat.	she weighs 98 pounds.
she weighs 98 pounds.	okay, she's not fat. so what's the problem with her?
okay, she's not fat. so what's the problem with her?	who said there is a problem with her?
who said there is a problem with her?	the problem is she has no problemsÂ—she's too good for me!
i think you're very pretty.	thank you.
thank you.	would you have dinner with me?
would you have dinner with me?	i would like to.
i would like to.	can i pick you up friday night?
can i pick you up friday night?	what time?
what time?	eight o'clock.
eight o'clock.	that sounds great.
that sounds great.	we'll go to a french restaurant.
we'll go to a french restaurant.	i've never been to a french restaurant.
i've never been to a french restaurant.	i think you'll love the food.
i think you'll love the food.	i'm not going to eat any snails!
you have pretty eyes.	thank you. so do you.
thank you. so do you.	i wish my eyes were blue.
i wish my eyes were blue.	what's the matter with green eyes?
what's the matter with green eyes?	nothing, except my favorite color is blue.
nothing, except my favorite color is blue.	maybe in your next life you'll have blue eyes.
maybe in your next life you'll have blue eyes.	but what if i'm a fish in my next life?
but what if i'm a fish in my next life?	i think some fish have blue eyes.
i think some fish have blue eyes.	i hope i don't come back as a fish.
i hope i don't come back as a fish.	i hope i come back as a cat.
i hope i come back as a cat.	cats have beautiful eyes.
cats have beautiful eyes.	i would love to have blue cat-eyes.
i love you.	i love you, too.
i love you, too.	i loved you the first day i saw you.
i loved you the first day i saw you.	it was love at first sight?
it was love at first sight?	yes, it was love at first sight.
yes, it was love at first sight.	i didn't love you at first.
i didn't love you at first.	i know. i had to chase you for a while.
i know. i had to chase you for a while.	yes, you chased me and then you caught me.
yes, you chased me and then you caught me.	now you're mine forever.
now you're mine forever.	and you're mine forever.
and you're mine forever.	we'll grow old together.
we'll grow old together.	and be happy together.
i'm in love with that girl.	have you told her?
have you told her?	of course not.
of course not.	why not?
why not?	she would laugh at me.
she would laugh at me.	how do you know?
how do you know?	because they always do.
because they always do.	maybe she's different.
maybe she's different.	they're all the same.
they're all the same.	just ask her out to dinner.
just ask her out to dinner.	and then what?
and then what?	and then she'll know that you like her.
give me a hug.	i'm not in the mood.
i'm not in the mood.	what's the matter?
what's the matter?	i saw you looking at that woman.
i saw you looking at that woman.	what woman?
what woman?	you know, that woman with the big boobs.
you know, that woman with the big boobs.	i was not looking at her.
i was not looking at her.	you were, too.
you were, too.	i'm not interested in her.
i'm not interested in her.	then why were you looking at her?
then why were you looking at her?	i was looking at something else.
i was looking at something else.	oh, really? then spend tonight looking at the sofa.
would you like to go on a blind date?	you must be joking.
you must be joking.	no, i'm serious.
no, i'm serious.	i don't want to date a blind woman.
i don't want to date a blind woman.	a blind date doesn't mean that she is blind!
a blind date doesn't mean that she is blind!	what does it mean?
what does it mean?	a blind date is a date with someone you don't know.
a blind date is a date with someone you don't know.	why would i date someone i don't even know?
why would i date someone i don't even know?	to try something new and exciting.
to try something new and exciting.	what if i don't like her?
what if i don't like her?	then you don't date her again.
i have a date tomorrow night.	really? who with?
really? who with?	a girl i met at the market.
a girl i met at the market.	you met a girl at the supermarket?
you met a girl at the supermarket?	she was standing behind me in a really slow line at the checkout counter.
she was standing behind me in a really slow line at the checkout counter.	what did you say to her?
what did you say to her?	i had two pineapples in my cart, and she asked where i had found them.
i had two pineapples in my cart, and she asked where i had found them.	she asked you about your pineapples?
she asked you about your pineapples?	i told her i had gotten the last two on the shelf, but i offered her one of mine.
i told her i had gotten the last two on the shelf, but i offered her one of mine.	that was nice of you.
that was nice of you.	she asked me how she could return the favor, so i asked her out.
she asked me how she could return the favor, so i asked her out.	sometimes a slow line can be a good thing.
did you have a date friday night?	yes, in fact, i did.
yes, in fact, i did.	who did you go out with?
who did you go out with?	a man i met in a coffee shop.
a man i met in a coffee shop.	where did you go?
where did you go?	we went to a nice restaurant.
we went to a nice restaurant.	anywhere else?
anywhere else?	then we went to a jazz club.
then we went to a jazz club.	that sounds like a nice date.
that sounds like a nice date.	yes, it was pleasant.
yes, it was pleasant.	but you won't date him again?
but you won't date him again?	no. he was nice, but there was no chemistry.
i had the worst date the other night.	what happened?
what happened?	first of all, he was half an hour late.
first of all, he was half an hour late.	that's not a good start.
that's not a good start.	then he didn't bother to apologize.
then he didn't bother to apologize.	that's rude.
that's rude.	then he drove too fast to the restaurant.
then he drove too fast to the restaurant.	that's dangerous.
that's dangerous.	i thought about getting out and taking a taxi home.
i thought about getting out and taking a taxi home.	what happened at the restaurant?
what happened at the restaurant?	we had a $40 meal, and he left a $1 tip!
we had a $40 meal, and he left a $1 tip!	i guess you can't go back to that restaurant.
i don't like that man.	why not?
why not?	he's a dirty old man.
he's a dirty old man.	what do you mean?
what do you mean?	he's old enough to be my father, yet he asked me out.
he's old enough to be my father, yet he asked me out.	well, you can't blame a man for asking.
well, you can't blame a man for asking.	he should act his age.
he should act his age.	but a lot of old people are still interested in dating.
but a lot of old people are still interested in dating.	they should find a nice hobby.
they should find a nice hobby.	just wait until you're 50 years old.
just wait until you're 50 years old.	dating will be the furthest thing from my mind.
dating will be the furthest thing from my mind.	that's what you say now. wait till you're 50.
does your girlfriend ever make you angry?	sometimes.
sometimes.	what does she do?
what does she do?	just yesterday, i told her i wouldn't trade her for all the money in the world.
just yesterday, i told her i wouldn't trade her for all the money in the world.	that was a nice thing to say.
that was a nice thing to say.	that's what i thought.
that's what i thought.	what did she say?
what did she say?	she laughed! she didn't believe me.
she laughed! she didn't believe me.	that wasn't very nice of her.
that wasn't very nice of her.	she said that nothing is more important to me than money.
she said that nothing is more important to me than money.	what did you say?
what did you say?	i told her i wouldn't trade her for any other woman in the world.
some people have good noses.	i wish i had a good nose. mine is way too big.
i wish i had a good nose. mine is way too big.	i don't mean good-looking. i mean good-smelling.
i don't mean good-looking. i mean good-smelling.	oh. but that can be a curse.
oh. but that can be a curse.	yes, because you can be too sensitive to odors.
yes, because you can be too sensitive to odors.	i'll say. my girlfriend has a nose like a drug dog.
i'll say. my girlfriend has a nose like a drug dog.	did she catch you using drugs?
did she catch you using drugs?	sort of. she knows whenever i sneak a cigarette.
sort of. she knows whenever i sneak a cigarette.	you don't need a good nose for thatÂ—cigarettes stink.
you don't need a good nose for thatÂ—cigarettes stink.	but when i sneak just one cigarette in the morning, she can smell it that evening!
but when i sneak just one cigarette in the morning, she can smell it that evening!	boy, that is a good nose.
boy, that is a good nose.	i told her she should apply for a job at customs.
let's go out to eat.	that sounds like fun.
that sounds like fun.	where do you want to go?
where do you want to go?	let me think a minute.
let me think a minute.	i feel like chinese.
i feel like chinese.	that sounds delicious.
that sounds delicious.	i know a good chinese restaurant.
i know a good chinese restaurant.	how far away is it?
how far away is it?	it's only 10 minutes from here.
it's only 10 minutes from here.	do we need reservations?
do we need reservations?	oh, no. we can walk right in.
oh, no. we can walk right in.	let's go now. i'm hungry!
i can't believe how long this line is.	this is a popular restaurant, isn't it?
this is a popular restaurant, isn't it?	yes, but it isn't a fast-food restaurant, is it?
yes, but it isn't a fast-food restaurant, is it?	it's the slowest hamburger in town.
it's the slowest hamburger in town.	that's because they cook it while you wait.
that's because they cook it while you wait.	yes. that's why it's also the best hamburger in town.
yes. that's why it's also the best hamburger in town.	a great burger and great service.
a great burger and great service.	yes, the workers are very polite.
yes, the workers are very polite.	and they're clean.
and they're clean.	i've been coming here for years.
i've been coming here for years.	me too.
me too.	excuse me. they just called my number.
lunch was delicious.	thank you.
thank you.	what kind of soup was that?
what kind of soup was that?	it was tomato soup.
it was tomato soup.	that tasted so good.
that tasted so good.	i put lemon and butter in it.
i put lemon and butter in it.	the sandwich was good, too.
the sandwich was good, too.	everyone likes bacon and tomato sandwiches.
everyone likes bacon and tomato sandwiches.	especially on toast.
especially on toast.	and the pickles were great, too.
and the pickles were great, too.	tomorrow we'll have rice and fish for lunch.
tomorrow we'll have rice and fish for lunch.	i can't wait.
i'm calling the waiter.	what's the matter?
what's the matter?	this steak has too much fat.
this steak has too much fat.	what do you want the waiter to do?
what do you want the waiter to do?	bring me a better steak.
bring me a better steak.	i wouldn't do that.
i wouldn't do that.	why not?
why not?	they will drop the new steak on the floor, step on it, and then spit on it.
they will drop the new steak on the floor, step on it, and then spit on it.	you're crazy.
you're crazy.	then the waiter will give you a big smile as he brings you the new steak.
then the waiter will give you a big smile as he brings you the new steak.	where do you get these crazy ideas?
where do you get these crazy ideas?	i used to cook in a restaurant!
let's leave.	but we just got here.
but we just got here.	did you see the waiter's hands?
did you see the waiter's hands?	no.
no.	he had dirty fingernails.
he had dirty fingernails.	really?
really?	his nails were black!
his nails were black!	that's disgusting.
that's disgusting.	and he poured water into our glasses.
and he poured water into our glasses.	yuck! no water for me.
yuck! no water for me.	i wonder if the cooks' nails are dirty, too.
i wonder if the cooks' nails are dirty, too.	who cares? let's get out of here.
this hot bread is delicious.	i like this restaurant because they give you free bread.
i like this restaurant because they give you free bread.	well, i think we are paying for it.
well, i think we are paying for it.	no. look at the bill when we get it. there's no charge for the bread.
no. look at the bill when we get it. there's no charge for the bread.	it is delicious, especially with butter.
it is delicious, especially with butter.	i think we should just leave after we fill up on the bread.
i think we should just leave after we fill up on the bread.	they probably wouldn't like that.
they probably wouldn't like that.	i'm eating so much bread that i'm getting full.
i'm eating so much bread that i'm getting full.	then stop eating the bread!
then stop eating the bread!	okay, just one more piece. pass the butter, please.
okay, just one more piece. pass the butter, please.	if i owned a restaurant, i would never serve hot bread before the main course.
if i owned a restaurant, i would never serve hot bread before the main course.	that's terrible. i would never go to your restaurant.
is this a clean restaurant?	well, the tables and chairs look okay.
well, the tables and chairs look okay.	okay, let's sit down.
okay, let's sit down.	check out the silverware.
check out the silverware.	it passes inspection.
it passes inspection.	here comes the waiter. see if his hands and nails are clean.
here comes the waiter. see if his hands and nails are clean.	well, the waiter looked clean, so i guess it's okay to eat here.
well, the waiter looked clean, so i guess it's okay to eat here.	you're forgetting about the bathroom.
you're forgetting about the bathroom.	i'm going to just hope that the bathroom is clean.
i'm going to just hope that the bathroom is clean.	you're not going to examine it before we order dinner?
you're not going to examine it before we order dinner?	no, i'd rather not find out that it's dirty, because i'm pretty hungry right now.
no, i'd rather not find out that it's dirty, because i'm pretty hungry right now.	me, too. let's forget about germs and focus on food.
have you seen our waiter?	here he comes now.
here he comes now.	we've been sitting here for almost 10 minutes.
we've been sitting here for almost 10 minutes.	oops, i guess i was wrong. that isn't our waiter.
oops, i guess i was wrong. that isn't our waiter.	we can give him five more minutes, and then leave.
we can give him five more minutes, and then leave.	i'll go up front and talk to the manager.
i'll go up front and talk to the manager.	that's a good idea.
that's a good idea.	maybe they'll give us free drinks for waiting so long.
maybe they'll give us free drinks for waiting so long.	maybe he'll send us our waiter immediately.
maybe he'll send us our waiter immediately.	every time we eat out, it's an adventure.
every time we eat out, it's an adventure.	last time, we got seats next to the kitchen.
last time, we got seats next to the kitchen.	we'll never go there again.
is this table okay?	no, it's too close to the kitchen door.
no, it's too close to the kitchen door.	how about this table?
how about this table?	no, it's too close to the front door.
no, it's too close to the front door.	this looks like a nice table.
this looks like a nice table.	no, it's too close to the salad bar.
no, it's too close to the salad bar.	okay, i give up.
okay, i give up.	well, there is one good table.
well, there is one good table.	great. which one?
great. which one?	that one. a group of eight just sat down at it.
i don't believe the art world.	what is it this time?
what is it this time?	an andy warhol drawing.
an andy warhol drawing.	he's a famous artist.
he's a famous artist.	he drew two butterflies and a flower on a napkin in a restaurant.
he drew two butterflies and a flower on a napkin in a restaurant.	did he sign it?
did he sign it?	yes.
yes.	is it beautiful?
is it beautiful?	it's just black ink on a white napkin. and the napkin has food stains!
it's just black ink on a white napkin. and the napkin has food stains!	so it's not worth much?
so it's not worth much?	only about $30,000.
only about $30,000.	without the food stains, it would probably be worth more.
can we go to the baseball game?	of course.
of course.	i love baseball.
i love baseball.	so do i.
so do i.	i love to eat the peanuts.
i love to eat the peanuts.	i love to eat the hot dogs.
i love to eat the hot dogs.	i hope we'll see a home run.
i hope we'll see a home run.	i hope we'll catch a foul ball.
i hope we'll catch a foul ball.	bring a jacket.
bring a jacket.	yes. it gets a little cool at night.
yes. it gets a little cool at night.	bring a glove to catch a foul ball.
bring a glove to catch a foul ball.	no. i'll just use my cap to catch a foul ball.
golf is a silly game.	it certainly is.
it certainly is.	you hit a white ball.
you hit a white ball.	and then you chase it.
and then you chase it.	and then you hit it again.
and then you hit it again.	finally, you put the ball into a hole in the ground.
finally, you put the ball into a hole in the ground.	you do this 18 times, because there are 18 holes.
you do this 18 times, because there are 18 holes.	what's the point?
what's the point?	how can it be fun?
how can it be fun?	they pay money to play this silly game!
they pay money to play this silly game!	i think golfers have a mental problem.
i think golfers have a mental problem.	i think they're nuts.
do you want to go fishing?	yes. that's a good idea.
yes. that's a good idea.	where do you want to go?
where do you want to go?	we can go to the river.
we can go to the river.	or we can go to the lake.
or we can go to the lake.	or we can go to the ocean.
or we can go to the ocean.	let's go to the lake.
let's go to the lake.	yes. the lake is only 10 miles away.
yes. the lake is only 10 miles away.	we can be there in 20 minutes.
we can be there in 20 minutes.	i'll get our fishing rods.
i'll get our fishing rods.	i'll get the bait.
i'll get the bait.	we'll have fresh fish for dinner!
baseball is fun.	i like to hit the ball.
i like to hit the ball.	i like to run around the bases.
i like to run around the bases.	i like to slide into the bases.
i like to slide into the bases.	yeah. it's a lot of fun to slide.
yeah. it's a lot of fun to slide.	i want to be a baseball player when i grow up.
i want to be a baseball player when i grow up.	me too. i want to play for the yankees.
me too. i want to play for the yankees.	not me. i want to play for the dodgers.
not me. i want to play for the dodgers.	we have to practice every day.
we have to practice every day.	i don't like practice.
i don't like practice.	me neither. it's boring.
me neither. it's boring.	but practice makes perfect.
let's go jogging.	that's a good idea.
that's a good idea.	i bought some new shoes.
i bought some new shoes.	are they comfortable?
are they comfortable?	they're very comfortable.
they're very comfortable.	how much were they?
how much were they?	they were on sale for $80.
they were on sale for $80.	do they help you run faster?
do they help you run faster?	no, but my feet don't hurt anymore.
no, but my feet don't hurt anymore.	then they're worth every penny.
then they're worth every penny.	you might want to buy a pair.
you might want to buy a pair.	i'll wait until i wear this pair out.
tiger is the greatest golfer in the world.	you can say that again.
you can say that again.	but i'm worried about tiger.
but i'm worried about tiger.	why is that?
why is that?	because he likes to scuba dive.
because he likes to scuba dive.	what's wrong with that?
what's wrong with that?	it can be dangerous.
it can be dangerous.	you mean he could drown.
you mean he could drown.	he shouldn't scuba dive until he retires.
he shouldn't scuba dive until he retires.	but he dives to relax.
but he dives to relax.	he might relax, but it makes me nervous.
he might relax, but it makes me nervous.	if his wife doesn't mind, you shouldn't mind.
did you watch that golf tournament?	the one that tiger won?
the one that tiger won?	how did he do it?
how did he do it?	it was nothing for him.
it was nothing for him.	he sank a 20-foot putt on the last hole to win by one stroke!
he sank a 20-foot putt on the last hole to win by one stroke!	he sank a 25-footer last year at the same tournament to win by one stroke.
he sank a 25-footer last year at the same tournament to win by one stroke.	i think he is from outer space.
i think he is from outer space.	no human could possibly play golf that well.
no human could possibly play golf that well.	whenever he needs a shot to win a tournament, he makes that shot.
whenever he needs a shot to win a tournament, he makes that shot.	no human can do that.
no human can do that.	somebody should check his birth record.
somebody should check his birth record.	i bet it says he was born on mars.
who's the greatest baseball player?	there are so many great players.
there are so many great players.	yes, but who is the greatest?
yes, but who is the greatest?	i'd have to say babe ruth.
i'd have to say babe ruth.	most people would say that.
most people would say that.	he changed the game.
he changed the game.	yes, he made the home run popular.
yes, he made the home run popular.	everybody loved him, all over the nation.
everybody loved him, all over the nation.	he helped make the yankees the best team ever.
he helped make the yankees the best team ever.	and ruth was a good person, too.
and ruth was a good person, too.	he always visited hospitals to cheer up sick kids.
he always visited hospitals to cheer up sick kids.	there will never be another babe.
did you hear what happened at the baseball game?	no, please tell me.
no, please tell me.	someone punched out someone.
someone punched out someone.	that's not nice.
that's not nice.	it's worse than that.
it's worse than that.	how so?
how so?	two guys got into an argument.
two guys got into an argument.	i'll bet they were drinking.
i'll bet they were drinking.	a third guy punched one of the two guys.
a third guy punched one of the two guys.	i'll bet he was drinking, too.
i'll bet he was drinking, too.	the victim hit his head on the concrete steps and died.
the victim hit his head on the concrete steps and died.	that's terrible. can't people just have fun at a baseball game?
i want to go to the ball game.	is there a game tonight?
is there a game tonight?	yes, it starts at 7 p.m.
yes, it starts at 7 p.m.	can we get tickets?
can we get tickets?	yes, but only the cheap tickets.
yes, but only the cheap tickets.	how much are they?
how much are they?	they're only $5 each.
they're only $5 each.	that's a good price.
that's a good price.	yes, it's cheaper than a hot dog or a beer.
yes, it's cheaper than a hot dog or a beer.	where are the seats?
where are the seats?	they're behind the outfield.
they're behind the outfield.	maybe we can catch a home run ball.
golf is so hard.	what's so hard about hitting a little white ball?
what's so hard about hitting a little white ball?	it's hard if you want to do it right.
it's hard if you want to do it right.	you mean like tiger?
you mean like tiger?	no, like a good amateur golfer.
no, like a good amateur golfer.	what's so hard about golf?
what's so hard about golf?	there are so many things you have to do right.
there are so many things you have to do right.	like what?
like what?	like keep your left arm straight, keep your head down, and follow through.
like keep your left arm straight, keep your head down, and follow through.	yikes! who can remember all that?
yikes! who can remember all that?	you need to get a lot of lessons when you're really young.
you need to get a lot of lessons when you're really young.	forget it. golf sounds more like work than fun.
did you hear about the ball player?	the home run hitter on drugs?
the home run hitter on drugs?	he said a doctor helped him with a personal problem.
he said a doctor helped him with a personal problem.	he said he wasn't using drugs.
he said he wasn't using drugs.	he apologized to the fans.
he apologized to the fans.	the league suspended him for 50 games.
the league suspended him for 50 games.	that will cost him some money.
that will cost him some money.	yes, about $7 million.
yes, about $7 million.	that will teach him a good lesson.
that will teach him a good lesson.	he probably won't use drugs anymore.
he probably won't use drugs anymore.	but it won't stop other players from using drugs.
but it won't stop other players from using drugs.	no. everyone always figures that they won't get caught.
why is there so much crime?	because parents don't teach their kids right from wrong.
because parents don't teach their kids right from wrong.	is that it?
is that it?	also, there aren't enough police.
also, there aren't enough police.	but there are a lot of police.
but there are a lot of police.	there's only one police officer per 100 criminals.
there's only one police officer per 100 criminals.	can't we hire more police?
can't we hire more police?	no. it costs too much money.
no. it costs too much money.	doesn't crime cost more than police?
doesn't crime cost more than police?	yes, it does.
yes, it does.	so it would be cheaper to hire more police?
so it would be cheaper to hire more police?	yes, it would.
this is a great neighborhood.	yes, it is.
yes, it is.	people are friendly.
people are friendly.	yes, they are.
yes, they are.	the streets and sidewalks are clean.
the streets and sidewalks are clean.	yes, they are.
yes, they are.	there's a real nice park nearby.
there's a real nice park nearby.	yes, there is.
yes, there is.	i feel safe here.
i feel safe here.	there is no crime here.
there is no crime here.	i wish i could move here.
i wish i could move here.	maybe you can, if someone moves out.
the house burned down.	what happened?
what happened?	the man fell asleep.
the man fell asleep.	was he smoking?
was he smoking?	yes, he was smoking a cigarette.
yes, he was smoking a cigarette.	did he die?
did he die?	yes, he did. his cat died, too.
yes, he did. his cat died, too.	that's too bad. what about his smoke alarm?
that's too bad. what about his smoke alarm?	the battery was dead.
the battery was dead.	a good battery would have saved his life.
a good battery would have saved his life.	he had cigarettes, but no battery.
he had cigarettes, but no battery.	it happens all the time.
they say he has started fifteen big fires.	he's been in jail three times already.
he's been in jail three times already.	why did they ever let him out?
why did they ever let him out?	it's the law. they can't keep him in jail forever.
it's the law. they can't keep him in jail forever.	why not? everyone knows he's a firebug. he loves to start fires.
why not? everyone knows he's a firebug. he loves to start fires.	i don't know. sometimes the law doesn't make sense.
i don't know. sometimes the law doesn't make sense.	but his latest fire killed someone.
but his latest fire killed someone.	this time they have charged him with murder.
this time they have charged him with murder.	so maybe he'll go to jail forever?
so maybe he'll go to jail forever?	i sure hope so.
i sure hope so.	someone should set him on fire.
someone should set him on fire.	that would teach him a good lesson.
put your seatbelt on.	why?
why?	because it will protect you in case of an accident.
because it will protect you in case of an accident.	but it's uncomfortable.
but it's uncomfortable.	it's the law.
it's the law.	it's so much trouble.
it's so much trouble.	it's common sense.
it's common sense.	it's so tight that it's hard for me to breathe.
it's so tight that it's hard for me to breathe.	hold your breath till we get there.
hold your breath till we get there.	okay, my seatbelt is on.
okay, my seatbelt is on.	i'm glad you don't complain very much.
i'm glad you don't complain very much.	i'm ready for an accident.
what are you doing?	i'm going to change the light bulb. it burnt out.
i'm going to change the light bulb. it burnt out.	what are you standing on?
what are you standing on?	a couple of dictionaries and some textbooks.
a couple of dictionaries and some textbooks.	are you crazy?
are you crazy?	what's the matter?
what's the matter?	those books will slip and you'll fall.
those books will slip and you'll fall.	it's only a couple of feet.
it's only a couple of feet.	what if you fall while you're holding the light bulb, and it breaks and pieces go into your eyes?
what if you fall while you're holding the light bulb, and it breaks and pieces go into your eyes?	i never thought about that.
i never thought about that.	you'd be blind for the rest of your life!
you'd be blind for the rest of your life!	i'll get the stepladder.
did you see that puddle of water on the floor?	yes. i called for a clean-up.
yes. i called for a clean-up.	a puddle of water is very dangerous.
a puddle of water is very dangerous.	it isn't easy to see.
it isn't easy to see.	but it's real easy to slip on.
but it's real easy to slip on.	especially on these slick floors.
especially on these slick floors.	someone who slips could hurt their back.
someone who slips could hurt their back.	they could even crack their head open.
they could even crack their head open.	we should stand here till the clean-up person gets here.
we should stand here till the clean-up person gets here.	we can leave if we put an orange cone here.
we can leave if we put an orange cone here.	yes, but i don't know where the orange cones are.
yes, but i don't know where the orange cones are.	 it doesn't matter. here he comes now with the mop.
what happens when the fire alarm rings?	we tell our students to leave the classroom.
we tell our students to leave the classroom.	can they take their belongings?
can they take their belongings?	yes, if they do it quickly.
yes, if they do it quickly.	where do the students go?
where do the students go?	they go out to the north parking lot.
they go out to the north parking lot.	what do the teachers do?
what do the teachers do?	we take our rosters to the parking lot and take roll.
we take our rosters to the parking lot and take roll.	why do you do that?
why do you do that?	we want to make sure all the students are out of the building.
we want to make sure all the students are out of the building.	if they are all outside, then what?
if they are all outside, then what?	then we just wait outside for a fireman to tell us to go back in.
i have to go back upstairs.	why? we're already late.
why? we're already late.	i have to check the stove.
i have to check the stove.	what's the matter?
what's the matter?	maybe i left the burner on.
maybe i left the burner on.	no, you didn't. i checked the stove before we left.
no, you didn't. i checked the stove before we left.	are you sure?
are you sure?	of course i'm sure.
of course i'm sure.	well, i have to go back upstairs anyway.
well, i have to go back upstairs anyway.	it's getting later every minute.
it's getting later every minute.	i think i left the water running.
i think i left the water running.	no, you didn't. let's go! the only thing running is the clock!
the city is buying guns.	what are they paying?
what are they paying?	up to $200 for each gun, no questions asked.
up to $200 for each gun, no questions asked.	why are they doing this?
why are they doing this?	they want to get guns off the street.
they want to get guns off the street.	who would turn in a gun for $200?
who would turn in a gun for $200?	that isn't a good deal?
that isn't a good deal?	a good gun costs $400 or more.
a good gun costs $400 or more.	well, if you bring your receipt, maybe they'll give you $400.
well, if you bring your receipt, maybe they'll give you $400.	i'll keep my receipt and my gun.
i'll keep my receipt and my gun.	i didn't know you had a gun.
i didn't know you had a gun.	everyone in america should have a gun.
you're yawning.	i sure am.
i sure am.	you should go to bed.
you should go to bed.	i will as soon as i finish this article.
i will as soon as i finish this article.	what are you reading?
what are you reading?	it's about crime in los angeles.
it's about crime in los angeles.	what does it say?
what does it say?	the mayor says the crime rate is going down.
the mayor says the crime rate is going down.	then why does everyone lock their doors?
then why does everyone lock their doors?	i guess they haven't read this article.
i guess they haven't read this article.	no one believes that the crime rate is going down.
no one believes that the crime rate is going down.	maybe the mayor is just talking about his own neighborhood.
people who live in california are crazy.	why is that?
why is that?	because of all the earthquakes and fires.
because of all the earthquakes and fires.	but big earthquakes happen only once in a while.
but big earthquakes happen only once in a while.	once in a while is once too many.
once in a while is once too many.	but you're right. there are a lot of fires.
but you're right. there are a lot of fires.	a recent fire destroyed 85 homes.
a recent fire destroyed 85 homes.	still, it's safer than florida.
still, it's safer than florida.	florida doesn't have earthquakes or fires.
florida doesn't have earthquakes or fires.	no, florida just has hurricanes every year from june to october.
no, florida just has hurricanes every year from june to october.	but most of those hurricanes are harmless.
but most of those hurricanes are harmless.	excuse me. hurricane andrew destroyed 30,000 homes!
i went to hawaii on vacation.	did you like it?
did you like it?	i loved it. i want to live there.
i loved it. i want to live there.	what did you like?
what did you like?	the island is so green, and the water is so blue.
the island is so green, and the water is so blue.	did you go swimming?
did you go swimming?	i went to the beach every day.
i went to the beach every day.	how was the weather?
how was the weather?	it was hot and sunny every day.
it was hot and sunny every day.	what did you do at night?
what did you do at night?	at night i went out to eat. the food was delicious.
at night i went out to eat. the food was delicious.	people who live in hawaii are lucky.
i like this hotel.	what do you like about it?
what do you like about it?	we get a free breakfast.
we get a free breakfast.	coffee and a roll?
coffee and a roll?	no, a real breakfast.
no, a real breakfast.	bacon and eggs?
bacon and eggs?	with toast, ham, sausage, fresh fruit, and juice.
with toast, ham, sausage, fresh fruit, and juice.	wow! that is nice. let's stay for two nights.
wow! that is nice. let's stay for two nights.	and the rooms are clean, too.
and the rooms are clean, too.	do they allow pets?
do they allow pets?	no pets, no smoking.
no pets, no smoking.	i like that. let's stay three nights.
i'm not sleeping here tonight.	what's the matter? this is a nice room.
what's the matter? this is a nice room.	maybe the room is nice, but not the bed.
maybe the room is nice, but not the bed.	what's wrong with the bed?
what's wrong with the bed?	look at this sheet.
look at this sheet.	yes?
yes?	see those stains?
see those stains?	i sure do.
i sure do.	i'm not sleeping on that sheet.
i'm not sleeping on that sheet.	well, just call the front desk. they'll give us new sheets.
well, just call the front desk. they'll give us new sheets.	i want sheets without stains on them.
i want sheets without stains on them.	from now on, let's bring our own sheets.
what time does your plane leave?	it leaves at 12:15.
it leaves at 12:15.	when do you have to be at the airport?
when do you have to be at the airport?	i have to be there two hours early.
i have to be there two hours early.	so we have to be at the airport at 10:15.
so we have to be at the airport at 10:15.	that means we have to leave the house at 9:15.
that means we have to leave the house at 9:15.	well, it's an hour to get there, if there are no traffic problems.
well, it's an hour to get there, if there are no traffic problems.	so maybe we better leave at 8:15?
so maybe we better leave at 8:15?	yes, it's better to get there too early than too late.
yes, it's better to get there too early than too late.	i agree.
i agree.	you never know what might happen on these freeways.
you never know what might happen on these freeways.	there's at least one huge accident every day.
i need to fly to new york.	when are you going?
when are you going?	during the christmas holidays.
during the christmas holidays.	you'd better buy your ticket now.
you'd better buy your ticket now.	you must be kidding.
you must be kidding.	no, i'm not. it's march. time is running out. seats are selling out right now.
no, i'm not. it's march. time is running out. seats are selling out right now.	i thought i would wait until october.
i thought i would wait until october.	i'll bet this is the first time you've ever flown during christmas.
i'll bet this is the first time you've ever flown during christmas.	you're right.
you're right.	well, listen to me. you need to buy a ticket now.
well, listen to me. you need to buy a ticket now.	but maybe prices will be cheaper in october.
but maybe prices will be cheaper in october.	cheaper prices won't do you any good if there are no seats.
i hate flying.	so do i.
so do i.	a long time ago, flying used to be okay.
a long time ago, flying used to be okay.	now it's like riding a bus.
now it's like riding a bus.	you're jammed in with people all around you.
you're jammed in with people all around you.	half of them are coughing, and the other half are sneezing.
half of them are coughing, and the other half are sneezing.	you don't have any elbow room or knee room.
you don't have any elbow room or knee room.	people are always getting up to use the bathroom.
people are always getting up to use the bathroom.	kids are crying or climbing over you.
kids are crying or climbing over you.	it's a flying zoo!
it's a flying zoo!	i wish i could afford first class seats.
i wish i could afford first class seats.	doesn't everybody?
some guy rowed across the atlantic ocean.	good for him.
good for him.	why would he do that?
why would he do that?	did he set a new record?
did he set a new record?	yes, i think he did.
yes, i think he did.	well, i guess that's why he did it.
well, i guess that's why he did it.	what's the point?
what's the point?	now he has the world record!
now he has the world record!	but someone's going to break it, so what good is it?
but someone's going to break it, so what good is it?	well, he can enjoy it while it lasts.
well, he can enjoy it while it lasts.	i don't think he even got paid for it.
i don't think he even got paid for it.	some people do it just to do it.
i want to go on a cruise ship.	that sounds like fun. where do you want to go?
that sounds like fun. where do you want to go?	i want to cruise to hawaii.
i want to cruise to hawaii.	that should be a nice trip. lots of fun, and lots of food.
that should be a nice trip. lots of fun, and lots of food.	i have no idea how much it will cost.
i have no idea how much it will cost.	i think it depends on the season and on your cabin.
i think it depends on the season and on your cabin.	well, of course i want to go when the weather is nice.
well, of course i want to go when the weather is nice.	yes, you don't want to travel in winter storms.
yes, you don't want to travel in winter storms.	and i want to get a big cabin with a view.
and i want to get a big cabin with a view.	are you going to travel alone?
are you going to travel alone?	no, my sister and i will travel together.
no, my sister and i will travel together.	well, you should go online and try to find a good deal.
i hate to fly.	because of all the security?
because of all the security?	no, because it hurts my ears.
no, because it hurts my ears.	what do you mean?
what do you mean?	every time we land or take off, my ears hurt so much.
every time we land or take off, my ears hurt so much.	that's just the altitude change, i think.
that's just the altitude change, i think.	whatever it is, it hurts.
whatever it is, it hurts.	can't you take medicine or something for it?
can't you take medicine or something for it?	i've tried everything, but nothing works.
i've tried everything, but nothing works.	have you tried earplugs?
have you tried earplugs?	they don't work, either.
they don't work, either.	well, be glad you're not a pilot.
spring break starts tomorrow.	are you going to go anywhere?
are you going to go anywhere?	i was thinking of driving to arizona.
i was thinking of driving to arizona.	to the grand canyon?
to the grand canyon?	yes. i've never been there.
yes. i've never been there.	i was there when i was a kid.
i was there when i was a kid.	how did you like it?
how did you like it?	i loved it. i still remember how amazing it was.
i loved it. i still remember how amazing it was.	i'm sure i'll like it, too.
i'm sure i'll like it, too.	you should try riding a mule on a trail to the bottom.
you should try riding a mule on a trail to the bottom.	no way! i don't want to fall to my death.
no way! i don't want to fall to my death.	don't worry. only one person has ever fallen off a mule.
that hotel was terrible.	the worst in the whole world.
the worst in the whole world.	the walls were so thin.
the walls were so thin.	all day long we heard tvs or telephones.
all day long we heard tvs or telephones.	all night long we heard people snoring.
all night long we heard people snoring.	housekeeping didn't give us fresh towels.
housekeeping didn't give us fresh towels.	room service brought us a cold dinner.
room service brought us a cold dinner.	our nonsmoking room stunk of cigarette smoke.
our nonsmoking room stunk of cigarette smoke.	our room was right next to the elevator and the ice machine.
our room was right next to the elevator and the ice machine.	they added phony charges to our bill.
they added phony charges to our bill.	how did we end up in that terrible hotel?
how did we end up in that terrible hotel?	the travel agent gave us a 50-percent discount!
i have to hang up. i'm so sleepy.	it's not even 10 o'clock.
it's not even 10 o'clock.	i'm falling asleep on the phone.
i'm falling asleep on the phone.	you got up real early.
you got up real early.	i had to take my friend to the airport.
i had to take my friend to the airport.	why didn't you take a nap when you got home?
why didn't you take a nap when you got home?	i didn't get home until 30 minutes ago.
i didn't get home until 30 minutes ago.	why is that?
why is that?	there was a bomb threat at the airport.
there was a bomb threat at the airport.	only a threat?
only a threat?	yes, but i was stuck there all day while they looked for the bomb.
yes, but i was stuck there all day while they looked for the bomb.	someday the bomb is going to be for real.
my dad went to washington, d.c.	why did he do that?
why did he do that?	he was invited, along with about 90 other veterans.
he was invited, along with about 90 other veterans.	who invited them?
who invited them?	some private organization.
some private organization.	why did they invite him?
why did they invite him?	to thank him and all the other soldiers who served in world war ii.
to thank him and all the other soldiers who served in world war ii.	that's very nice.
that's very nice.	my dad got to see the beautiful new world war ii monument.
my dad got to see the beautiful new world war ii monument.	that trip must have cost a lot of money. 
that trip must have cost a lot of money. 	he said all the money came from private donations.
that was a great trip to washington, d.c.	tell me about it, dad.
tell me about it, dad.	about 90 of us world war ii veterans got on the plane at 8 a.m.
about 90 of us world war ii veterans got on the plane at 8 a.m.	how long was the flight?
how long was the flight?	it only took about two hours.
it only took about two hours.	did you take pictures at the world war ii monument?
did you take pictures at the world war ii monument?	oh, yes. we all took lots of pictures.
oh, yes. we all took lots of pictures.	then you flew back home that evening?
then you flew back home that evening?	yes. when we landed, tv reporters and the army band were there.
yes. when we landed, tv reporters and the army band were there.	that must have made you feel really special.
that must have made you feel really special.	oh, it did. there were about 300 people there to honor us.
oh, it did. there were about 300 people there to honor us.	well, you all deserve it. you helped save our country.
i need a job.	i thought you had a job.
i thought you had a job.	i did.
i did.	what happened?
what happened?	i got laid off.
i got laid off.	that's terrible! when did it happen?
that's terrible! when did it happen?	i got laid off last week.
i got laid off last week.	just you?
just you?	no, ten of my coworkers got laid off, too.
no, ten of my coworkers got laid off, too.	what are you going to do?
what are you going to do?	i'm looking in the newspaper for a job.
i'm looking in the newspaper for a job.	good luck!
before you go to that interview, check yourself.	what's to check?
what's to check?	are your nails clean?
are your nails clean?	yes, they are.
yes, they are.	did you double-check your nose and teeth?
did you double-check your nose and teeth?	they are clean, too.
they are clean, too.	did you shine your shoes?
did you shine your shoes?	my shoes are shined.
my shoes are shined.	do your socks match?
do your socks match?	of course they match.
of course they match.	no, they don't. one is black and one is dark blue.
no, they don't. one is black and one is dark blue.	yikes! thank you.
life is hard.	it sure is.
it sure is.	i thought school was hard.
i thought school was hard.	me, too. i couldn't wait to graduate.
me, too. i couldn't wait to graduate.	but now work is hard, too.
but now work is hard, too.	i agree. work is just as hard as school.
i agree. work is just as hard as school.	sometimes i wish i was back in school.
sometimes i wish i was back in school.	me, too. school was fun.
me, too. school was fun.	and it was only 12 years.
and it was only 12 years.	it went by pretty fast.
it went by pretty fast.	but work goes on forever!
but work goes on forever!	we have to work for 30 years!
i'm sleepy.	so am i.
so am i.	i had a long day.
i had a long day.	so did i.
so did i.	i didn't even have lunch.
i didn't even have lunch.	neither did i.
neither did i.	i was busy the whole day.
i was busy the whole day.	so was i.
so was i.	i had to bring work home with me.
i had to bring work home with me.	i did too.
i did too.	your day was just like mine.
your day was just like mine.	of course it was. we work together!
i don't like my job.	what do you do?
what do you do?	i'm a babysitter.
i'm a babysitter.	is that a lot of work?
is that a lot of work?	babies cry all the time.
babies cry all the time.	you have to change their diapers.
you have to change their diapers.	i have to feed them.
i have to feed them.	are you looking for another job?
are you looking for another job?	no, i'm looking for another family.
no, i'm looking for another family.	another family?
another family?	a family with only one baby.
a family with only one baby.	that's a good idea.
i need a job.	what was your last job?
what was your last job?	i was a painter.
i was a painter.	what happened?
what happened?	i got laid off because there was no work.
i got laid off because there was no work.	what else can you do?
what else can you do?	i'm a handyman.
i'm a handyman.	can you fix a dripping faucet in a kitchen sink?
can you fix a dripping faucet in a kitchen sink?	of course.
of course.	then i have a job for you in my kitchen.
then i have a job for you in my kitchen.	it will cost you only $20 plus parts.
it will cost you only $20 plus parts.	okay. that sounds like a fair price.
what would you do if you lost your job?	i have no idea. i've been here for 20 years.
i have no idea. i've been here for 20 years.	do you have any other skills?
do you have any other skills?	well, i know how to flip hamburgers.
well, i know how to flip hamburgers.	no one would hire you to flip hamburgers.
no one would hire you to flip hamburgers.	have you heard something that you're not telling me?
have you heard something that you're not telling me?	what do you mean?
what do you mean?	are there going to be layoffs at this place?
are there going to be layoffs at this place?	i certainly hope not!
i certainly hope not!	if you got laid off, you'd be flipping hamburgers, too.
if you got laid off, you'd be flipping hamburgers, too.	oh great, we could both work at burger king.
oh great, we could both work at burger king.	maybe we'd get laid off there, too.
do your students ever talk about their jobs?	yes, and they ask me what jobs are the best.
yes, and they ask me what jobs are the best.	i tell my students to become a teacher.
i tell my students to become a teacher.	teaching is a great job.
teaching is a great job.	it's the best job i've ever had.
it's the best job i've ever had.	what makes it so good?
what makes it so good?	for me, it's the students.
for me, it's the students.	what do you mean?
what do you mean?	i mean i have wonderful students.
i mean i have wonderful students.	that must be nice.
that must be nice.	teaching is the best part of my whole day.
teaching is the best part of my whole day.	you're a lucky man to have a job you love.
boy, i'm glad that job is finished.	how long did it take?
how long did it take?	four hours, without a break.
four hours, without a break.	it's always nice to finish a job.
it's always nice to finish a job.	well, it's good and bad.
well, it's good and bad.	what's bad about it?
what's bad about it?	when you finish, all you do is start another job!
when you finish, all you do is start another job!	yes, that's right. it does get boring.
yes, that's right. it does get boring.	especially if it's the same work, over and over.
especially if it's the same work, over and over.	but that's what most people do.
but that's what most people do.	yes, i guess most of us are stuck in a routine.
yes, i guess most of us are stuck in a routine.	i wonder if there is any job that you don't repeat over and over.
i think i have the worst boss in the world.	what makes him so bad?
what makes him so bad?	he's rude and he yells a lot.
he's rude and he yells a lot.	that's hard to take.
that's hard to take.	i've never heard him say please or thank you.
i've never heard him say please or thank you.	he sounds like a real jerk.
he sounds like a real jerk.	no one at work likes him.
no one at work likes him.	can't you report him to his supervisor?
can't you report him to his supervisor?	of course not. if i do that, i'll lose my job.
of course not. if i do that, i'll lose my job.	yes, they don't like troublemakers or complainers.
yes, they don't like troublemakers or complainers.	i can't quit, because i'm making a good salary.
i can't quit, because i'm making a good salary.	you shouldn't choose money over happiness.
what are we going to do?	about what?
about what?	about finding a job for me.
about finding a job for me.	you don't need a job. i make enough money for both of us.
you don't need a job. i make enough money for both of us.	that doesn't matter. i don't want to sit around.
that doesn't matter. i don't want to sit around.	okay, what kind of job do you want?
okay, what kind of job do you want?	i'm not sure.
i'm not sure.	well, you should do something that you enjoy.
well, you should do something that you enjoy.	i enjoy selling. i was born to sell.
i enjoy selling. i was born to sell.	okay, what do you want to sell?
okay, what do you want to sell?	cigarette lighters. i'll make a fortune.
cigarette lighters. i'll make a fortune.	but you hate cigarettes and you hate smoking!
a new hotel is looking for workers.	yes, i saw it on the tv news.
yes, i saw it on the tv news.	they need 300 new workers.
they need 300 new workers.	and 4,000 people showed up.
and 4,000 people showed up.	so many people are out of work.
so many people are out of work.	i still have my job, thank goodness.
i still have my job, thank goodness.	so do i, but i'm worried.
so do i, but i'm worried.	me too. there are no guarantees.
me too. there are no guarantees.	if you lose your job, you can move in with me.
if you lose your job, you can move in with me.	oh, thank you. that's very nice of you.
oh, thank you. that's very nice of you.	you would do the same for me.
you would do the same for me.	of course. what are friends for?
i think i did something real stupid.	what did you do?
what did you do?	i bought some stock.
i bought some stock.	everybody buys stock.
everybody buys stock.	i bought it on a hunch.
i bought it on a hunch.	you didn't read about the company first?
you didn't read about the company first?	i didn't have to. it's been in business for 60 years.
i didn't have to. it's been in business for 60 years.	so what's the problem?
so what's the problem?	i used all my savings on this one company.
i used all my savings on this one company.	you put all your eggs into one basket.
you put all your eggs into one basket.	if the company goes out of business, i'll have nothing.
if the company goes out of business, i'll have nothing.	oh, you'll have somethingÂ—you'll have a lesson you'll never forget!
i was going to be a doctor.	what happened to your plans?
what happened to your plans?	i got a d in college chemistry.
i got a d in college chemistry.	well, a d is better than an f.
well, a d is better than an f.	a tutor helped me get the d!
a tutor helped me get the d!	so, you didn't become a doctor.
so, you didn't become a doctor.	and now i'm glad that i didn't.
and now i'm glad that i didn't.	why's that?
why's that?	a hospital is the most dangerous place in the world.
a hospital is the most dangerous place in the world.	oh, yes, because of all the killer germs.
oh, yes, because of all the killer germs.	if you're a smart doctor, you stay away from hospitals.
if you're a smart doctor, you stay away from hospitals.	yes, the smart doctors are those tv news doctorsÂ—no hospitals, no patients.
i want to be a mail carrier when i grow up.	why?
why?	because you get to meet a lot of people.
because you get to meet a lot of people.	you sure do.
you sure do.	and you get a lot of exercise every day.
and you get a lot of exercise every day.	that's the truth.
that's the truth.	and you get to play with a lot of dogs.
and you get to play with a lot of dogs.	well, you're supposed to be working.
well, you're supposed to be working.	yes, but i will always pet the friendly dogs.
yes, but i will always pet the friendly dogs.	what about the unfriendly dogs?
what about the unfriendly dogs?	i think if you are friendly to dogs, they are friendly to you.
i think if you are friendly to dogs, they are friendly to you.	dogs are like peopleÂ—not all of them are friendly.
i want to move to new york.	to the state or the city?
to the state or the city?	to the city, of course.
to the city, of course.	why do you want to move there?
why do you want to move there?	because i want to make a lot of money.
because i want to make a lot of money.	there are a lot of poor people in new york.
there are a lot of poor people in new york.	there sure areÂ—at least a million.
there sure areÂ—at least a million.	so how do you plan to become rich?
so how do you plan to become rich?	i will knock on the doors of all the corporations.
i will knock on the doors of all the corporations.	that won't make you rich. nobody will talk to you.
that won't make you rich. nobody will talk to you.	i will keep knocking on doors.
i will keep knocking on doors.	all you will get is sore knuckles.
i love salads.	me too.
me too.	i usually eat a simple salad.
i usually eat a simple salad.	what do you put in it?
what do you put in it?	just lettuce, tomato, and celery.
just lettuce, tomato, and celery.	that's it?
that's it?	i add some pepper and salt.
i add some pepper and salt.	i always put cheese in my salads.
i always put cheese in my salads.	yes, cheese is nice.
yes, cheese is nice.	what kind of dressing do you use?
what kind of dressing do you use?	i pour lots of french dressing on top.
i pour lots of french dressing on top.	me too. french dressing is so delicious! who cares about calories?
i love cheese.	me too.
me too.	where does cheese come from?
where does cheese come from?	it comes from cows.
it comes from cows.	so we get cheese from cows, and we get milk, too?
so we get cheese from cows, and we get milk, too?	yes, we do.
yes, we do.	what else do we get from cows?
what else do we get from cows?	we get hamburgers and steak.
we get hamburgers and steak.	oh, that's so delicious.
oh, that's so delicious.	we also get leather.
we also get leather.	we get a lot of things from cows, don't we?
we get a lot of things from cows, don't we?	yes. a cow is man's best friend.
i used to work in a deli.	how did you like it?
how did you like it?	i loved it!
i loved it!	did you get free food?
did you get free food?	i ate free cheese and meat every day.
i ate free cheese and meat every day.	that sounds like a great job.
that sounds like a great job.	whatever a customer ordered, i sliced off a little more for me.
whatever a customer ordered, i sliced off a little more for me.	did you get fat?
did you get fat?	no, but i did put on a few pounds.
no, but i did put on a few pounds.	that sounds like a dream job.
that sounds like a dream job.	it was, until one day my manager caught me.
it was, until one day my manager caught me.	no more free cheese for you, huh?
i'm on a new diet.	what are you eating now?
what are you eating now?	i switched from pasta to potatoes.
i switched from pasta to potatoes.	why did you do that?
why did you do that?	pasta is processed food. potatoes are natural food.
pasta is processed food. potatoes are natural food.	natural food has more vitamins.
natural food has more vitamins.	and it's just as easy to prepare.
and it's just as easy to prepare.	how do you prepare the potatoes?
how do you prepare the potatoes?	i wash them, and then steam them for 15 minutes.
i wash them, and then steam them for 15 minutes.	that's pretty simple.
that's pretty simple.	then i add butter, salt, and pepper.
then i add butter, salt, and pepper.	can i have all those cans of tomato sauce you bought for your pasta?
my girlfriend's mom got mad at me at the dinner table.	why was that?
why was that?	i sprinkled salt and pepper on the food before i tasted it.
i sprinkled salt and pepper on the food before i tasted it.	what's the matter with that?
what's the matter with that?	her mom is a great cook.
her mom is a great cook.	so, a little salt and pepper never hurt anything.
so, a little salt and pepper never hurt anything.	it hurt her feelings.
it hurt her feelings.	oh.
oh.	i apologized to her, but i could tell she was still upset.
i apologized to her, but i could tell she was still upset.	maybe you shouldn't eat there again.
maybe you shouldn't eat there again.	i'm sure everything will be okay in a day or two.
i'm sure everything will be okay in a day or two.	it's your girlfriend's fault. she should have warned you.
i eat the same thing every day.	you're kidding.
you're kidding.	no, i'm serious.
no, i'm serious.	doesn't that get old?
doesn't that get old?	no, because i'm eating food that i like.
no, because i'm eating food that i like.	but the same thing day after day gets old.
but the same thing day after day gets old.	well, i guess if it ever does get old, i'll change to something different.
well, i guess if it ever does get old, i'll change to something different.	do you eat fruits and vegetables every day?
do you eat fruits and vegetables every day?	no, i hate vegetables.
no, i hate vegetables.	but you eat fruits.
but you eat fruits.	i eat two apples, one banana, and one orange every day.
i eat two apples, one banana, and one orange every day.	well, there's nothing wrong with that.
there's something wrong with my orange.	what's wrong?
what's wrong?	it's not orange!
it's not orange!	your orange isn't orange?
your orange isn't orange?	no, it's dark pink!
no, it's dark pink!	are you sure? i never heard of such a thing.
are you sure? i never heard of such a thing.	i just peeled it, and i'm looking at it right now.
i just peeled it, and i'm looking at it right now.	let me see. yes, you're right. your orange is pink.
let me see. yes, you're right. your orange is pink.	who ever heard of such a thing?
who ever heard of such a thing?	oh, look. here's the little sticker that was on it. it's called a pink navel.
oh, look. here's the little sticker that was on it. it's called a pink navel.	what is this world coming to?
what is this world coming to?	who knows? maybe soon we'll have pink bananas.
i love peanuts.	me, too. i love them roasted and salted.
me, too. i love them roasted and salted.	i love boiled peanuts.
i love boiled peanuts.	boiled? i never heard of that.
boiled? i never heard of that.	just boil raw peanuts in salt water until the shells are soft.
just boil raw peanuts in salt water until the shells are soft.	i'll have to try them sometime.
i'll have to try them sometime.	they're best when they're hot.
they're best when they're hot.	my brother is allergic to peanuts.
my brother is allergic to peanuts.	that's not good.
that's not good.	no, it isn't. he almost died when he was little.
no, it isn't. he almost died when he was little.	i guess he has to be very careful about what he eats.
i guess he has to be very careful about what he eats.	he has a very strict diet.
i'm gaining weight.	how much have you gained?
how much have you gained?	three pounds just this month.
three pounds just this month.	do you know why?
do you know why?	i think it's the ice cream.
i think it's the ice cream.	you started eating ice cream?
you started eating ice cream?	it was on sale.
it was on sale.	how much did you buy?
how much did you buy?	i filled up my freezer with ice cream.
i filled up my freezer with ice cream.	well, it won't last forever.
well, it won't last forever.	no, i figure i'll finish it all by next week.
no, i figure i'll finish it all by next week.	then you can start losing weight, if there isn't another sale.
i'm stuffed.	of course you are. you ate everything on the table.
of course you are. you ate everything on the table.	i don't like to eat leftovers.
i don't like to eat leftovers.	i'm glad to hear there's something you don't like to eat.
i'm glad to hear there's something you don't like to eat.	i like my food hot and fresh.
i like my food hot and fresh.	you like to see it disappear.
you like to see it disappear.	i don't like it reheated.
i don't like it reheated.	well, you'll have hot fresh food tomorrow night.
well, you'll have hot fresh food tomorrow night.	i'm so full i'm going to burst.
i'm so full i'm going to burst.	you should loosen your belt.
you should loosen your belt.	i already loosened my belt and unbuttoned my pants.
i already loosened my belt and unbuttoned my pants.	well, don't stand up, please.
i saw what you did.	i didn't do anything.
i didn't do anything.	oh yes, you did.
oh yes, you did.	what are you talking about?
what are you talking about?	you know what i'm talking about.
you know what i'm talking about.	i don't have any idea.
i don't have any idea.	you know what you did.
you know what you did.	maybe i know, but how could you know?
maybe i know, but how could you know?	because i was watching you.
because i was watching you.	okay, i'm sorry i did it.
okay, i'm sorry i did it.	don't drink milk out of the carton. use a glass!
don't drink milk out of the carton. use a glass!	i promise i'll never drink out of the carton again.
i like that shirt.	so do i.
so do i.	how much is it?
how much is it?	i don't know. the tag is missing.
i don't know. the tag is missing.	ask the clerk.
ask the clerk.	i will.
i will.	oh, look. here's another shirt just like it.
oh, look. here's another shirt just like it.	does it have a price tag?
does it have a price tag?	yes, it does. it's only $20.
yes, it does. it's only $20.	that's a great price.
that's a great price.	i think i'll buy both of them.
i think i'll buy both of them.	you'd better try them on first.
i bought you a pair of pants.	thank you.
thank you.	i hope they fit.
i hope they fit.	i hope you kept the receipt.
i hope you kept the receipt.	you think they won't fit?
you think they won't fit?	i think i've put on some weight.
i think i've put on some weight.	you think?
you think?	maybe a pound or two.
maybe a pound or two.	maybe four or five pounds?
maybe four or five pounds?	my waist is bigger than it was.
my waist is bigger than it was.	no problem. these pants have an elastic waistband.
no problem. these pants have an elastic waistband.	you are so smart!
what do we need to buy?	let me look at our list.
let me look at our list.	i know that we need milk.
i know that we need milk.	nonfat.
nonfat.	of course. what else?
of course. what else?	we need cheese, bread, and ham.
we need cheese, bread, and ham.	what kind of cheese?
what kind of cheese?	swiss.
swiss.	of course, the cheese with holes in it.
of course, the cheese with holes in it.	i never used to buy swiss cheese.
i never used to buy swiss cheese.	why not?
why not?	i didn't want to pay for the holes.
i need some pants.	i thought you just bought a pair.
i thought you just bought a pair.	i did.
i did.	what's wrong with them so soon?
what's wrong with them so soon?	the pants are fine, but the pocket has a huge hole in it.
the pants are fine, but the pocket has a huge hole in it.	you shouldn't carry your keys and pens in your pocket.
you shouldn't carry your keys and pens in your pocket.	but that's what pockets are for.
but that's what pockets are for.	you should carry them in a purse.
you should carry them in a purse.	i'm a man, and men don't carry purses!
i'm a man, and men don't carry purses!	well, you should buy pants with stronger pockets.
well, you should buy pants with stronger pockets.	i would if i could find someone who makes strong pockets.
i would if i could find someone who makes strong pockets.	try a google search online.
what are those wipes for?	you use them to wipe the handle of the shopping cart.
you use them to wipe the handle of the shopping cart.	that's a great idea.
that's a great idea.	yes, all the markets just started offering wipes to shoppers.
yes, all the markets just started offering wipes to shoppers.	i'm going to take five wipes.
i'm going to take five wipes.	what do you need five of them for?
what do you need five of them for?	one to wipe the handle, and the others to wipe the produce.
one to wipe the handle, and the others to wipe the produce.	what's the matter with the produce?
what's the matter with the produce?	do you think the bananas fell from the sky?
do you think the bananas fell from the sky?	what do you mean?
what do you mean?	i mean, someone used their dirty hands to pick the bananas, the apples, and the oranges.
i mean, someone used their dirty hands to pick the bananas, the apples, and the oranges.	well, you better save a wipe for the dirty dollar bills you're going to pay with.
did you go to the 99 cents store?	yes, i did.
yes, i did.	what did you buy?
what did you buy?	well, i got a lot of good deals, as usual.
well, i got a lot of good deals, as usual.	like what?
like what?	well, a dozen large eggs were only 99 cents.
well, a dozen large eggs were only 99 cents.	that's a good deal.
that's a good deal.	and a one-pound tub of soft butter was the same price.
and a one-pound tub of soft butter was the same price.	another good deal.
another good deal.	but the best deal was five pounds of potatoes for 99 cents.
but the best deal was five pounds of potatoes for 99 cents.	i don't know how that store makes money.
i don't know how that store makes money.	neither do i, but they're doing something right.
i need a new computer.	what's the matter with yours?
what's the matter with yours?	it's six years old.
it's six years old.	that's pretty old.
that's pretty old.	it still works, but i'm going to give it to a charity.
it still works, but i'm going to give it to a charity.	are you going to buy a desktop or laptop?
are you going to buy a desktop or laptop?	oh, a laptop, of course.
oh, a laptop, of course.	a pc or a mac?
a pc or a mac?	i haven't decided yet.
i haven't decided yet.	more and more people are using macs.
more and more people are using macs.	but 90 percent of the world uses pcs.
but 90 percent of the world uses pcs.	and that's not going to change anytime soon.
i got ripped off.	what happened?
what happened?	i had a car problem, so i went online.
i had a car problem, so i went online.	did you find a solution?
did you find a solution?	yes, i did. a site i went to said they would send me the solution.
yes, i did. a site i went to said they would send me the solution.	so, what's the problem?
so, what's the problem?	i sent them $20 using my credit card, but they never sent me the solution.
i sent them $20 using my credit card, but they never sent me the solution.	what are you going to do?
what are you going to do?	i sent them an email asking for my money back.
i sent them an email asking for my money back.	have you heard from them?
have you heard from them?	not yet. it's been a week.
not yet. it's been a week.	well, i guess that's a $20 lesson for you.
where's the pencil sharpener?	which one?
which one?	any one. i need to sharpen this pencil.
any one. i need to sharpen this pencil.	i think there's one on the dining room table.
i think there's one on the dining room table.	i already looked there.
i already looked there.	did you look in the desk drawer?
did you look in the desk drawer?	yes, i looked there, too.
yes, i looked there, too.	don't we have about five sharpeners?
don't we have about five sharpeners?	yes, but they seem to have legs.
yes, but they seem to have legs.	tomorrow i'm going to buy an electric sharpener.
tomorrow i'm going to buy an electric sharpener.	get one with the rubber suction cups on the bottom.
get one with the rubber suction cups on the bottom.	yes. that way it will stay where i put it.
i'm trying to stretch my dollars.	how are you doing that?
how are you doing that?	i started shopping at the dollar store.
i started shopping at the dollar store.	that saves a lot of money.
that saves a lot of money.	i bought three pounds of potatoes for a dollar.
i bought three pounds of potatoes for a dollar.	that's a good deal.
that's a good deal.	yes, even though some of the potatoes had eyes.
yes, even though some of the potatoes had eyes.	just put them in the fridge.
just put them in the fridge.	also, i bought a can of cheap coffee and a bag of good coffee.
also, i bought a can of cheap coffee and a bag of good coffee.	why did you do that?
why did you do that?	i mixed them together.
i mixed them together.	if the coffee still tastes okay, that's a good idea.
i really like this house.	can we afford it?
can we afford it?	they want 20 percent down.
they want 20 percent down.	that's a lot of money.
that's a lot of money.	but the house is so nice.
but the house is so nice.	it's in a great neighborhood.
it's in a great neighborhood.	it's close to the beach.
it's close to the beach.	it's close to the freeways.
it's close to the freeways.	it's got a big yard.
it's got a big yard.	the kids love the house, too.
the kids love the house, too.	if we don't buy it, someone else will.
if we don't buy it, someone else will.	you're right. let's buy it now. we can worry later.
we can't afford this house.	are you sure?
are you sure?	we will be house rich, but cash poor.
we will be house rich, but cash poor.	what do you mean?
what do you mean?	our monthly payments will be too high.
our monthly payments will be too high.	we won't have any money for other things?
we won't have any money for other things?	no, we won't have money for gas or food.
no, we won't have money for gas or food.	we'll be eating peanut butter sandwiches?
we'll be eating peanut butter sandwiches?	without the peanut butter!
without the peanut butter!	that's no good!
that's no good!	we have to find a cheaper house.
we have to find a cheaper house.	of course. we can't live without gas or peanut butter.
that is a beautiful house.	i don't like it.
i don't like it.	what's the matter with it?
what's the matter with it?	it's on the corner.
it's on the corner.	so?
so?	that means it gets twice as much traffic.
that means it gets twice as much traffic.	you're right.
you're right.	when you're inside, you will always hear cars stopping and stopping at the intersection.
when you're inside, you will always hear cars stopping and stopping at the intersection.	or you'll hear the collision if someone doesn't stop.
or you'll hear the collision if someone doesn't stop.	or you'll see the collision if they crash into the house.
or you'll see the collision if they crash into the house.	let's find a house that's at the end of a dead end.
let's find a house that's at the end of a dead end.	that's perfect. the less traffic, the better.
i hate looking for an apartment.	me, too.
me, too.	we have a 2 o'clock appointment to see the one on main street.
we have a 2 o'clock appointment to see the one on main street.	we'd better get ready to go.
we'd better get ready to go.	it's an upstairs unit.
it's an upstairs unit.	that's good, because i don't want to live under people with loud feet.
that's good, because i don't want to live under people with loud feet.	and it's a corner unit.
and it's a corner unit.	that's great. we won't have neighbors on both sides of us.
that's great. we won't have neighbors on both sides of us.	no pets are allowed.
no pets are allowed.	perfect. we don't have to listen to barking dogs.
perfect. we don't have to listen to barking dogs.	and there are only six units in the whole building.
and there are only six units in the whole building.	where's the checkbook? i'm ready to rent it without even seeing it.
did you call the manager?	yes. he said he'd come over tomorrow.
yes. he said he'd come over tomorrow.	did he say what time?
did he say what time?	yes. he said he'd be here at 9 o'clock.
yes. he said he'd be here at 9 o'clock.	did he understand what the problem is?
did he understand what the problem is?	yes. i told him our doorbell doesn't work.
yes. i told him our doorbell doesn't work.	it shouldn't take him long to fix it.
it shouldn't take him long to fix it.	i don't even know why we need to fix it.
i don't even know why we need to fix it.	in case we have visitors.
in case we have visitors.	but they can just knock on the door.
but they can just knock on the door.	actually, i want him to look at our carpet, too.
actually, i want him to look at our carpet, too.	yes, it would be nice if he'd give us a new carpet.
do you like this house?	yes, it's beautiful.
yes, it's beautiful.	it's perfect for us and the kids.
it's perfect for us and the kids.	three bedrooms, three bathrooms, and a big back yard.
three bedrooms, three bathrooms, and a big back yard.	and we can afford it!
and we can afford it!	so are we going to buy it?
so are we going to buy it?	i'm afraid not.
i'm afraid not.	it's too far from your job, isn't it?
it's too far from your job, isn't it?	i can't spend four hours on the road every day.
i can't spend four hours on the road every day.	by the time you get home, you'll be too tired to even eat.
by the time you get home, you'll be too tired to even eat.	i won't be able to play with the kids.
i won't be able to play with the kids.	no, we have to find something closer to your job.
boy, it's chilly outside, isn't it?	it sure is.
it sure is.	in fact, it's chilly in the apartment, too.
in fact, it's chilly in the apartment, too.	let's turn on the heat.
let's turn on the heat.	i'll check to make sure that all the windows are shut.
i'll check to make sure that all the windows are shut.	it should be warmer in a few minutes.
it should be warmer in a few minutes.	it's so nice to have a heated apartment.
it's so nice to have a heated apartment.	how did they survive in the old days?
how did they survive in the old days?	they had fireplaces.
they had fireplaces.	someone had to chop the wood.
someone had to chop the wood.	and carry it into the house.
and carry it into the house.	all we have to do is flip a switch.
this is a nice neighborhood.	the streets are clean and quiet.
the streets are clean and quiet.	the neighbors don't party on the weekends.
the neighbors don't party on the weekends.	people take care of their lawns.
people take care of their lawns.	no rusty old cars are sitting in the front yards.
no rusty old cars are sitting in the front yards.	we never have to call the police about anything.
we never have to call the police about anything.	our kids are completely safe.
our kids are completely safe.	so why are we selling our house?
so why are we selling our house?	they're building a 3-story apartment building on the corner.
they're building a 3-story apartment building on the corner.	so we've got to sell before property values go down?
so we've got to sell before property values go down?	yes. i still can't believe our city council allowed this building.
yes. i still can't believe our city council allowed this building.	they're probably getting something under the table.
that was a huge fire in santa barbara.	yes, it was.
yes, it was.	they said about 30 houses burned to the ground.
they said about 30 houses burned to the ground.	and they were expensive houses.
and they were expensive houses.	i feel so sorry for those people.
i feel so sorry for those people.	why feel sorry for rich people?
why feel sorry for rich people?	i feel sorry for anyone who loses their home.
i feel sorry for anyone who loses their home.	so do i, but not if they're rich.
so do i, but not if they're rich.	what does that have to do with it?
what does that have to do with it?	rich people think they're better than us.
rich people think they're better than us.	how many rich people do you know?
how many rich people do you know?	none.
bears are invading our neighborhoods.	of course they are. they're starving to death.
of course they are. they're starving to death.	they should stay in the woods where they belong.
they should stay in the woods where they belong.	there's no food in the woods.
there's no food in the woods.	can't they eat grass?
can't they eat grass?	do you think a bear is a cow?
do you think a bear is a cow?	well, i've seen them eating berries.
well, i've seen them eating berries.	berries aren't in season all year round.
berries aren't in season all year round.	it's too dangerous for kids and pets.
it's too dangerous for kids and pets.	people need to cover their trash cans.
people need to cover their trash cans.	the police need to shoot all the bears.
the police need to shoot all the bears.	you don't solve a problem by shooting it.
who did you vote for?	i voted for obama.
i voted for obama.	me too.
me too.	he will be a great president.
he will be a great president.	everyone likes him.
everyone likes him.	he's a good speaker.
he's a good speaker.	and he's really smart.
and he's really smart.	he will solve our problems.
he will solve our problems.	he will end the war.
he will end the war.	the next four years will be good years.
the next four years will be good years.	i'll vote for him next time, too.
i'll vote for him next time, too.	i think everyone will.
the election is next week.	who are you voting for?
who are you voting for?	i'm not voting for the mayor.
i'm not voting for the mayor.	why not?
why not?	he made promises that he didn't keep.
he made promises that he didn't keep.	like what?
like what?	he promised to hire 1,000 more police officers.
he promised to hire 1,000 more police officers.	how many did he hire?
how many did he hire?	one hundred!
one hundred!	maybe he had a good reason.
maybe he had a good reason.	maybe he's just a liar.
maybe he's just a liar.	maybe i'll vote for someone else, too.
i can't believe he won the election.	only 15 percent of the voters turned out.
only 15 percent of the voters turned out.	that is a joke.
that is a joke.	voting is so important, but people don't bother.
voting is so important, but people don't bother.	many people think their vote doesn't matter.
many people think their vote doesn't matter.	the mayor won by only 2,000 votes.
the mayor won by only 2,000 votes.	we're stuck with him for four more years.
we're stuck with him for four more years.	voting is so easy. you can even mail your ballot in.
voting is so easy. you can even mail your ballot in.	all you have to do is vote and put a stamp on it.
all you have to do is vote and put a stamp on it.	how easy is that?
how easy is that?	i guess people just don't care.
i guess people just don't care.	they'll care when they see their taxes go up.
well, we have a new president.	but we have the same old problems.
but we have the same old problems.	well, he's made a few changes.
well, he's made a few changes.	like what?
like what?	i think he closed the bowling alley in the white house.
i think he closed the bowling alley in the white house.	oh, yeah. he's changing it to a basketball court.
oh, yeah. he's changing it to a basketball court.	who's paying for that?
who's paying for that?	i think we are!
i think we are!	well, that's okay, as long as it helps him relax and think more clearly.
well, that's okay, as long as it helps him relax and think more clearly.	yes, we need a relaxed president who thinks clearly.
yes, we need a relaxed president who thinks clearly.	do any other world leaders have a basketball court?
do any other world leaders have a basketball court?	they will. you know america always leads the way.
people say that everybody loves obama.	well, more than 50 million people voted for mccain.
well, more than 50 million people voted for mccain.	that's 50 million people who don't love obama.
that's 50 million people who don't love obama.	obama's got four years to make everyone happy.
obama's got four years to make everyone happy.	he's never going to make everyone happy.
he's never going to make everyone happy.	can you imagine being president?
can you imagine being president?	everyone wants you to solve their problems.
everyone wants you to solve their problems.	i have enough stress from trying to solve my own problems.
i have enough stress from trying to solve my own problems.	you and everybody else.
you and everybody else.	i would never want to be president.
i would never want to be president.	but think about all the power you'd have.
but think about all the power you'd have.	i prefer my quiet little life to all the power in the world.
did you read this article?	what article?
what article?	it says the mayor spends only 11 percent of his time on city duties.
it says the mayor spends only 11 percent of his time on city duties.	only 11 percent?
only 11 percent?	about 50 percent of the time he's traveling.
about 50 percent of the time he's traveling.	where does he travel to?
where does he travel to?	oh, all over the world.
oh, all over the world.	but he's supposed to be making our city a better place.
but he's supposed to be making our city a better place.	he's visiting other cities to get ideas.
he's visiting other cities to get ideas.	can't he just go online?
can't he just go online?	the rest of the time he's raising money for his reelection.
the rest of the time he's raising money for his reelection.	well, he'll never get reelected once this news gets out.
who did you vote for for president?	i voted for ralph nader.
i voted for ralph nader.	who in the world is ralph nader?
who in the world is ralph nader?	he's the best man for president.
he's the best man for president.	why's that?
why's that?	he hates corporations.
he hates corporations.	well, most corporations do think only about money.
well, most corporations do think only about money.	he hates democrats and republicans.
he hates democrats and republicans.	well, they do put their party before their country.
well, they do put their party before their country.	he's the only candidate that i trust.
he's the only candidate that i trust.	but he didn't have a chance. nobody voted for him!
but he didn't have a chance. nobody voted for him!	sooner or later, voters will wake up.
i don't know why i bother to vote.	why's that?
why's that?	what good does it do?
what good does it do?	you get to put someone in power that you like.
you get to put someone in power that you like.	only if my candidate wins.
only if my candidate wins.	well, he can't win unless you and others vote for him.
well, he can't win unless you and others vote for him.	but even if my candidate wins, he'll break his promises.
but even if my candidate wins, he'll break his promises.	that's true. they promise anything just so they get elected.
that's true. they promise anything just so they get elected.	and when elected, they go their own way.
and when elected, they go their own way.	they forget who put them in power.
they forget who put them in power.	they forget where they came from.
they forget where they came from.	maybe you should run for office.
that election for u.s. senator stunk.	what do you mean?
what do you mean?	there were more votes than voters!
there were more votes than voters!	but that's impossible.
but that's impossible.	officials said that it's possible.
officials said that it's possible.	did they explain how it's possible?
did they explain how it's possible?	no. they said there are some things you can't explain.
no. they said there are some things you can't explain.	so are they going to hold another election?
so are they going to hold another election?	no. that will cost too much money.
no. that will cost too much money.	so it's better to save money than to have an honest election?
so it's better to save money than to have an honest election?	well, the democratic party says it was an honest election.
well, the democratic party says it was an honest election.	of course they say thatÂ—their man won!
i see that former president bush is at a conference.	yes. he's telling jokes about his eight years as president.
yes. he's telling jokes about his eight years as president.	yes, those eight years were a lot of fun for everyone.
yes, those eight years were a lot of fun for everyone.	only 4,000 american soldiers were killed overseas.
only 4,000 american soldiers were killed overseas.	not to mention 40,000 wounded soldiers.
not to mention 40,000 wounded soldiers.	but bush visited some of them in the hospital once.
but bush visited some of them in the hospital once.	that's nice that he found the time to make a visit.
that's nice that he found the time to make a visit.	he spoke to them and made them feel better.
he spoke to them and made them feel better.	did he speak to every family that lost a soldier?
did he speak to every family that lost a soldier?	no, he didn't have time to do that.
no, he didn't have time to do that.	well, he's got plenty of time now!
well, he's got plenty of time now!	no, he's too busy writing a book about how hard it was to be president.
did you get your official sample ballot?	yes, with the voter instructions.
yes, with the voter instructions.	how are you going to vote?
how are you going to vote?	same as ever, by mail. all it costs me is a 42-cent stamp.
same as ever, by mail. all it costs me is a 42-cent stamp.	i meant, are you going to vote for or against the new taxes?
i meant, are you going to vote for or against the new taxes?	against all of them, of course.
against all of them, of course.	but we need new taxes to pay for highways, schools, and prisons.
but we need new taxes to pay for highways, schools, and prisons.	we've already voted for new taxes to pay for all that stuff!
we've already voted for new taxes to pay for all that stuff!	that's true. where did that money go?
that's true. where did that money go?	our legislators spent it on first-class travel all over the world.
our legislators spent it on first-class travel all over the world.	they are having a good time with our money.
they are having a good time with our money.	so when are we going to stop giving them more?
have you decided how you are going to vote?	do you mean on measures 1, 2, and 3?
do you mean on measures 1, 2, and 3?	yes. the ones that will improve our schools, roads, and hospitals.
yes. the ones that will improve our schools, roads, and hospitals.	you mean the measures that will raise our taxes.
you mean the measures that will raise our taxes.	but the tv ads say that our taxes will not increase.
but the tv ads say that our taxes will not increase.	do you believe the tv ads?
do you believe the tv ads?	i like the one where the fireman tells us why we should vote yes.
i like the one where the fireman tells us why we should vote yes.	don't believe him! whatever the tv ads tell you, the opposite is true.
don't believe him! whatever the tv ads tell you, the opposite is true.	but the title of measure 1 is "better schools at no cost."
but the title of measure 1 is "better schools at no cost."	the title should be "better schools at huge cost."
the title should be "better schools at huge cost."	i can't believe that they would lie to us.
i can't believe that they would lie to us.	of course they lieÂ—that's what politicians do!
i have a stomachache.	is it something you ate?
is it something you ate?	maybe. i'm not sure.
maybe. i'm not sure.	what did you have for breakfast?
what did you have for breakfast?	the usual, cereal with milk and a banana.
the usual, cereal with milk and a banana.	maybe the milk was bad.
maybe the milk was bad.	it didn't smell bad.
it didn't smell bad.	maybe the banana was bad.
maybe the banana was bad.	no, the banana was delicious.
no, the banana was delicious.	maybe you just need to go to the bathroom.
maybe you just need to go to the bathroom.	no, that's not the problem.
no, that's not the problem.	maybe it will go away in a little while.
what's this stain?	i don't know.
i don't know.	it looks like blood.
it looks like blood.	i think my nose was bleeding.
i think my nose was bleeding.	you should wet your shirt immediately.
you should wet your shirt immediately.	why?
why?	because that gets the blood out of the shirt.
because that gets the blood out of the shirt.	what's a little blood?
what's a little blood?	your white shirt is ruined.
your white shirt is ruined.	so, i'll just buy another one.
so, i'll just buy another one.	you can wear this one around the house.
you can wear this one around the house.	next time i'll soak it immediately.
my fingers hurt.	why do they hurt?
why do they hurt?	i type too much.
i type too much.	you should take a break.
you should take a break.	i need to type to make money.
i need to type to make money.	but typing is causing you pain.
but typing is causing you pain.	maybe i should see a doctor.
maybe i should see a doctor.	doctors are too expensive.
doctors are too expensive.	he might tell me to rest for a while.
he might tell me to rest for a while.	he might want to cut you open.
he might want to cut you open.	he might say i'm okay.
he might say i'm okay.	he might say you have bone cancer.
what did the doctor say?	he thinks i have too much stress.
he thinks i have too much stress.	stress causes your stomachaches?
stress causes your stomachaches?	stress causes different problems with different people.
stress causes different problems with different people.	so what did he tell you to do?
so what did he tell you to do?	he said i need to think positive.
he said i need to think positive.	he didn't give you any medication?
he didn't give you any medication?	i hate medication. it makes me feel different.
i hate medication. it makes me feel different.	so how do you think positive?
so how do you think positive?	i think about nice things.
i think about nice things.	like what?
like what?	like a day at the beach, with my toes in the sand.
i cut my finger.	how did you do that?
how did you do that?	it's a paper cut.
it's a paper cut.	paper can be dangerous.
paper can be dangerous.	it hurts, too.
it hurts, too.	paper cuts can hurt a lot.
paper cuts can hurt a lot.	where are the band-aids?
where are the band-aids?	i think they're in the medicine cabinet.
i think they're in the medicine cabinet.	it's on the tip of my finger.
it's on the tip of my finger.	a band-aid might not work.
a band-aid might not work.	i must not use this finger until the cut heals.
i must not use this finger until the cut heals.	it might take a day or two to heal.
do you smell that?	oh, yes.
oh, yes.	i can't stand cigarette smoke.
i can't stand cigarette smoke.	it smells so bad.
it smells so bad.	one cigarette stinks up the whole sidewalk.
one cigarette stinks up the whole sidewalk.	smokers think they are so cool.
smokers think they are so cool.	they are so weak.
they are so weak.	a little cigarette controls them.
a little cigarette controls them.	they look so stupid taking a puff.
they look so stupid taking a puff.	and then they blow smoke out of their mouth.
and then they blow smoke out of their mouth.	they think it's cool.
they think it's cool.	cigarettes stink.
do you have a cold?	yes, i do.
yes, i do.	how did you get it?
how did you get it?	my sister had a cold. she gave it to me.
my sister had a cold. she gave it to me.	have you taken anything for your cold?
have you taken anything for your cold?	no, i just blow my nose a lot.
no, i just blow my nose a lot.	your nose is stopped up?
your nose is stopped up?	yes. i have to breathe through my mouth.
yes. i have to breathe through my mouth.	have you tried nose drops?
have you tried nose drops?	no, i don't like nose drops.
no, i don't like nose drops.	they work great.
they work great.	i don't care. i don't like to put drops in my nose.
would you put suntan lotion on my back, please?	sure.
sure.	thank you.
thank you.	you shouldn't lie in the sun for too long.
you shouldn't lie in the sun for too long.	i want to get a tan. i don't want to look so pale.
i want to get a tan. i don't want to look so pale.	what's wrong with looking pale?
what's wrong with looking pale?	people think you might be sick.
people think you might be sick.	who thinks that?
who thinks that?	i don't know.
i don't know.	it's better to be pale than to have skin cancer.
it's better to be pale than to have skin cancer.	i know that.
i know that.	so why are you arguing with me? don't lie in the sun too long!
i can't quit smoking.	of course you can.
of course you can.	i don't have enough will power.
i don't have enough will power.	of course you do.
of course you do.	i wish i had never started.
i wish i had never started.	so does every smoker.
so does every smoker.	i've tried to quit so many times.
i've tried to quit so many times.	so has everyone else.
so has everyone else.	nothing seems to work.
nothing seems to work.	all it takes is will power, and you have it.
all it takes is will power, and you have it.	then why can't i quit?
then why can't i quit?	you have to believe in yourself.
my back is killing me.	what did you do?
what did you do?	i got out of my car.
i got out of my car.	that's it?
that's it?	i injured my back one time just by sneezing.
i injured my back one time just by sneezing.	you should see a doctor.
you should see a doctor.	my doctor said i need surgery.
my doctor said i need surgery.	so?
so?	so, forget it.
so, forget it.	you don't have the money?
you don't have the money?	i have no insurance.
i have no insurance.	maybe a back rub would help.
my brother smokes three packs a day.	three packs of what?
three packs of what?	cigarettes, of course.
cigarettes, of course.	how can he do that?
how can he do that?	when he is almost finished with one cigarette, he uses it to light another.
when he is almost finished with one cigarette, he uses it to light another.	he's a chain smoker.
he's a chain smoker.	he's been a chain smoker for 30 years.
he's been a chain smoker for 30 years.	that's unbelievable. can he still breathe?
that's unbelievable. can he still breathe?	he can, but the people around him can't.
he can, but the people around him can't.	how can he still be alive?
how can he still be alive?	his doctor says his heart and lungs are strong and healthy.
his doctor says his heart and lungs are strong and healthy.	maybe i should start smoking.
i hate brushing my teeth.	it's such a chore.
it's such a chore.	brush, brush. spit, spit.
brush, brush. spit, spit.	what did they do in the old days?
what did they do in the old days?	they brushed with their fingers.
they brushed with their fingers.	they also ate with their fingers!
they also ate with their fingers!	why do they call it the good old days?
why do they call it the good old days?	maybe because they didn't have to brush and floss.
maybe because they didn't have to brush and floss.	who invented flossing?
who invented flossing?	a dentist, i'm sure.
a dentist, i'm sure.	i hate flossing more than brushing!
i hate flossing more than brushing!	i can't wait till all my teeth fall out.
let's stop for a while. i need a break and some water.	this trail is hard to climb.
this trail is hard to climb.	especially on a hot day like this.
especially on a hot day like this.	i can't believe we haven't seen any animals.
i can't believe we haven't seen any animals.	thank goodness! i don't want to see any wild animals.
thank goodness! i don't want to see any wild animals.	all we've seen so far is a couple of lizards.
all we've seen so far is a couple of lizards.	we're hiking to lose weight, not to see goats and bears.
we're hiking to lose weight, not to see goats and bears.	i bet i've lost a couple of pounds already.
i bet i've lost a couple of pounds already.	all you've lost is some sweat.
all you've lost is some sweat.	i haven't even lost one pound of fat?
i haven't even lost one pound of fat?	if you want to lose fat, you've got to do this hike every day.
if you want to lose fat, you've got to do this hike every day.	okay, but let's hike in town. at least there are cats and dogs to see.
oh no, another pimple on my face.	pimples suck.
pimples suck.	it seems like i get a new pimple almost every day.
it seems like i get a new pimple almost every day.	maybe it's something in your diet.
maybe it's something in your diet.	no, i eat the same things day after day.
no, i eat the same things day after day.	then maybe it's in your genes.
then maybe it's in your genes.	you might be right.
you might be right.	do pimples run in your family?
do pimples run in your family?	not that i've noticed.
not that i've noticed.	well, maybe it's from the pollution in the air.
well, maybe it's from the pollution in the air.	whatever the cause, i hate seeing them on my face.
whatever the cause, i hate seeing them on my face.	well, on the bright side, they're fun to pop.
do you believe everything you hear?	i don't believe anything i don't see with my own eyes.
i don't believe anything i don't see with my own eyes.	you can't believe what you hear on tv or radio.
you can't believe what you hear on tv or radio.	you can't believe what you read in the newspapers.
you can't believe what you read in the newspapers.	everyone tells you a different story about the same thing.
everyone tells you a different story about the same thing.	three different people will give you three different stories.
three different people will give you three different stories.	and the government will give you a fourth story.
and the government will give you a fourth story.	yes, like the government says not to worry about the swine flu.
yes, like the government says not to worry about the swine flu.	but the swine flu just killed 20 people in mexico.
but the swine flu just killed 20 people in mexico.	the government says we have nothing to worry about.
the government says we have nothing to worry about.	then why are some schools telling the kids to stay home?
then why are some schools telling the kids to stay home?	the government says to wash our hands frequently, and we'll all be okay.
don't pick your nose.	i wasn't picking my nose.
i wasn't picking my nose.	what were you doing?
what were you doing?	i was scratching my nose.
i was scratching my nose.	i think i know the difference between picking and scratching.
i think i know the difference between picking and scratching.	okay, mom, maybe i was picking it a little bit.
okay, mom, maybe i was picking it a little bit.	use a tissue next time.
use a tissue next time.	i didn't have a tissue.
i didn't have a tissue.	then wait till you find a tissue.
then wait till you find a tissue.	i couldn't wait. it was an emergency.
i couldn't wait. it was an emergency.	oh, really? maybe you should have called 911.
oh, really? maybe you should have called 911.	it wasn't that kind of emergency.
our tv remote is filthy.	yes, it's covered with crud.
yes, it's covered with crud.	i'm going to clean it.
i'm going to clean it.	don't use water on it!
don't use water on it!	i'll use a damp cloth.
i'll use a damp cloth.	don't let water get into any of the cracks.
don't let water get into any of the cracks.	i'll squeeze the cloth so it's almost dry.
i'll squeeze the cloth so it's almost dry.	don't rub the numbers off the remote.
don't rub the numbers off the remote.	i will rub gently but firmly.
i will rub gently but firmly.	do it quickly, please, so i can change channels during commercials.
do it quickly, please, so i can change channels during commercials.	i'll give it back to you in a couple of minutes.
i'll give it back to you in a couple of minutes.	maybe we should put it in a plastic bag to keep it clean.
my ear is killing me.	what's the matter?
what's the matter?	i was on a plane.
i was on a plane.	so?
so?	so, every time the plane goes up, my ear starts to hurt.
so, every time the plane goes up, my ear starts to hurt.	that's no good.
that's no good.	sometimes the pain goes away, and sometimes it doesn't.
sometimes the pain goes away, and sometimes it doesn't.	have you seen a doctor?
have you seen a doctor?	i've been to two doctors.
i've been to two doctors.	and they couldn't fix your problem?
and they couldn't fix your problem?	they both said i have to live with it.
they both said i have to live with it.	or you can stay off planes.
did you see the woman with the new face?	did she get a nice job?
did she get a nice job?	she got an "everything" job!
she got an "everything" job!	what do you mean?
what do you mean?	a team of doctors gave her a whole new face.
a team of doctors gave her a whole new face.	why did they do that?
why did they do that?	a mad dog bit most of her face off.
a mad dog bit most of her face off.	oh, that's terrible. what does she look like now?
oh, that's terrible. what does she look like now?	her face is really fat, but they say the swelling will go down.
her face is really fat, but they say the swelling will go down.	and then will she look normal again?
and then will she look normal again?	i guess so.
i guess so.	god bless modern medicine.
there's something wrong with my right hand.	what's wrong with it?
what's wrong with it?	it aches most of the time.
it aches most of the time.	what do you think it is?
what do you think it is?	i don't know. i think it's old age.
i don't know. i think it's old age.	if it's old age, why don't both of your hands hurt?
if it's old age, why don't both of your hands hurt?	that's a good question. maybe it's not old age.
that's a good question. maybe it's not old age.	are you right-handed?
are you right-handed?	yes. all my life.
yes. all my life.	you're wearing out your right hand. stop using it so much.
you're wearing out your right hand. stop using it so much.	but i do all my writing with my right hand.
but i do all my writing with my right hand.	start typing instead. that way your left hand will do half the work.

Abstraction using Classes
We can implement Abstraction in C++ using classes. The class helps us to group data members and member functions using available access specifiers. A Class can decide which data member will be visible to the outside world and which is not. 

Abstraction in Header files
One more type of abstraction in C++ can be header files. For example, consider the pow() method present in math.h header file. Whenever we need to calculate the power of a number, we simply call the function pow() present in the math.h header file and pass the numbers as arguments without knowing the underlying algorithm according to which the function is actually calculating the power of numbers.


Abstraction using Access Specifiers
Access specifiers are the main pillar of implementing abstraction in C++. We can use access specifiers to enforce restrictions on class members. For example:

Members declared as public in a class can be accessed from anywhere in the program.
Members declared as private in a class, can be accessed only from within the class. They are not allowed to be accessed from any part of the code outside the class.
We can easily implement abstraction using the above two features provided by access specifiers. Say, the members that define the internal implementation can be marked as private in a class. And the important information needed to be given to the outside world can be marked as public. And these public members can access the private members as they are inside the class. 

Example: 

C++

// C++ Program to Demonstrate the
// working of Abstraction
#include <iostream>
using namespace std;
 
class implementAbstraction {
private:
    int a, b;
 
public:
    // method to set values of
    // private members
    void set(int x, int y)
    {
        a = x;
        b = y;
    }
 
    void display()
    {
        cout << "a = " << a << endl;
        cout << "b = " << b << endl;
    }
};
 
int main()
{
    implementAbstraction obj;
    obj.set(10, 20);
    obj.display();
    return 0;
}
Output
a = 10
b = 20
You can see in the above program we are not allowed to access the variables a and b directly, however, one can call the function set() to set the values in a and b and the function display() to display the values of a and b. 

Advantages of Data Abstraction
Helps the user to avoid writing the low-level code
Avoids code duplication and increases reusability.
Can change the internal implementation of the class independently without affecting the user.
Helps to increase the security of an application or program as only important details are provided to the user.
It reduces the complexity as well as the redundancy of the code, therefore increasing the readability.
This article is contributed by Harsh Agarwal. If you like GeeksforGeeks and would like to contribute, you can also write an article using write.geeksforgeeks.org or mail your article to review-team@geeksforgeeks.org. See your article appearing on the GeeksforGeeks main page and help other Geeks. Please write comments if you find anything incorrect, or if you want to share more information about the topic discussed above.

C++

#include<iostream>
using namespace std;
 
class Vehicle
{
    public:
        void company()
        {
            cout<<"GFG\n";
        }
    public:
        void model()
        {
            cout<<"SIMPLE\n";
        }
    public:
        void color()
        {
            cout<<"Red/GREEN/Silver\n";
        }
    public:
        void cost()
        {
            cout<<"Rs. 60000 to 900000\n";
        }
    public:
        void oil()
        {
            cout<<"PETRO\n";
        }
    private:
        void piston()
        {
            cout<<"4 piston\n";
        }
    private:
        void manWhoMade()
        {
            cout<<"Markus Librette\n";
        }
};
int main()
{
     
    Vehicle obj;
    obj.company();
    obj.model();
    obj.color();
    obj.cost();
    obj.oil();
}
Output
GFG
SIMPLE
Red/GREEN/Silver
Rs. 60000 to 900000
PETRO


Object-oriented programming – As the name suggests uses objects in programming. Object-oriented programming aims to implement real-world entities like inheritance, hiding, polymorphism, etc. in programming. The main aim of OOP is to bind together the data and the functions that operate on them so that no other part of the code can access this data except that function.

There are some basic concepts that act as the building blocks of OOPs i.e.

Class
Objects
Encapsulation
Abstraction
Polymorphism
Inheritance
Dynamic Binding
Message Passing
Characteristics of an Object-Oriented Programming Language
OOPS Concept in C++ 

Class
The building block of C++ that leads to Object-Oriented programming is a Class. It is a user-defined data type, which holds its own data members and member functions, which can be accessed and used by creating an instance of that class. A class is like a blueprint for an object. For Example: Consider the Class of Cars. There may be many cars with different names and brands but all of them will share some common properties like all of them will have 4 wheels, Speed Limit, Mileage range, etc. So here, the Car is the class, and wheels, speed limits, and mileage are their properties.


A Class is a user-defined data type that has data members and member functions.
Data members are the data variables and member functions are the functions used to manipulate these variables together these data members and member functions define the properties and behavior of the objects in a Class.
In the above example of class Car, the data member will be speed limit, mileage, etc and member functions can apply brakes, increase speed, etc.
We can say that a Class in C++ is a blueprint representing a group of objects which shares some common properties and behaviors.

Object
An Object is an identifiable entity with some characteristics and behavior. An Object is an instance of a Class. When a class is defined, no memory is allocated but when it is instantiated (i.e. an object is created) memory is allocated.

C++
// C++ Program to show the syntax/working of Objects as a
// part of Object Oriented PProgramming
#include <iostream>
using namespace std;
 
class person {
    char name[20];
    int id;
 
public:
    void getdetails() {}
};
 
int main()
{
 
    person p1; // p1 is a object
    return 0;
}

Objects take up space in memory and have an associated address like a record in pascal or structure or union. When a program is executed the objects interact by sending messages to one another. Each object contains data and code to manipulate the data. Objects can interact without having to know details of each other’s data or code, it is sufficient to know the type of message accepted and the type of response returned by the objects.

To know more about C++ Objects and Classes, refer to this article – C++ Classes and Objects

Encapsulation
In normal terms, Encapsulation is defined as wrapping up data and information under a single unit. In Object-Oriented Programming, Encapsulation is defined as binding together the data and the functions that manipulate them. Consider a real-life example of encapsulation, in a company, there are different sections like the accounts section, finance section, sales section, etc. The finance section handles all the financial transactions and keeps records of all the data related to finance. Similarly, the sales section handles all the sales-related activities and keeps records of all the sales. Now there may arise a situation when for some reason an official from the finance section needs all the data about sales in a particular month. In this case, he is not allowed to directly access the data of the sales section. He will first have to contact some other officer in the sales section and then request him to give the particular data. This is what encapsulation is. Here the data of the sales section and the employees that can manipulate them are wrapped under a single name “sales section”.

Encapsulation in C++ with Examples
Encapsulation in C++

Encapsulation also leads to data abstraction or data hiding. Using encapsulation also hides the data. In the above example, the data of any of the sections like sales, finance, or accounts are hidden from any other section.

To know more about encapsulation, refer to this article – Encapsulation in C++

Abstraction
Data abstraction is one of the most essential and important features of object-oriented programming in C++. Abstraction means displaying only essential information and hiding the details. Data abstraction refers to providing only essential information about the data to the outside world, hiding the background details or implementation. Consider a real-life example of a man driving a car. The man only knows that pressing the accelerator will increase the speed of the car or applying brakes will stop the car but he does not know how on pressing the accelerator the speed is actually increasing, he does not know about the inner mechanism of the car or the implementation of an accelerator, brakes, etc. in the car. This is what abstraction is.

Abstraction using Classes: We can implement Abstraction in C++ using classes. The class helps us to group data members and member functions using available access specifiers. A Class can decide which data member will be visible to the outside world and which is not.
Abstraction in Header files: One more type of abstraction in C++ can be header files. For example, consider the pow() method present in math.h header file. Whenever we need to calculate the power of a number, we simply call the function pow() present in the math.h header file and pass the numbers as arguments without knowing the underlying algorithm according to which the function is actually calculating the power of numbers.
To know more about C++ abstraction, refer to this article – Abstraction in C++

Polymorphism
The word polymorphism means having many forms. In simple words, we can define polymorphism as the ability of a message to be displayed in more than one form. A person at the same time can have different characteristics. A man at the same time is a father, a husband, and an employee. So the same person possesses different behavior in different situations. This is called polymorphism. An operation may exhibit different behaviors in different instances. The behavior depends upon the types of data used in the operation. C++ supports operator overloading and function overloading.

Operator Overloading: The process of making an operator exhibit different behaviors in different instances is known as operator overloading.
Function Overloading: Function overloading is using a single function name to perform different types of tasks. Polymorphism is extensively used in implementing inheritance.
Example: Suppose we have to write a function to add some integers, sometimes there are 2 integers, and sometimes there are 3 integers. We can write the Addition Method with the same name having different parameters, the concerned method will be called according to parameters. 

Polymorphism in C++ with Example
Polymorphism in C++

To know more about polymorphism, refer to this article – Polymorphism in C++

Inheritance
The capability of a class to derive properties and characteristics from another class is called Inheritance. Inheritance is one of the most important features of Object-Oriented Programming.

Sub Class: The class that inherits properties from another class is called Sub class or Derived Class.
Super Class: The class whose properties are inherited by a sub-class is called Base Class or Superclass.
Reusability: Inheritance supports the concept of “reusability”, i.e. when we want to create a new class and there is already a class that includes some of the code that we want, we can derive our new class from the existing class. By doing this, we are reusing the fields and methods of the existing class.
Example: Dog, Cat, Cow can be Derived Class of Animal Base Class. 

Inheritance in C++ with Example
Inheritance in C++

To know more about Inheritance, refer to this article – Inheritance in C++

Dynamic Binding
In dynamic binding, the code to be executed in response to the function call is decided at runtime. C++ has virtual functions to support this. Because dynamic binding is flexible, it avoids the drawbacks of static binding, which connected the function call and definition at build time.

Example:

C++

// C++ Program to Demonstrate the Concept of Dynamic binding
// with the help of virtual function
#include <iostream>
using namespace std;
 
class GFG {
public:
    void call_Function() // function that call print
    {
        print();
    }
    void print() // the display function
    {
        cout << "Printing the Base class Content" << endl;
    }
};
class GFG2 : public GFG // GFG2 inherit a publicly
{
public:
    void print() // GFG2's display
    {
        cout << "Printing the Derived class Content"
             << endl;
    }
};
int main()
{
    GFG geeksforgeeks; // Creating GFG's pbject
    geeksforgeeks.call_Function(); // Calling call_Function
    GFG2 geeksforgeeks2; // creating GFG2 object
    geeksforgeeks2.call_Function(); // calling call_Function
                                    // for GFG2 object
    return 0;
}
Output
Printing the Base class Content
Printing the Base class Content
As we can see, the print() function of the parent class is called even from the derived class object. To resolve this we use virtual functions.

Message Passing
Objects communicate with one another by sending and receiving information. A message for an object is a request for the execution of a procedure and therefore will invoke a function in the receiving object that generates the desired results. Message passing involves specifying the name of the object, the name of the function, and the information to be sent.

Related Articles:

Classes and Objects
Inheritance
Access Modifiers
Abstraction
This article is contributed by Vankayala Karunakar. Please write comments if you find anything incorrect, or if you want to share more information about the topic discussed above.

Sometimes implementation of all functions cannot be provided in a base class because we don’t know the implementation. Such a class is called an abstract class.For example, let Shape be a base class. We cannot provide the implementation of function draw() in Shape, but we know every derived class must have an implementation of draw(). Similarly, an Animal class doesn’t have the implementation of move() (assuming that all animals move), but all animals must know how to move. We cannot create objects of abstract classes.

A pure virtual function (or abstract function) in C++ is a virtual function for which we can have an implementation, But we must override that function in the derived class, otherwise, the derived class will also become an abstract class. A pure virtual function is declared by assigning 0 in the declaration.

Example of Pure Virtual Functions
C++

// An abstract class
class Test {
    // Data members of class
public:
    // Pure Virtual Function
    virtual void show() = 0;
 
    /* Other members */
};
Complete Example
A pure virtual function is implemented by classes that are derived from an Abstract class.

C++

// C++ Program to illustrate the abstract class and virtual
// functions
#include <iostream>
using namespace std;
 
class Base {
    // private member variable
    int x;
 
public:
    // pure virtual function
    virtual void fun() = 0;
 
    // getter function to access x
    int getX() { return x; }
};
 
// This class inherits from Base and implements fun()
class Derived : public Base {
    // private member variable
    int y;
 
public:
    // implementation of the pure virtual function
    void fun() { cout << "fun() called"; }
};
 
int main(void)
{
    // creating an object of Derived class
    Derived d;
 
    // calling the fun() function of Derived class
    d.fun();
 
    return 0;
}
Output

fun() called
Some Interesting Facts
1. A class is abstract if it has at least one pure virtual function.

Example

In the below C++ code, Test is an abstract class because it has a pure virtual function show(). 

C++

// C++ program to illustrate the abstract class with pure
// virtual functions
#include <iostream>
using namespace std;
 
class Test {
    // private member variable
    int x;
 
public:
    // pure virtual function
    virtual void show() = 0;
 
    // getter function to access x
    int getX() { return x; }
};
 
int main(void)
{
    // Error: Cannot instantiate an abstract class
    Test t;
 
    return 0;
}
Output

Compiler Error: cannot declare variable 't' to be of abstract
 type 'Test' because the following virtual functions are pure 
within 'Test': note:     virtual void Test::show() 
2. We can have pointers and references of abstract class type.

For example, the following program works fine.

C++

// C++ program that demonstrate that
// we can have pointers and references
// of abstract class type.
 
#include <iostream>
using namespace std;
 
class Base {
public:
    // pure virtual function
    virtual void show() = 0;
};
 
class Derived : public Base {
public:
    // implementation of the pure virtual function
    void show() { cout << "In Derived \n"; }
};
 
int main(void)
{
    // creating a pointer of type
    // Base pointing to an object
    // of type Derived
    Base* bp = new Derived();
 
    // calling the show() function using the
    // pointer
    bp->show();
 
    return 0;
}
Output
In Derived 
3. If we do not override the pure virtual function in the derived class, then the derived class also becomes an abstract class.

The following example demonstrates the same.


C++

// C++ program to demonstrate that if we do not override
// the pure virtual function in the derived class, then
// the derived class also becomes an abstract class
 
#include <iostream>
using namespace std;
 
class Base {
public:
    // pure virtual function
    virtual void show() = 0;
};
 
class Derived : public Base {
};
 
int main(void)
{
    // creating an object of Derived class
    Derived d;
 
    return 0;
}
Output

Compiler Error: cannot declare variable 'd' to be of abstract type 
'Derived'  because the following virtual functions are pure within
'Derived': virtual void Base::show() 
4. An abstract class can have constructors. 

For example, the following program compiles and runs fine.

C++

// C++ program to demonstrate that
// an abstract class can have constructors.
 
#include <iostream>
using namespace std;
 
// An abstract class with constructor
class Base {
protected:
    // protected member variable
    int x;
 
public:
    // pure virtual function
    virtual void fun() = 0;
 
    // constructor of Base class
    Base(int i)
    {
        x = i;
        cout << "Constructor of base called\n";
    }
};
 
class Derived : public Base {
    // private member variable
    int y;
 
public:
    // calling the constructor of Base class
    Derived(int i, int j)
        : Base(i)
    {
        y = j;
    }
 
    // implementation of pure virtual function
    void fun()
    {
        cout << "x = " << x << ", y = " << y << '\n';
    }
};
 
int main(void)
{
    // creating an object of Derived class
    Derived d(4, 5);
 
    // calling the fun() function of Derived class
    d.fun();
 
    // creating an object of Derived class using
    // a pointer of the Base class
    Base* ptr = new Derived(6, 7);
 
    // calling the fun() function using the
    // pointer
    ptr->fun();
 
    return 0;
}
Output
Constructor of base called
x = 4, y = 5
Constructor of base called
x = 6, y = 7
5. An abstract class in C++ can also be defined using struct keyword.

Example

struct shapeClass
{
    virtual void Draw()=0;
}
Comparison with Java
In Java, a class can be made abstract by using an abstract keyword. Similarly, a function can be made pure virtual or abstract by using an abstract keyword. See Abstract Classes in Java for more details.

Interface vs Abstract Classes
An interface does not have an implementation of any of its methods, it can be considered as a collection of method declarations. In C++, an interface can be simulated by making all methods pure virtual. In Java, there is a separate keyword for the interface.

We can think of Interface as header files in C++, like in header files we only provide the body of the class that is going to implement it. Similarly in Java in Interface we only provide the body of the class and we write the actual code in whatever class implements it.

Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above.


Last Updated : 11 Jun, 2023

307


Some MCQs related to C++

1. Who invented C++?
a) Dennis Ritchie
b) Ken Thompson
c) Brian Kernighan
d) Bjarne Stroustrup
View Answer

2. What is C++?
a) C++ is an object oriented programming language
b) C++ is a procedural programming language
c) C++ supports both procedural and object oriented programming language
d) C++ is a functional programming language
View Answer

3. Which of the following is the correct syntax of including a user defined header files in C++?
a) #include [userdefined]
b) #include “userdefined”
c) #include <userdefined.h>
d) #include <userdefined>
View Answer

4. Which of the following is used for comments in C++?
a) /* comment */
b) // comment */
c) // comment
d) both // comment or /* comment */
View Answer

5. Which of the following user-defined header file extension used in c++?
a) hg
b) cpp
c) h
d) hf
View Answer

advertisement

6. Which of the following is a correct identifier in C++?
a) VAR_1234
b) $var_name
c) 7VARNAME
d) 7var_name
View Answer

7. Which of the following is not a type of Constructor in C++?
a) Default constructor
b) Parameterized constructor
c) Copy constructor
d) Friend constructor
View Answer

8. Which of the following approach is used by C++?
a) Left-right
b) Right-left
c) Bottom-up
d) Top-down
View Answer

9. What is virtual inheritance in C++?
a) C++ technique to enhance multiple inheritance
b) C++ technique to ensure that a private member of the base class can be accessed somehow
c) C++ technique to avoid multiple inheritances of classes
d) C++ technique to avoid multiple copies of the base class into children/derived class
View Answer

10. What happens if the following C++ statement is compiled and executed?

int *ptr = NULL;
delete ptr;
a) The program is not semantically correct
b) The program is compiled and executed successfully
c) The program gives a compile-time error
d) The program compiled successfully but throws an error during run-time
View Answer

11. What will be the output of the following C++ code?

#include <iostream> 
#include <string>
using namespace std; 
int main(int argc, char const *argv[])
{
	char s1[6] = "Hello";
	char s2[6] = "World";
	char s3[12] = s1 + " " + s2;
	cout<<s3;
	return 0;
}
a) Hello
b) World
c) Error
d) Hello World
View Answer

12. What is the difference between delete and delete[] in C++?
a) delete is syntactically correct but delete[] is wrong and hence will give an error if used in any case
b) delete is used to delete normal objects whereas delete[] is used to pointer objects
c) delete is a keyword whereas delete[] is an identifier
d) delete is used to delete single object whereas delete[] is used to multiple(array/pointer of) objects
View Answer

13. What happens if the following program is executed in C and C++?

#include <stdio.h> 
int main(void) 
{ 
	int new = 5;
	printf("%d", new); 
}
a) Error in C and successful execution in C++
b) Error in both C and C++
c) Error in C++ and successful execution in C
d) A successful run in both C and C++
View Answer

14. What happens if the following program is executed in C and C++?

#include <stdio.h> 
void func(void)
{
	printf("Hello");
}
void main() 
{ 
	func();
	func(2);
}
a) Outputs Hello twice in both C and C++
b) Error in C and successful execution in C++
c) Error in C++ and successful execution in C
d) Error in both C and C++
View Answer

15. Which of the following is correct about this pointer in C++?
a) this pointer is passed as a hidden argument in all static variables of a class
b) this pointer is passed as a hidden argument in all the functions of a class
c) this pointer is passed as a hidden argument in all non-static functions of a class
d) this pointer is passed as a hidden argument in all static functions of a class
View Answer

16. What will be the output of the following C++ code?

    #include <iostream>
    #include <string>
    #include <algorithm>
    using namespace std;
    int main() 
    {
        string s = "spaces in text";
        s.erase(remove(s.begin(), s.end(), ' ' ), s.end() ) ;
        cout << s << endl;
    }
a) spacesintext
b) spaces in text
c) spaces
d) spaces in
View Answer

17. Which of the following C++ code will give error on compilation?

================code 1=================
#include <iostream>
using namespace std;
int main(int argc, char const *argv[])
{
	cout<<"Hello World";
	return 0;
}
========================================
================code 2=================
#include <iostream>
int main(int argc, char const *argv[])
{
	std::cout<<"Hello World";
	return 0;
}
========================================
a) Code 1 only
b) Neither code 1 nor code 2
c) Both code 1 and code 2
d) Code 2 only
View Answer

18. Which of the following type is provided by C++ but not C?
a) double
b) float
c) int
d) bool
View Answer

19. What is the value of p in the following C++ code snippet?

    #include <iostream>
    using namespace std;
    int main()
    {
        int p;
        bool a = true;
        bool b = false;
        int x = 10;
        int y = 5;
        p = ((x | y) + (a + b));
        cout << p;
        return 0;
    }
a) 12
b) 0
c) 2
d) 16
View Answer

20. By default, all the files in C++ are opened in _________ mode.
a) Binary
b) VTC
c) Text
d) ISCII
View Answer

21. What will be the output of the following C++ function?

    int main()
    {
        register int i = 1;
        int *ptr = &i;
        cout << *ptr;
	return 0;
    }
a) Runtime error may be possible
b) Compiler error may be possible
c) 1
d) 0
View Answer

22. Which of the following correctly declares an array in C++?
a) array{10};
b) array array[10];
c) int array;
d) int array[10];
View Answer

23. What is the size of wchar_t in C++?
a) Based on the number of bits in the system
b) 2 or 4
c) 4
d) 2
View Answer

24. What will be the output of the following C++ code?

#include<iostream>
using namespace std;
int main ()
{
   int cin;
   cin >> cin;
   cout << "cin: " << cin;
   return 0;
}
a) Segmentation fault
b) Nothing is printed
c) Error
d) cin: garbage value
View Answer

25. What is the use of the indentation in c++?
a) r distinguishes between comments and inner data
b) distinguishes between comments and outer data
c) distinguishes between comments and code
d) r distinguishes between comments and outer data
View Answer

26. Which is more effective while calling the C++ functions?
a) call by object
b) call by pointer
c) call by value
d) call by reference
View Answer

27. What will be the output of the following C++ program?

#include <iostream> 
#include <string>
#include <cstring>
using namespace std; 
int main(int argc, char const *argv[])
{
	const char *a = "Hello\0World";
	cout<<a;
	return 0;
}
a) Hello
b) World
c) Error
d) Hello World
View Answer

28. Which of the following is used to terminate the function declaration in C++?
a) ;
b) ]
c) )
d) :
View Answer

29. What will be the output of the following C++ code?

    #include <iostream>
    using namespace std;
    int main()
    {
        char c = 74;
        cout << c;
        return 0;
    }
a) I
b) J
c) A
d) N
View Answer

30. What will be the output of the following C++ program?

    #include <iomanip>
    #include <iostream>
    using namespace std;
    int main()
    {
        cout << setprecision(17);
        double d = 0.1;
        cout << d << endl;
        return 0;
    }
a) compile time error
b) 0.100001
c) 0.11
d) 0.10000000000000001
View Answer

31. Which keyword is used to define the macros in c++?
a) #macro
b) #define
c) macro
d) define
View Answer

32. What is the correct syntax of accessing a static member of a class in C++?

---------------------------
Example class:
class A
{
	public:
		static int value;
}
---------------------------
a) A->value
b) A^value
c) A.value
d) A::value
View Answer

33. The C++ code which causes abnormal termination/behaviour of a program should be written under _________ block.
a) catch
b) throw
c) try
d) finally
View Answer

34. What is Inheritance in C++?
a) Deriving new classes from existing classes
b) Overloading of classes
c) Classes with same names
d) Wrapping of data into a single class
View Answer

35. What will be the output of the following C++ code?

    #include <iostream>
    using namespace std;
    int main()
    {
        int a = 5;
        float b;
        cout << sizeof(++a + b);
        cout << a;
        return 0;
    }
a) 2 5
b) 4 5
c) 4 6
d) 2 6
View Answer

36. Which of the following symbol is used to declare the preprocessor directives in C++?
a) $
b) ^
c) #
d) *
View Answer

37. What will be the output of the following C++ program?

#include<iostream>
using namespace std;
int main()
{
	int a = 5;
	auto check = [=]() 
        {
		a = 10;
	};
	check();
	cout<<"Value of a: "<<a<<endl;
	return 0;
}
a) Segmentation fault
b) Value of a: 5
c) Value of a: 10
d) Error
View Answer

38. What will be the output of the following C++ code?

#include <iostream>
using namespace std;
void square (int *x, int *y)
{
	*x = (*x) * --(*y);
}
int main ( )
{
	int number = 30;
	square(&number, &number);
	cout << number;
	return 0;
}
a) 30
b) Error
c) Segmentation fault
d) 870
View Answer

39. What is meant by a polymorphism in C++?
a) class having only single form
b) class having four forms
c) class having many forms
d) class having two forms
View Answer

40. What will be the output of the following C++ program?

#include <iostream>
#include <string>
using namespace std;
int main ()
{
  std::string str ("Sanfoundry.");
  str.back() = '!';
  std::cout << str << endl;
  return 0;
}
a) Sanfoundry!
b) Sanfoundry!.
c) Sanfoundry.
d) Sanfoundry.!
View Answer

41. Pick the incorrect statement about inline functions in C++?
a) Saves overhead of a return call from a function
b) They are generally very large and complicated function
c) These functions are inserted/substituted at the point of call
d) They reduce function call overheads
View Answer

42. What will be the output of the following C++ program?

    #include <iostream>
    using namespace std;
    int main()
    {
        int n = 5;
        void *p = &n;
        int *pi = static_cast<int*>(p);
        cout << *pi << endl;
        return 0;
    }
a) 5
b) 6
c) compile time error
d) runtime error
View Answer

43. What is abstract class in C++?
a) Any Class in C++ is an abstract class
b) Class from which any class is derived
c) Class specifically used as a base class with atleast one virtual functions
d) Class specifically used as a base class with atleast one pure virtual functions
View Answer

44. Which of the following constructors are provided by the C++ compiler if not defined in a class?
a) Copy constructor
b) Default constructor
c) Assignment constructor
d) All of the mentioned
View Answer

45. What will be the output of the following C++ program?

#include <iostream>
using namespace std; 
int main()
{
    try
    {
        try
        {
            throw 20;
        }
        catch (int n)
        {
            cout << "Inner Catch\n";
            throw;
        }
    }
    catch (int x)
    {
        cout << "Outer Catch\n";
    }
    return 0;
}
a) Outer Catch
b)

Inner Catch
Outer Catch
c) Error
d) Inner Catch
View Answer

46. Which concept allows you to reuse the written code in C++?
a) Inheritance
b) Polymorphism
c) Abstraction
d) Encapsulation
View Answer

47. What will be the output of the following C++ code snippet?

    #include <iostream>
    using namespace std;
    int operate (int a, int b)
    {
        return (a * b);
    }
    float operate (float a, float b)
    {
        return (a / b);
    }
    int main()
    {
        int x = 5, y = 2;
        float n = 5.0, m = 2.0;
        cout << operate(x, y) <<"\t";
        cout << operate (n, m);
        return 0;
    }
a) 10.0 5
b) 10 2.5
c) 10.0 5.0
d) 5.0 2.5
View Answer

48. How structures and classes in C++ differ?
a) Structures by default hide every member whereas classes do not
b) In Structures, members are public by default whereas, in Classes, they are private by default
c) Structures cannot have private members whereas classes can have
d) In Structures, members are private by default whereas, in Classes, they are public by default
View Answer

49. What will be the output of the following C++ code?

    #include <iostream>
    using namespace std;
    int main ()
    {
        int a, b, c;
        a = 2;
        b = 7;
        c = (a > b) ? a : b;
        cout << c;
        return 0;
    }
a) 12
b) 14
c) 6
d) 7
View Answer

50. What is the benefit of c++ input and output over c input and output?
a) Both Type safety & Exception
b) Sequence container
c) Exception
d) Type safety
View Answer

51. What will be the output of the following C++ code snippet?

    #include <stdio.h>
    #include<iostream>
    using namespace std;
    int main ()
    {
        int array[] = {0, 2, 4, 6, 7, 5, 3};
        int n, result = 0;
        for (n = 0; n < 8; n++) 
        {
            result += array[n];
        }
        cout << result;
        return 0;
    }
a) 21
b) 27
c) 26
d) 25
View Answer

52. What will be the output of the following C++ program?

    #include <iostream>
    #include <string>
    using namespace std;
    int main ()
    {
        string str ("Sanfoundry");
        for (size_t i = 0; i < str.length();)
        {
            cout << str.at(i-1);
        }
        return 0;
    }
a) runtime error
b) Sanfo
c) S
d) Sanfoundry
View Answer

53. What will be the output of the following C++ program?

#include <iostream>
using namespace std;
class A{
public:
	A(){
		cout<<"Constructor called\n";
	   }
	~A(){
		cout<<"Destructor called\n";
	    } 
};
int main(int argc, char const *argv[])
{
	A *a = new A[5];
	delete[] a;
	return 0;
}
a) Segmentation fault
b) “Constructor called” five times and then “Destructor called” five times
c) “Constructor called” five times and then “Destructor called” once
d) Error
View Answer


1. Which class is used to design the base class?
a) abstract class
b) derived class
c) base class
d) derived & base class
View Answer

2. Which is used to create a pure virtual function?
a) $
b) =0
c) &
d) !
View Answer

3. Which is also called as abstract class?
a) virtual function
b) pure virtual function
c) derived class
d) base class
View Answer

Note: Join free Sanfoundry classes at Telegram or Youtube
advertisement

4. What will be the output of the following C++ code?

    #include <iostream>
    using namespace std;
    class p 
    {
        protected:
        int width, height;
        public:
        void set_values (int a, int b)
        {
            width = a; height = b; 
        }
        virtual int area (void) = 0;
    };
    class r: public p
    {
        public:
        int area (void)
        { 
            return (width * height);
        }
    };
    class t: public p 
    {
        public:
        int area (void)
        {
            return (width * height / 2); 
        }
    };
    int main () 
    {
        r rect;
        t trgl;
        p * ppoly1 = &rect;
        p * ppoly2 = &trgl;
        ppoly1->set_values (4, 5);
        ppoly2->set_values (4, 5);
        cout << ppoly1 -> area() ;
        cout << ppoly2 -> area();
        return 0;
    }
a) 1020
b) 20
c) 10
d) 2010
View Answer

5. What will be the output of the following C++ code?

    #include <iostream>
    using namespace std;
    class MyInterface 
    {
        public:
        virtual void Display() = 0;
    };
    class Class1 : public MyInterface 
    {
        public:
        void Display() 
        {
            int  a = 5;
            cout << a;
        }
    };
    class Class2 : public MyInterface 
    {
        public:
        void Display()
        {
            cout <<" 5" << endl;
        }
    };
    int main()
    {
        Class1 obj1;
        obj1.Display();
        Class2 obj2;
        obj2.Display();
        return 0;
    }
a) 5
b) 10
c) 5 5
d) 15
View Answer

6. What will be the output of the following C++ code?

    #include <iostream>
    using namespace std;
    class sample
    {
        public:
        virtual void example() = 0; 
    };
    class Ex1:public sample
    {
        public:
        void example()
        {
            cout << "ubuntu";
        }
    };
    class Ex2:public sample
    {
        public:
        void example()
        {
            cout << " is awesome";
        }
    };
    int main()
    {
        sample* arra[2];
        Ex1 e1;
        Ex2 e2;
        arra[0]=&e1;
        arra[1]=&e2;
        arra[0]->example();
        arra[1]->example();
    }
a) ubuntu
b) is awesome
c) ubuntu is awesome
d) ubunt esome
View Answer

7. What will be the output of the following C++ code?

    #include <iostream>
    using namespace std;
    class Base
    {
        public:
        virtual void print() const = 0;
    };
    class DerivedOne : virtual public Base
    {
        public:
        void print() const
        {
            cout << "1";
        }
    };
    class DerivedTwo : virtual public Base
    {
        public:
        void print() const
        {
            cout << "2";
        }
    };
    class Multiple : public DerivedOne, DerivedTwo
    {
        public:
        void print() const
        {
            DerivedTwo::print();
        }
    };
    int main()
    {
        Multiple both;
        DerivedOne one;
        DerivedTwo two;
        Base *array[ 3 ];
        array[ 0 ] = &both;
        array[ 1 ] = &one;
        array[ 2 ] = &two;
        for ( int i = 0; i < 3; i++ )
        array[ i ] -> print();
        return 0;
    }
a) 121
b) 212
c) 12
d) 215
View Answer

8. What is meant by pure virtual function?
a) Function which does not have definition of its own
b) Function which does have definition of its own
c) Function which does not have any return type
d) Function which does not have any return type & own definition
View Answer

9. Pick out the correct option.
a) We cannot make an instance of an abstract base class
b) We can make an instance of an abstract base class
c) We can make an instance of an abstract super class
d) We can make an instance of an abstract derived class
View Answer

10. Where does the abstract class is used?
a) base class only
b) derived class
c) both derived & base class
d) virtual class

This set of C++ Programming Multiple Choice Questions & Answers (MCQs) focuses on “Abstract Classes – 2”.

1. What is an abstract class in C++?
a) Class specifically used as a base class with atleast one virtual functions
b) Class specifically used as a base class with atleast one pure virtual functions
c) Class from which any class is derived
d) Any Class in C++ is an abstract class
View Answer

2. What is a pure virtual function in C++?
a) A virtual function defined in a base class
b) A virtual function declared in a base class
c) Any function in a class
d) A function without definition in a base class
View Answer

3. Which is the correct syntax of defining a pure virtual function?
a) pure virtual return_type func();
b) virtual return_type func() pure;
c) virtual return_type func() = 0;
d) virtual return_type func();
View Answer

Sanfoundry Certification Contest of the Month is Live. 100+ Subjects. Participate Now!
advertisement

4. Which is the correct statement about pure virtual functions?
a) They should be defined inside a base class
b) Pure keyword should be used to declare a pure virtual function
c) Pure virtual function is implemented in derived classes
d) Pure virtual function cannot implemented in derived classes
View Answer

5. Pick the correct statement.
a) Pure virtual functions and virtual functions are the same
b) Both Pure virtual function and virtual function have an implementation in the base class
c) Pure virtual function has no implementation in the base class whereas virtual function may have an implementation in the base class
d) The base class has no pure virtual function
View Answer

Check this: C++ Books | Programming MCQs
6. What will be the output of the following C++ code?

#include <iostream>
#include <string>
using namespace std;
class A
{
	int a;
    public:
	virtual void func() = 0;
};
 
class B: public A
{
   public:
	void func(){
		cout<<"Class B"<<endl;
	}	
};
 
int main(int argc, char const *argv[])
{
	B b;
	b.func();
	return 0;
}
a) Class B
b) Error
c) Segmentation fault
d) No output
View Answer

7. What will be the output of the following C++ code?

#include <iostream>
#include <string>
using namespace std;
class A
{
	int a;
   public:
	virtual void func() = 0;
};
 
class B: public A
{
   public:
	void func(){
		cout<<"Class B"<<endl;
	}	
};
 
int main(int argc, char const *argv[])
{
	A a;
	a.func();
	return 0;
}
a) Class B
b) Error
c) Segmentation fault
d) No output
View Answer

8. What will be the output of the following C++ code?

#include <iostream>
#include <string>
using namespace std;
class A
{
	int a;
    public:
	virtual void func() = 0;
};
 
class B: public A
{
    public:
	void func(){
		cout<<"Class B"<<endl;
	}	
};
 
int main(int argc, char const *argv[])
{
	A *a;
	a->func();
	return 0;
}
a) Class B
b) Error
c) Segmentation fault
d) No outpu

Here are some MCQs related to Abstraction in C++:- 

A class is made abstract by declaring at least one of its functions as?	
a. impure virtual function	
b. pure virtual function	
c. pure abstract function	
d. impure abstract function


A pure virtual function is specified by placing?	
a. 1	
b. 0	
c. 1	
d. infinite

Classes that can be used to instantiate objects are called?	
a. concrete classes	
b. interface	
c. abstract class	
d. None of the above
Which of the following is true?	The C++ interfaces are implemented using¬†abstract classes	The purpose of an abstract class is to provide an appropriate base class from which other classes can inherit.	¬†Abstract classes cannot be used to instantiate objects and serves only as an¬†interface.	All of the above
Where does the abstract class is used?	base class only	derived class	both derived & base class	virtual class
Which class is used to design the base class?	abstract class	derived class	base class	derived & base class
We cannot make an instance of an abstract base class	1		Can be true and false	Can not say
We can make an instance of an abstract super class	1		Can be true and false	Can not say
Which is the correct syntax of defining a pure virtual function?	pure virtual return_type func();	virtual return_type func() pure;	virtual return_type func() = 0;	virtual return_type func();
Which is the correct statement about pure virtual functions?	They should be defined inside a base class	Pure keyword should be used to declare a pure virtual function	Pure virtual function is implemented in derived classes	Pure virtual function cannot implemented in derived classes
Which among the following best defines abstraction?	Hiding the implementation	Showing the important data	Hiding the important data	Hiding the implementation and showing only the features
Hiding the implementation complexity can ____________	Make the programming easy	Make the programming complex	Provide more number of features	Provide better features
Class is _________ abstraction.	Object	Logical	Real	Hypothetical
Object is ________ abstraction.	Object	Logical	Real	Hypothetical
Abstraction gives higher degree of ________	Class usage	Program complexity	Idealized interface	Unstable interface
Abstraction can apply to ____________	Control and data	Only data	Only control	Classes
Which among the following can be viewed as combination of abstraction of data and code.	Class	Object	Inheritance	Interfaces
Abstraction principle includes___________	Use abstraction at its minimum	Use abstraction to avoid longer codes	Use abstraction whenever possible to avoid duplication	Use abstraction whenever possible to achieve OOP
Higher the level of abstraction, higher are the details.	1			
Encapsulation and abstraction differ as ____________	Binding and Hiding respectively	Hiding and Binding respectively	Can be used any way	Hiding and hiding respectively
In terms of stream and files ____________	Abstraction is called a stream and device is called a file	Abstraction is called a file and device is called a stream	Abstraction can be called both file and stream	Abstraction can‚Äôt be defined in terms of files and stream
¬†If two classes combine some private data members and provides public member functions to access and manipulate those data members. Where is abstraction used?	Using private access specifier for data members	Using class concept with both data members and member functions	Using public member functions to access and manipulate the data members	Data is not sufficient to decide what is being used
¬†A phone is made up of many components like motherboard, camera, sensors and etc. If the processor represents all the functioning of phone, display shows the display only, and the phone is represented as a whole. Which among the following have highest level of abstraction?	Motherboard	Display	Camera	Phone
Which among the following is not a level of abstraction?	Logical level	Physical level	View level	External level
Using higher degree of abstraction __________	May get unsafe	May reduce readability	Can be safer	Can increase vulnerability
What is an abstract class in C++?	Class specifically used as a base class with atleast one virtual functions	Class specifically used as a base class with atleast one pure virtual functions	Class from which any class is derived	Any Class in C++ is an abstract class
What is a pure virtual function in C++?	A virtual function defined in a base class	A virtual function declared in a base class	Any function in a class	A function without definition in a base class
Which is the correct syntax of defining a pure virtual function?	pure virtual return_type func();	virtual return_type func() pure;	virtual return_type func() = 0;	virtual return_type func();
Which is the correct statement about pure virtual functions?	They should be defined inside a base class	Pure keyword should be used to declare a pure virtual function	Pure virtual function is implemented in derived classes	Pure virtual function cannot implemented in derived classes
Pick the correct statement.	Pure virtual functions and virtual functions are the same	Both Pure virtual function and virtual function have an implementation in the base class	Pure virtual function has no implementation in the base class whereas virtual function may have an implementation in the base class	The base class has no pure virtual function
"What will be the output of the following C++ code?

#include <iostream>
#include <string>
using namespace std;
class A
{
	int a;
    public:
	virtual void func() = 0;
};
 
class B: public A
{
   public:
	void func(){
		cout<<""Class B""<<endl;
	}	
};
 
int main(int argc, char const *argv[])
{
	B b;
	b.func();
	return 0;
}"	Class B	Error	Segmentation fault	No output
"What will be the output of the following C++ code?

#include <iostream>
#include <string>
using namespace std;
class A
{
	int a;
   public:
	virtual void func() = 0;
};
 
class B: public A
{
   public:
	void func(){
		cout<<""Class B""<<endl;
	}	
};
 
int main(int argc, char const *argv[])
{
	A a;
	a.func();
	return 0;
}"	Class B	Error	Segmentation fault	No output
"What will be the output of the following C++ code?

#include <iostream>
#include <string>
using namespace std;
class A
{
	int a;
    public:
	virtual void func() = 0;
};
 
class B: public A
{
    public:
	void func(){
		cout<<""Class B""<<endl;
	}	
};
 
int main(int argc, char const *argv[])
{
	A *a;
	a->func();
	return 0;
}"	Class B	Error	Segmentation fault	No output
"Which of the following feature of OOPs is not used in the following C++ code?
class A{
    int i;
    public:
    void print() {cout << ""hello"" << i;}
}
class B : public A{
    int j;
    public:
    void assign (int a ) {k = a;}
}"	Abstraction	Encapsulation	Inheritance	Polymorphism
" What will be the output of the following C++ code?

    #include <iostream>
    using namespace std;
    class p 
    {
        protected:
        int width, height;
        public:
        void set_values (int a, int b)
        {
            width = a; height = b; 
        }
        virtual int area (void) = 0;
    };
    class r: public p
    {
        public:
        int area (void)
        { 
            return (width * height);
        }
    };
    class t: public p 
    {
        public:
        int area (void)
        {
            return (width * height / 2); 
        }
    };
    int main () 
    {
        r rect;
        t trgl;
        p * ppoly1 = &rect;
        p * ppoly2 = &trgl;
        ppoly1->set_values (4, 5);
        ppoly2->set_values (4, 5);
        cout << ppoly1 -> area() ;
        cout << ppoly2 -> area();
        return 0;
    "	1020	20	10	2010
"What will be the output of the following C++ code?

    #include <iostream>
    using namespace std;
    class MyInterface 
    {
        public:
        virtual void Display() = 0;
    };
    class Class1 : public MyInterface 
    {
        public:
        void Display() 
        {
            int  a = 5;
            cout << a;
        }
    };
    class Class2 : public MyInterface 
    {
        public:
        void Display()
        {
            cout <<"" 5"" << endl;
        }
    };
    int main()
    {
        Class1 obj1;
        obj1.Display();
        Class2 obj2;
        obj2.Display();
        return 0;
    }"	5	10	5 5	15
"What will be the output of the following C++ code?

    #include <iostream>
    using namespace std;
    class sample
    {
        public:
        virtual void example() = 0; 
    };
    class Ex1:public sample
    {
        public:
        void example()
        {
            cout << ""ubuntu"";
        }
    };
    class Ex2:public sample
    {
        public:
        void example()
        {
            cout << "" is awesome"";
        }
    };
    int main()
    {
        sample* arra[2];
        Ex1 e1;
        Ex2 e2;
        arra[0]=&e1;
        arra[1]=&e2;
        arra[0]->example();
        arra[1]->example();
    }"	ubuntu	is awesome	ubuntu is awesome	ubunt esome
"What will be the output of the following C++ code?

    #include <iostream>
    using namespace std;
    class Base
    {
        public:
        virtual void print() const = 0;
    };
    class DerivedOne : virtual public Base
    {
        public:
        void print() const
        {
            cout << ""1"";
        }
    };
    class DerivedTwo : virtual public Base
    {
        public:
        void print() const
        {
            cout << ""2"";
        }
    };
    class Multiple : public DerivedOne, DerivedTwo
    {
        public:
        void print() const
        {
            DerivedTwo::print();
        }
    };
    int main()
    {
        Multiple both;
        DerivedOne one;
        DerivedTwo two;
        Base *array[ 3 ];
        array[ 0 ] = &both;
        array[ 1 ] = &one;
        array[ 2 ] = &two;
        for ( int i = 0; i < 3; i++ )
        array[ i ] -> print();
        return 0;
    }"	121	212	12	215
What is meant by pure virtual function?	Function which does not have definition of its own	Function which does have definition of its own	Function which does not have any return type	Function which does not have any return type & own definition
Pick out the correct option.	We cannot make an instance of an abstract base class	We can make an instance of an abstract base class	We can make an instance of an abstract super class	We can make an instance of an abstract derived class
Where does the abstract class is used?	base class only	derived class	both derived & base class	virtual class
In C++, which access specifier is used to implement abstraction?	public	private	protected	friend
What is the purpose of abstraction in C++?	To make code run faster	To make code easier to read	To hide unnecessary details and focus on essential features	To eliminate the need for comments
Which of the following is an example of abstraction?	Creating an object of a class	Defining a variable	Declaring a function	Writing a loop
Which feature of C++ allows you to achieve abstraction by creating user-defined types?	Pointers	References	Classes	Templates
Which keyword is used to declare a pure virtual function in C++?	pure	virtual	abstract	override
Which of the following is true about abstract classes in C++?	Abstract classes cannot have any member functions.	Objects cannot be created from abstract classes.	Abstract classes can be instantiated.	Abstract classes cannot have constructors.
Which of the following is an advantage of using abstract classes in C++?	Abstract classes can be used as base classes.	Abstract classes have faster execution time.	Abstract classes do not support inheritance.	Abstract classes have a smaller memory footprint.
How can you achieve abstraction using inheritance in C++?	By declaring functions as pure virtual in the base class	By making the base class private	By using the "abstract" keyword in the derived class	Abstraction cannot be achieved using inheritance
Which of the following is a correct way to achieve abstraction in C++?	Declaring all member functions as public	Declaring all member functions as private	Declaring all member functions as protected	Declaring some member functions as public and others as private
What happens when a pure virtual function is not implemented in a derived class?	The program throws an error during compilation.	The program throws an error during runtime.	The program executes successfully.	The program enters an infinite loop.
Which of the following is an example of abstraction in the C++ Standard Template Library (STL)?	Vector	List	Map	All of the above
Which feature of C++ allows you to achieve abstraction by providing a generic implementation for different data types?	Templates	Inheritance	Polymorphism	Polymorphism
"What is the output of the following code snippet? class Base {
public:
    virtual void display() = 0;
};

class Derived : public Base {
public:
    void display() {
        cout << ""Derived class"" << endl;
    }
};

int main() {
    Base* obj = new Derived();
    obj->display();
    return 0;
}"	"Base class"	"Derived class"	Compiler error	Runtime error
Which of the following is true about abstract classes in C++?	Abstract classes cannot be inherited.	Abstract classes can have both concrete and abstract member functions.	Abstract classes can be instantiated.	Abstract classes are defined using the "abstract" keyword.
In C++, which keyword is used to achieve data abstraction?	abstract	virtual	class	new
Which of the following is true about pure virtual functions in C++?	Pure virtual functions have a definition in the base class.	Pure virtual functions must be implemented in the derived class.	Pure virtual functions cannot be overridden.	Pure virtual functions cannot have parameters.
Which of the following is an example of abstraction in C++?	Creating an object of a class	Accessing a private member variable	Calling a member function	Declaring a global variable
Which of the following statements best defines abstraction in C++?	It is a process of hiding data members.	It is a process of creating objects.	It is a process of hiding implementation details and providing a simplified interface.	It is a process of defining classes and objects.
How is abstraction achieved in C++?	By using access specifiers	By using inheritance	By using virtual functions	By using abstract classes
Which keyword is used to declare a pure virtual function in C++? 	pure	virtual	abstract	override
Can an abstract class have non-virtual member functions?	Yes	No		
Which of the following is an example of abstraction in C++?	Encapsulation	Polymorphism	Inheritance	All of the above
What happens if an abstract class is inherited, but the pure virtual function is not overridden in the derived class? 	The program fails to compile.	The program compiles but throws an error at runtime.	The program compiles and runs without any errors.	The program enters an infinite loop.
Which access specifier is used to achieve strong abstraction in C++?	public	private	protected	friend
Which of the following is an advantage of using abstract classes in C++?	Objects can be created from abstract classes.	Abstract classes have faster execution time.	Abstract classes can be used as base classes.	Abstract classes have a smaller memory footprint.
How do abstract classes differ from concrete classes in C++?	Abstract classes cannot have constructors.	Abstract classes cannot have member variables.	Abstract classes cannot have member functions.	Abstract classes cannot be instantiated.
What is the purpose of a pure virtual function in an abstract class? 	To provide a default implementation.	To force derived classes to provide their own implementation.	To prevent derived classes from inheriting the function.	To make the function non-overridable.
Which of the following statements is true about pure virtual functions in C++?	They must be defined in the abstract class.	They must be declared with the "virtual" keyword.	They must be implemented in the derived classes.	They cannot have a return type.
Which feature of C++ allows you to achieve abstraction by providing a generic implementation for different data types?	Templates	Inheritance	Polymorphism	Pointers
Which among the following best defines abstraction in C++?¬†	Hiding the implementation and showing only the features	Showing the important data and hiding the irrelevant data	Hiding the implementation complexity and providing an idealized interface	All of the above
Which among the following is a type of abstraction in C++?	Data abstraction	Control abstraction	Both a and b	None of the above
Which among the following is an example of data abstraction in C++?	Class	Object	Header file	All of the above
Which among the following is an example of control abstraction in C++?¬†	Function	Loop	Operator	All of the above
Which among the following is a feature of abstraction in C++?	It makes the programming easy and less complex	It provides a higher degree of reusability and modularity	It hides the unnecessary details and shows only the essential information	All of the above
Which among the following is a way to implement abstraction in C++ using classes?	Using private access specifier for data members	Using public member functions to access and manipulate the data members	Both a and b	None of the above
Which among the following is a way to implement abstraction in C++ using header files?¬†	Using preprocessor directives to include header files in the program	Using pow() function from math.h header file to calculate power of numbers without knowing the algorithm	Both a and b	None of the above
Which among the following is a principle of abstraction in C++?	Use abstraction whenever possible to avoid duplication and achieve OOP	Use abstraction at its minimum to avoid performance overheads and memory leaks	Use abstraction only when necessary to avoid confusion and complexity	None of the above
Which among the following is true about abstraction in C++?	Higher level of abstraction means higher level of details	Lower level of abstraction means lower level of details	Higher level of abstraction means lower level of details	¬†Lower level of abstraction means higher level of details
Which among the following is a difference between encapsulation and abstraction in C++?	Encapsulation is hiding data and code, while abstraction is hiding only data¬†	Encapsulation is hiding only code, while abstraction is hiding data and code¬†	Encapsulation is binding data and code, while abstraction is hiding data and code	¬†Encapsulation is hiding data and code, while abstraction is binding data and code
Which among the following can be viewed as a combination of data and code abstraction in C++?	Class	Object	Inheritance	Interface
Which among the following is not a level of abstraction in C++?	Logical level	Physical level	Conceptual level	Implementation level
In terms of stream and files, which among the following is true about abstraction in C++?	Abstraction is called a stream and device is called a file	Abstraction is called a file and device is called a stream	Abstraction can be called both file and stream	Abstraction can‚Äôt be defined in terms of files and stream
What is an abstract class in C++?	Class specifically used as a base class with at least one virtual function	Class specifically used as a base class with at least one pure virtual function¬†	Class from which any class can be derived	Class that can‚Äôt be instantiated
What is a pure virtual function in C++?	A virtual function that has no definition¬†	A virtual function that has a definition but is prefixed with the keyword pure	A virtual function that has no definition and is assigned to 0	A virtual function that has a definition and is assigned to 0
What is the syntax of declaring a pure virtual function in C++?	virtual void func() = 0; 	pure virtual void func();¬†	virtual void func() pure;	pure void func() virtual;
What is the effect of declaring a pure virtual function in a class in C++?	The class becomes an abstract class and can‚Äôt be instantiated¬†	The class becomes a concrete class and can be instantiated	The class becomes a final class and can‚Äôt be inherited	The class becomes a base class and can be inherited
What is the purpose of declaring a pure virtual function in a class in C++?	To force the derived classes to override the function	To provide a common interface for the derived classes	To achieve runtime polymorphism through dynamic binding	All of the above
Which among the following is true about abstract classes in C++?¬†	An abstract class can have both pure virtual and non-pure virtual functions	¬†An abstract class can have both pure virtual and normal functions	An abstract class can have only pure virtual functions	Both a and b
Which among the following is false about abstract classes in C++?	An abstract class can have constructors and destructors	An abstract class can have data members and member functions	An abstract class can have static members and static functions	An abstract class can‚Äôt have any members or functions
Which among the following is true about constructors and destructors of abstract classes in C++?	They are not allowed in abstract classes as they can‚Äôt be instantiated	They are allowed in abstract classes as they are called by the derived classes	They are allowed in abstract classes as they are used to initialize and destroy the data members of the abstract classes	Both b and c
Which among the following is true about inheritance of abstract classes in C++?	A derived class can inherit from an abstract class only if it defines all the pure virtual functions of the base class	A derived class can inherit from an abstract class even if it doesn‚Äôt define any of the pure virtual functions of the base class	A derived class that inherits from an abstract class and doesn‚Äôt define all the pure virtual functions of the base class becomes an abstract class itself	Both b and c
Which among the following is false about inheritance of abstract classes in C++?	A derived class that inherits from an abstract class and defines all the pure virtual functions of the base class becomes a concrete class	A derived class that inherits from an abstract class and defines some but not all of the pure virtual functions of the base class becomes a concrete class¬†	A derived class that inherits from an abstract class can override both pure virtual and non-pure virtual functions of the base class	A derived class that inherits from an abstract class can access both public and protected members of the base class
Which among the following is true about polymorphism with abstract classes in C++?	¬†A pointer or reference of an abstract class type can point or refer to an object of a concrete derived class	A pointer or reference of an abstract class type can invoke the overridden functions of the derived classes at runtime	Both a and b	None of the above
Which among the following is false about polymorphism with abstract classes in C++?	A pointer or reference of an abstract class type can invoke any function of the derived classes at runtime	A pointer or reference of an abstract class type can‚Äôt invoke any function of the base class at runtime	Both a and b	None of the above
Which among the following is an advantage of using abstract classes in C++?	They provide a common interface for different types of objects	They enable code reusability and maintainability	They support dynamic binding and runtime polymorphism¬†	All of the above
Which among the following is a disadvantage of using abstract classes in C++?¬†	They increase the complexity and overheads of inheritance hierarchy	They require more memory and processing time for dynamic binding	They restrict multiple inheritance as only one base class can be abstract	All of the above
Which among the following is a difference between abstract classes and interfaces in C++?¬†	Abstract classes can have both pure virtual and normal functions, while interfaces can have only pure virtual functions	Abstract classes can have data members and member functions, while interfaces can have only static constants and static functions	Abstract classes can have constructors and destructors, while interfaces can‚Äôt have any constructors or destructors	All of the above
Which among the following is a similarity between abstract classes and interfaces in C++?¬†	Both are used to achieve abstraction and polymorphism	Both can‚Äôt be instantiated and require derived classes to implement their pure virtual functions	Both can be used as base classes for multiple inheritance	All of the above
Which among the following is a scenario where abstract classes are preferred over interfaces in C++?	When there is a need to provide a common interface for different types of objects	When there is a need to provide some default implementation for some functions	When there is a need to support multiple inheritance with different base classes	None of the above







© 2006 Wouter Verkerke, NIKHEF 
Introduction to C++ 
and Object Oriented Programming
Wouter Verkerke (NIKHEF) 
v60 – Edition for 2018 Master Course 
© 2006 Wouter Verkerke, NIKHEF 
Introduction and Overview 
Introduction 0 & Overview 
© 2006 Wouter Verkerke, NIKHEF 
Programming, design and complexity 
• The goal of software – to solve a particular problem 
– E.g. computation of numeric problems, maintaining an organized 
database of information, finding the Higgs etc.. 
• Growing computational power in the last decades has 
allowed us to tackle more and more complex problems 
• As a consequence software has also grown more 
powerful and complex 
– For example Microsoft Windows OS, last generation video games, 
often well over 1.000.000 lines of source code 
– Growth also occurs in physics: e.g. collection of software packages 
for reconstruction/analysis of the BaBar experiment is ~6.4M lines 
of C++ 
• How do we deal with such increasing complexity? 
© 2006 Wouter Verkerke, NIKHEF 
Programming philosophies 
• Key to successfully coding complex systems is break 
down code into smaller modules and minimize the 
dependencies between these modules 
• Traditional programming languages (C, Fortran, Pascal) 
achieve this through procedure orientation 
– Modularity and structure of software revolves around ‘functions’ 
encapsulate (sub) algorithms 
– Functions are a major tool in software structuring but leave a few 
major design headaches 
• Object-oriented languages (C++, Java,…) take this 
several steps further 
– Grouping data and associated functions into objects 
– Profound implications for modularity and dependency reduction 
© 2006 Wouter Verkerke, NIKHEF 
What are objects 
• ‘Software objects’ are often found naturally in real-life 
problems 
• Object oriented programming à Finding these objects 
and their role in your problem
Button object Check box object 
Drop box object 
Dialog box 
object 
© 2006 Wouter Verkerke, NIKHEF 
What are objects 
• An object has 
– Properties : position, shape, text label 
– Behavior : if you click on the ‘Cancel button’ a defined action occurs 
Button object Check box object 
Drop box object 
Dialog box 
object 
© 2006 Wouter Verkerke, NIKHEF 
Relating objects 
• Object-Oriented Analysis and Design seeks the relation 
between objects 
– ‘Is-A’ relationship (a PushButton Is-A ClickableObject) 
– ‘Has-A’ relationship (a DialogBox Has-A CheckBox) 
Button object Check box object 
Drop box object 
Dialog box 
object 
© 2006 Wouter Verkerke, NIKHEF 
Benefits of Object-Oriented programming 
• Benefits of Object-oriented programming 
– Reuse of existing code – objects can represent generic problems 
– Improved maintainability – objects are more self contained than 
‘subroutines’ so code is less entangled 
– Often a ‘natural’ way to describe a system – see preceding 
example of dialog box 
• But… 
– Object oriented modeling does not substitute for sound thinking 
– OO programming does not guarantee high performance, but it 
doesn’t stand in its way either 
• Nevertheless 
– OO programming is currently the best way we know 
to describe complex systems 
© 2006 Wouter Verkerke, NIKHEF 
Basic concept of OOAD 
• Object-oriented programming revolves around 
abstraction of your problem. 
– Separate what you do from how you do it 
• Example – PushButton object 
PushButton is a complicated 
piece of software – Handling 
of mouse input, drawing 
of graphics etc.. 
Nevertheless you can use a 
PushButton object and don’t 
need to know anything about 
that. Its public interface can 
be very simple: My name is 
‘cancel’ and I will call function 
doTheCancel() when I get 
clicked 
© 2006 Wouter Verkerke, NIKHEF 
Techniques to achieve abstraction 
• Abstraction is achieved through 
1. Modularity 
2. Encapsulation 
3. Inheritance 
4. Polymorphism 
© 2006 Wouter Verkerke, NIKHEF 
Modularity 
• Decompose your problem logically in independent units 
– Minimize dependencies between units – Loose coupling 
– Group things together that have logical connection – Strong cohesion 
• Example 
– Grouping actions and properties of a bank account together 
long getBalance() 
void print() 
void calculateInterest() 
char* ownersName 
long accountNumber 
long accountBalance 
Account 
© 2006 Wouter Verkerke, NIKHEF 
Encapsulation 
• Separate interface and implementation and shield 
implementation from object ‘users’ 
long getBalance() 
void print() 
void calculateInterest() 
char* ownersName 
long accountNumber 
long accountBalance 
Account 
interface 
implementation 
(not visible from outside) 
© 2006 Wouter Verkerke, NIKHEF 
Inheritance 
• Describe new objects in terms of existing objects 
• Example of mortgage account 
long getBalance() 
void print() 
void calculateInterest() 
char* ownersName 
long accountNumber 
long accountBalance 
Account 
interface 
implementation 
(not visible from outside) 
char* collateralObject 
long collateralValue MortgageAccount 
© 2006 Wouter Verkerke, NIKHEF 
Polymorphism 
• Polymorphism is the ability to treat objects of different 
types the same way 
– You don’t know exactly what object you’re dealing with but you 
know that you can interact with it through a standardized 
interface 
– Requires some function call decisions to be taken at run time 
• Example with trajectories 
– Retrieve position at a flight length of 5 cm 
– Same interface works for different objects with identical interface 
Point p = Traj->getPos(5.0) 
LineTrajectory HelixTrajectory 
© 2006 Wouter Verkerke, NIKHEF 
Introduction to C++ 
• Wide choice of OO-languages – why program in C++? 
– It depends on what you need… 
• Advantage of C++ – It is a compiled language 
– When used right the fastest of all OO languages 
– Because OO techniques in C++ are resolved and implemented at compile 
time rather than runtime so 
• Maximizes run-time performance 
• You don’t pay for what you don’t use 
• Disadvantage of C++ – syntax more complex 
– Also, realizing performance advantage not always trivial 
• C++ best used for large scale projects where performance 
matters 
– C++ rapidly becoming standard in High Energy Physics for mainstream data 
processing, online data acquisition etc… 
– Nevertheless, if your program code will be O(100) lines and performance is 
not critical C, Python, Java may be more efficient 
Versions of C++ 
• C++ is a ‘living language’ that evolves over time. 
• This course is largely based on the 2003 standard of C++ 
• LHC experiments are now largely adopting C++ compilers 
that implement the 2011 standard of C++, which brings
useful new features 
– E.g. Auto types, range-based for loops, lambdas, constructor
delegation, tuples, hash tables and pointer memory management 
– I will cover a subset of these C++2011 features in this course, 
and explicitly point out the features that are only available in C+
+2011 
• For the GNU compilers (gcc/g++) some of the C++2011 
features are implement starting in version 4.4, with
almost all features implemented in 4.7 
– In gcc 4.[3456] must add flag ‘-std=c++0x’ to activate
– In gcc 4.[78] must add flag ‘-std=c++11’ to activate
© 2006 Wouter Verkerke, NIKHEF 
© 2006 Wouter Verkerke, NIKHEF 
Outline of the course 
1. Introduction and overview 
2. Basics of C++ 
3. Modularity and Encapsulation – Files and Functions 
4. Class Basics 
5. Object Analysis and Design 
6. The Standard Library I – Using IOstreams 
7. Generic Programming – Templates 
8. The Standard Library II – The template library 
9. Object Orientation – Inheritance & Polymorphism 
10.Robust programming – Exception handling 
11.Where to go from here 
© 2006 Wouter Verkerke, NIKHEF 
The basics of C++ 
The basics 1 of C++ 
© 2006 Wouter Verkerke, NIKHEF 
“Hello world” in C++ 
• Lets start with a very simple C++ program 
// my first program in C++ 
#include <iostream> 
int main () { 
 std::cout << "Hello World!“ << std::endl; 
 return 0; 
} 
© 2006 Wouter Verkerke, NIKHEF 
“Hello world” in C++ 
• Lets start with a very simple C++ program 
// my first program in C++ 
#include <iostream> 
int main () { 
 std::cout << "Hello World!“ << std::endl; 
 return 0; 
} Anything on line after // in C++ is 
considered a comment 
© 2006 Wouter Verkerke, NIKHEF 
“Hello world” in C++ 
• Lets start with a very simple C++ program 
• The preprocessor of a C(++) compiler processes the 
source code before it is passed to the compiler. It can: 
– Include other source files (using the #include directive) 
– Define and substitute symbolic names (using the #define directive) 
– Conditionally include source code (using the #ifdef, #else, #endif 
directives) 
// my first program in C++ 
#include <iostream> 
int main () { 
 std::cout << "Hello World!“ << std::endl; 
 return 0; 
} 
Lines starting with # are directives for the 
preprocessor 
Here we include some standard function 
and type declarations of objects defined by 
the ‘iostream’ library 
© 2006 Wouter Verkerke, NIKHEF 
“Hello world” in C++ 
• Let start with a very simple C++ program 
• The main() function is the default function where all C++ 
programs begin their execution. 
– In this case the main function takes no input arguments and returns 
an integer value 
– You can also declare the main function to take arguments which will 
be filled with the command line options given to the program 
// my first program in C++ 
#include <iostream> 
int main () { 
 std::cout << "Hello World!“ << std::endl; 
 return 0; 
} 
Beginning of the main() 
function declaration. 
© 2006 Wouter Verkerke, NIKHEF 
“Hello world” in C++ 
• Lets start with a very simple C++ program 
• The names std::cout and std::endl are declared in the 
‘header file’ included through the ‘#include <iostream>’ 
preprocessor directive. 
• The std::endl directive represents the ‘carriage return / line 
feed’ operation on the terminal 
// my first program in C++ 
#include <iostream> 
int main () { 
 std::cout << "Hello World!“ << std::endl; 
 return 0; 
} 
Use iostream library objects 
to print string to standard 
output 
© 2006 Wouter Verkerke, NIKHEF 
“Hello world” in C++ 
• Lets start with a very simple C++ program 
• The return value of the main() function is passed back to 
the operating system as the ‘process exit code’ 
// my first program in C++ 
#include <iostream> 
int main () { 
 std::cout << "Hello World!“ << std::endl; 
 return 0; 
} The return statement passes 
the return value back to the 
calling function 
© 2006 Wouter Verkerke, NIKHEF 
Compiling and running ‘Hello World’ 
• Example using Linux, (t)csh and g++ compiler 
unix> g++ -o hello hello.cc
unix> ./hello 
Hello World! 
unix> echo $status 
0 
Run executable ‘hello’ 
Convert c++ source code 
into executable 
Print exit code of last 
run process (=hello) 
© 2006 Wouter Verkerke, NIKHEF 
Outline of this section 
• Jumping in: the ‘hello world’ application 
• Review of the basics 
– Built-in data types 
– Operators on built-in types 
– Control flow constructs 
– More on block {} structures 
– Dynamic Memory allocation 
int main() { 
 int a = 3 ; 
 float b = 5 ; 
 float c = a * b + 5 ; 
 if ( c > 10) { 
 return 1 ; 
 } 
 return 0 ; 
} 
© 2006 Wouter Verkerke, NIKHEF 
Review of the basics – built-in data types 
• C++ has only few built-in data types 
• More complex types are available in the ‘Standard Library’ 
– A standard collection of tools that is available with every compiler 
– But these types are not fundamental as they're implement using standard C++ 
– We will get to this soon 
type name type description 
char ASCII character, 1 byte 
int, 
signed int, unsigned int, 
short int, long int 
Integer. Can be signed, unsigned, long or 
short. Size varies and depends on CPU 
architecture (2,4,8 bytes) 
float, double Floating point number, single and double 
precision 
bool Boolean, can be true or false (1 byte) 
enum Integer with limited set of named states
enum fruit { apple,pear,citrus }, or 
enum fruit { apple=0,pear=1,citrus} 
© 2006 Wouter Verkerke, NIKHEF 
Defining data objects – variables 
• Defining a data object can be done in several ways 
• Data objects declared can also be declared constant 
int main() { 
 int j ; // definition – initial value undefined 
 int k = 0 ; // definition with assignment initialization 
 int l(0) ; // definition with constructor initialization 
 int m = k + l ; // initializer can be any valid C++ expression 
 int a,b=0,c(b+5); // multiple declaration – a,b,c all integers 
} 
int main() { 
 const float pi = 3.14159268 ; // constant data object 
 pi = 2 ; // ERROR – doesn’t compile 
} 
Auto declaration type (C++ 2011) 
• In C++ 2011, you can also omit an explicit type in 
declarations of objects that are immediately initialized
• In these cases the type is deduced from the initializer 
© 2006 Wouter Verkerke, NIKHEF 
auto j = 16 ; // j is integer 
auto j = 2.3 ; // j is double 
auto j = true ; // j is bool
 
© 2006 Wouter Verkerke, NIKHEF 
Arrays 
• C++ supports 1-dimensional and N-dimensional arrays 
– Definition 
– Array dimensions in definition must be constants 
– First element’s index is always 0 
– Assignment initialization possible 
Type name[size] ; 
Type name[size1][size2]…[sizeN] ; 
float x[3] ; // OK
const int n=3 ; 
float x[n] ; // OK 
int k=5 ; 
float x[k] ; // ERROR! 
float x[3] = { 0.0, 5.7 , 2.3 } ; 
float y[2][2] = { 0.0, 1.0, 2.0, 3.0 } ; 
float y[3] = { 1.0 } ; // Incomplete initialization OK 
© 2006 Wouter Verkerke, NIKHEF 
Declaration versus definition of data 
• Important fine point: definition of a variable is two actions 
1. Allocation of memory for object 
2. Assigning a symbolic name to that memory space 
– C++ symbolic name is a way for programs to give understandable 
names to segments of memory 
– But it is an artifact: no longer exists once the program is compiled 
C++ symbol name space Memory layout 
int myArray[5] 
float x 
char name[256] 
© 2006 Wouter Verkerke, NIKHEF 
References 
• C++ allows to create ‘alias names’, a different symbolic 
name referencing an already allocated data object 
– Syntax: ‘Type& name = othername’ 
– References do not necessarily allocate memory 
• Example 
– Concept of references will become more interesting when we’ll 
talk about functions 
int x ; // Allocation of memory for int 
 // and declaration of name ‘x’ 
int& y = x ; // Declaration of alias name ‘y’ 
 // for memory referenced by ‘x’ 
x = 3 ; 
cout << x << endl ; // prints ‘3’ 
cout << y << endl ; // also prints ‘3’ 
© 2006 Wouter Verkerke, NIKHEF 
References 
• Illustration C++ of reference concept 
– Reference is symbolic name that points to same memory as 
initializer symbol 
C++ symbol name space Memory layout 
int myArray[5] 
float x 
char name[256] 
float& y = x 
© 2006 Wouter Verkerke, NIKHEF 
Pointers 
• Pointer is a variable that contains a memory address 
– Somewhat similar to a reference in functionality, but fundamentally 
different in nature: a pointer is always an object in memory itself 
– Definition: ‘TYPE* name’ makes pointer to data of type TYPE 
C++ symbol name space Memory layout 
int myArray[5] 
float x 
char name[256] 
float* y = &x 
float& y = x 
© 2006 Wouter Verkerke, NIKHEF 
Pointers 
• Working with pointers 
– Operator & takes memory address of symbol object (=pointer value) 
– Operator * turns memory address (=pointer value) into symbol object 
• Creating and reading through pointers 
• Modifying pointers and objects pointed to 
int x = 3, y = 4 ; 
int* px ; // allocate px of type ‘pointer to integer’ 
px = &x ; // assign ‘memory address of x’ to pointer px 
cout << px << endl ; // Prints 0x3564353, memory address of x 
cout << *px << endl ;// Prints 3, value of x, object pointed to by px 
*px = 5 ; // Change value of object pointed to by px (=x) ; 
cout << x << endl ; // Prints 5 (since changed through px) 
px = &y ; // Reseat pointer to point to symbol named ‘y’ 
cout << px << endl ; // Prints 0x4863813, memory address of y
cout << *px << endl ;// Prints 4, value of y, object pointed to by px 
© 2006 Wouter Verkerke, NIKHEF 
Pointers continued 
• Pointers are also fundamentally related to arrays 
• Pointer (pa+1) points to next element of an array 
– This works regardless of the type in the array 
– In fact a itself is a pointer of type int* pointing to a[0] 
• The Basic Rule for arrays and pointers 
– a[i] is equivalent to *(a+i) 
int a[3] = { 1,2,3} ; // Allocates array of 3 integers 
int* pa = &a[0] ; // Pointer pa now points to a[0] 
cout << *pa << endl ; // Prints ‘1’ 
cout << *(pa+1) << endl ; // Prints ‘2’
© 2006 Wouter Verkerke, NIKHEF 
Some details on the block {} statements 
• Be sure to understand all consequences of a block {} 
– The lifetime of automatic variables inside the block is limited to 
the end of the block (i.e up to the point where the } is 
encountered) 
– A block introduces a new scope : it is a separate namespace in 
which you can define new symbols, even if those names already 
existed in the enclosing block 
int main() { 
 int i = 1 ; 
 if (x>0) { 
 int i = 0 ; 
 // code 
 } else { 
 // code 
 } 
} 
Memory for 
‘int i’ allocated 
Memory for 
‘int i’ released 
© 2006 Wouter Verkerke, NIKHEF 
Dynamic memory allocation 
• Allocating memory at run-time 
– When you design programs you cannot always determine how 
much memory you need 
– You can allocate objects of unknown size at compile time using 
the ‘free store’ of the C++ run time environment 
• Basic syntax of runtime memory allocation 
– Operator new allocates single object, returns pointer 
– Operator new[] allocates array of objects, returns pointer 
// Single object 
Type* ptr = new Type ; 
Type* ptr = new Type(initValue) ; 
// Arrays of objects 
Type* ptr = new Type[size] ; 
Type* ptr = new Type[size1][size2]…[sizeN] ; 
Releasing dynamic memory allocation 
• Operator delete releases dynamic memory previously 
allocated with new 
– Be sure to use delete[] for allocated arrays. A mismatch will 
result in an incomplete memory release 
– The delete operator only deletes memory that the pointer 
points to, not pointer itself 
– Every call to new must be matched with a call to a delete
• How much memory is available in the free store? 
– As much as the operating system lets you have 
– If you ask for more than is available your program will terminate 
in the new operator 
– It is possible to intercept this condition and continue the program 
using ‘exception handling’ (we’ll discuss this later) 
// Single object 
delete ptr ; 
// Arrays of objects 
delete[] ptr ; 
© 2006 Wouter Verkerke, NIKHEF 
Dynamic memory and leaks 
• A common problem in programs are memory leaks 
– Memory is allocated but never released even when it is not used 
anymore 
– Example of leaking code 
void leakFunc() { 
 int* array = new int[1000] ; 
 // do stuff with array 
} 
int main() { 
 int i ; 
 for (i=0 ; i<1000 ; i++) { 
 leakFunc() ; // we leak 4K at every call 
 } 
} 
Leak happens right here 
we loose the pointer array 
here and with that our only 
possibility to release its memory 
in future 
© 2006 Wouter Verkerke, NIKHEF 
Dynamic memory and leaks 
• Another scenario to leak memory 
– Misunderstanding between two functions 
int* allocFunc() { 
 int* array = new int[1000] ; 
 // do stuff with array 
 return array ; 
} 
int main() { 
 int i ; 
 for (i=0 ; i<1000 ; i++) { 
 allocFunc() ; 
 } 
} 
allocFunc() allocates memory 
but pointer as return value 
memory is not leaked yet 
Author of main() doesn’t know 
that it is supposed to delete 
array returned by allocFunc() 
Leak occurs here, pointer to dynamically 
allocated memory is lost before memory 
is released 
© 2006 Wouter Verkerke, NIKHEF 
Dynamic memory and ownership 
• Avoiding leaks is a matter of good bookkeeping 
– All memory allocated should be released after use 
• Memory handling logistics usually described in terms of 
ownership 
– The ‘owner’ of dynamically allocated memory is responsible for 
releasing the memory again 
– Ownership is a ‘moral concept’, not a C++ syntax rule. Code 
that never releases memory it allocated is legal, but may not work 
well as program size will increase in an uncontrolled way over 
time 
– Document your memory management code in terms of ownership 
© 2006 Wouter Verkerke, NIKHEF 
Dynamic memory allocation 
• Example of dynamic memory allocation with ownership 
semantics 
– Less confusion about division of responsabilities 
int* makearray(int size) { 
 // NOTE: caller takes ownership of memory 
 int* array = new int[size] ; 
 int i ; 
 for (i=0 ; i<size ; i++) { 
 array[i] = 0 ; 
 } 
 return array; 
} 
int main() { 
 // Note: We own array 
 int* array = makearray(1000) ; 
 delete[] array ; 
} 
© 2006 Wouter Verkerke, NIKHEF 
Files and Functions 
Files and 2 Functions 
© 2006 Wouter Verkerke, NIKHEF 
Structured programming – Functions 
• Functions group statements into logical units 
– Functions encapsulate algorithms 
• Declaration 
• Definition: 
• Ability to declare function separate from definition important 
– Allows to separate implementation and interface 
– But also solves certain otherwise intractable problems 
TYPE function_name(TYPE arg1, TYPE arg2, …, TYPE argN) ; 
TYPE function_name(TYPE arg1, TYPE arg2, …, TYPE argN) { 
 // body 
 statements ; 
 return arg ; 
}
© 2006 Wouter Verkerke, NIKHEF 
Forward declaration of functions 
• Example of trouble using function definitions only 
– Reversing order of definition doesn’t solve problem 
– But forward declaration does solve it: 
int g() { 
 f() ; // g calls f – ERROR, f not known yet 
} 
int f() { 
 g() ; // f calls g – OK g is defined 
} 
int f(int x) ; 
int g() { 
 f(x*2) ; // g calls f – OK f declared now 
} 
int f(int x) { 
 g() ; // f calls g – OK g defined by now 
} 
© 2006 Wouter Verkerke, NIKHEF 
Function arguments – values 
• By default all functions arguments are passed by value 
– Function is passed copies of input arguments 
– Allows function to freely modify inputs without consequences 
– Note: potentially expensive, because passing large objects 
(arrays) by value is expensive! 
a and b in swap() are copies of 
a and b in main() 
void swap(int a, int b) ; 
int main() { 
 int a=3, b=5 ; 
 swap(a,b) ; 
 cout << “a=“ << a << “, b=“ << b << endl ; 
} 
void swap(int a, int b) { 
 int tmp ; 
 tmp = a ; 
 a = b ; 
 b = tmp ; 
} 
// outputs: “a=3, b=5” 
© 2006 Wouter Verkerke, NIKHEF 
Function arguments – references 
• You can change this behavior by passing references as 
input arguments 
– Passing by reference is inexpensive, regardless of size of object 
– But allows functions to modify input arguments which may have 
potentially further consequences 
a and b in swap() are references to 
original a and b in main(). Any operation 
affects originals 
void swap(int& a, int& b) ; 
int main() { 
 int a=3, b=5 ; 
 swap(a,b) ; 
 cout << “a=“ << a << “, b=“ << b << endl ; 
} 
void swap(int& a, int& b) { 
 int tmp ; 
 tmp = a ; 
 a = b ; 
 b = tmp ; 
} 
// outputs: “a=5, b=3” 
© 2006 Wouter Verkerke, NIKHEF 
Function arguments – const references 
• Functions with ‘const references’ take references but 
promise not to change the object 
• Use const references instead of ‘pass-by-value’ when 
you are dealing with large objects that will not be 
changed 
– Low overhead (no copying of large objects) 
– Input value remains unchanged (thanks to const promise) 
void swap(const int& a, const int& b) { 
 int tmp ; 
 tmp = a ; // OK – does not modify a 
 a = b ; // COMPILER ERROR – Not allowed 
 b = tmp ; // COMPILER ERROR – Not allowed 
} 
© 2006 Wouter Verkerke, NIKHEF 
Function arguments – pointers 
• You can of course also pass pointers as arguments 
– Syntax more cumbersome, use references when you can, pointers 
only when you have to 
a and b in swap() are pointers to 
original a and b in main(). Any operation 
affects originals 
void swap(int* a, int* b) ; 
int main() { 
 int a=3, b=5 ; 
 swap(&a,&b) ; 
 cout << “a=“ << a << “, b=“ << b << endl ; 
} 
void swap(int* a, int* b) { 
 int tmp ; 
 tmp = *a ; 
 *a = *b ; 
 *b = tmp ; 
} 
// outputs: “a=5, b=3” 
© 2006 Wouter Verkerke, NIKHEF 
Function arguments – main() and the command line 
• If you want to access command line arguments you can 
declare main() as follows 
– Second argument is array of pointers 
• Output of example program 
int main(int argc, const char* argv[]) { 
 int i ; 
 for (i=0 ; i<argc ; i++) { 
 // argv[i] is ‘char *’ 
 cout << “arg #” << i << “ = “ << argv[i] << endl ; 
 } 
} 
unix> cc –o foo foo.cc 
unix> foo Hello World 
arg #0 = foo 
arg #1 = Hello 
arg #2 = World 
Array of (char*) 
© 2006 Wouter Verkerke, NIKHEF 
Functions – default arguments 
• Often algorithms have optional parameters with default values 
– How to deal with these in your programs? 
• Simple: in C++ functions, arguments can have default values 
• Rules for arguments with default values 
– Default values can be literals, constants, enumerations or statics 
– Positional rule: all arguments without default values must appear to the left 
of all arguments with default values 
void f(double x = 5.0) ; 
void g(double x, double y=3.0) ; 
const int defval=3 ; 
void h(int i=defval) ; 
int main() { 
 double x(0.) ; 
 f() ; // calls f(5.0) ; 
 g(x) ; // calls g(x,3.0) ; 
 g(x,5.0) ; // calls g(x,5.0) ; 
 h() ; // calls h(3) ; 
} 
© 2006 Wouter Verkerke, NIKHEF 
Function overloading 
• Often algorithms have different implementations with 
the same functionality 
– The minimum3 algorithm would be easier to use if both 
implementations had the same name and the compiler would 
automatically select the proper implementation with each use 
int minimum3_int(int a, int b, int c) { 
 return (a < b ? ( a < c ? a : c ) : ( b < c ? b : c) ) ; 
} 
float minimum3_float(float a, float b, float c) { 
 return (a < b ? ( a < c ? a : c ) : ( b < c ? b : c) ) ; 
} 
int main() { 
 int a=3,b=5,c=1 ; 
 float x=4.5,y=1.2,z=-3.0 ; 
 int d = minimum3_int(a,b,c) ; 
 float w = minimum3_float(x,y,z) ; 
} 
© 2006 Wouter Verkerke, NIKHEF 
Function overloading 
• C++ function overloading does exactly that 
– Reimplementation of example with function overloading 
int minimum3(int a, int b, int c) { 
 return (a < b ? ( a < c ? a : c ) 
 : ( b < c ? b : c) ) ; 
} 
float minimum3 (float a, float b, float c) { 
 return (a < b ? ( a < c ? a : c ) 
 : ( b < c ? b : c) ) ; 
} 
int main() { 
 int a=3,b=5,c=1 ; 
 float x=4.5,y=1.2,z=-3.0 ; 
 int d = minimum3(a,b,c) ; 
 float w = minimum3(x,y,z) ; 
} 
Overloaded 
functions have 
same name, 
but different 
signature 
(list of arguments) 
Code calls same function name 
twice. Compiler selects appropriate 
overloaded function based on 
argument list 
© 2006 Wouter Verkerke, NIKHEF 
Organizing your code into modules 
• For all but the most trivial programs it is not convenient 
to keep all C++ source code in a single file 
– Split source code into multiple files 
• Module: unit of source code offered to the compiler 
– Usually module = file 
• How to split your code into files and modules 
1. Group functions with related functionality into a single file 
• Follow guide line ‘strong cohesion’, ‘loose coupling’ 
• Example: a collection of char* string manipulation functions go together in a single 
module 
2. Separate declaration and definition in separate files 
• Declaration part to be used by other modules that interact with given module 
• Definition part only offered once to compiler for compilation 
© 2006 Wouter Verkerke, NIKHEF 
Typical layout of a module 
• Declarations file 
• Definitions file 
// capitalize.hh 
void convertUpper(char* str) ; 
void convertLower(char* str) ; 
// capitalize.cc 
#include “capitalize.hh” 
void convertUpper(char* ptr) { 
 while(*ptr) { 
 if (*ptr>=‘a’&&*ptr<=‘z’) *ptr -= ‘a’-’A’ ; 
 ptr++ ; 
 } 
} 
void convertLower(char* ptr) { 
 while(*ptr) { 
 if (*ptr>=‘A’&&*ptr<=‘Z’) *ptr += ‘a’-’A’ ; 
 ptr++ ; 
 } 
} 
Declarations 
Definitions 
© 2006 Wouter Verkerke, NIKHEF 
Using the preprocessor to include declarations 
• The C++ preprocessor #include directive can be used 
to include declarations from an external module 
• But watch out for multiple inclusion of same source file 
– Multiple inclusion can have unwanted effects or lead to errors 
– Preferred solution: add safeguard in .hh file that gracefully 
handles multiple inclusions 
• rather than rely on cumbersome bookkeeping by module programming 
// demo.cc 
#include “capitalize.hh” 
int main(int argc, const char* argv[]) { 
 if (argc!=2) return 0 ; 
 convertUpper(argv[1]) ;
 cout << argv[1] << endl ; 
} 
© 2006 Wouter Verkerke, NIKHEF 
Safeguarding against multiple inclusion 
• Automatic safeguard against multiple inclusion 
– Use preprocessor conditional inclusion feature 
#ifndef NAME 
(#else) 
#endif 
– NAME can be defined with #define
• Application in capitalize.hh example 
– If already included, CAPITALIZE_HH is set and future inclusion will 
be blank 
// capitalize.hh 
#ifndef CAPITALIZE_HH 
#define CAPITALIZE_HH 
void convertUpper(char* str) ; 
void convertLower(char* str) ; 
#endif 
© 2006 Wouter Verkerke, NIKHEF 
Namespaces 
• Single global namespace often bad idea 
– Possibility for conflict: someone else (or even you inadvertently) 
may have used the name want you use in your new piece of code 
elsewhere à Linking and runtime errors may result 
– Solution: make separate ‘namespaces’ for unrelated modules of 
code
• The namespace feature in C++ allows you to explicitly 
control the scope of your symbols 
– Syntax: namespace name { 
 int global = 0 ; 
 void func() { 
 // code 
 cout << global << endl ; 
 } 
} 
Code can access symbols 
inside same namespace 
without further qualifications 
© 2006 Wouter Verkerke, NIKHEF 
Namespaces 
• But code outside namespace must explicitly use scope 
operator with namespace name to resolve symbol 
namespace foo { 
 int global = 0 ; 
 void func() { 
 // code 
 cout << global << endl ; 
 } 
} 
void bar() { 
 cout << foo::global << endl ; 
 foo::func() ; 
} 
Namespace applies to functions too! 
© 2006 Wouter Verkerke, NIKHEF 
Namespace rules 
• Namespace declaration must occur at the global level 
• Namespaces are extensible 
void function foo() { 
 namespace bar { 
 statements ; 
 } 
} 
ERROR! 
namespace foo { 
 int bar = 0 ; 
} 
// other code 
namespace foo { 
 int foobar = 0 ; 
} 
Legal 
© 2006 Wouter Verkerke, NIKHEF 
Namespace rules 
• Namespaces can nest 
namespace foo { 
 int zap = 0 ; 
 namespace bar { 
 int foobar = 0 ; 
 } 
} 
int main() { 
 cout << foo::zap << endl ; 
 cout << foo::bar::foobar << endl ; 
} 
Legal 
Recursively use :: operator to resolve nested namespaces 
© 2006 Wouter Verkerke, NIKHEF 
Namespace rules 
• Namespaces can be unnamed! 
– Primary purpose: to avoid ‘leakage’ of private global symbols from 
module of code 
namespace { 
 int bar = 0 ; 
} 
void func() { 
 cout << bar << endl ; 
} 
Code in same module outside unnamed namespace 
can access symbols inside unnamed namespace 
© 2006 Wouter Verkerke, NIKHEF 
Namespaces and the Standard Library 
• All symbols in the Standard library are wrapped in the 
namespace ‘std’ 
• The ‘Hello world’ program revisited: 
// my first program in C++ 
#include <iostream> 
int main () { 
 std::cout << "Hello World!“ << std::endl; 
 return 0; 
} 
© 2006 Wouter Verkerke, NIKHEF 
Using namespaces conveniently 
• It is possible to import symbols from a given 
namespace into the current scope 
– To avoid excessive typing and confusing due to repeated lengthy 
notation 
– Can also import symbols in a local scope. In that case import valid 
only inside local scope 
// my first program in C++ 
#include <iostream> 
using std::cout ; 
using std::endl ; 
int main () { 
 cout << "Hello World!“ << endl; 
 return 0; 
} 
Import selected symbols into global namespace 
Imported symbols can now be used 
without qualification in this module 
© 2006 Wouter Verkerke, NIKHEF 
Using namespaces conveniently 
• You can also import the symbol contents of an entire 
namespace 
• Style tip: If possible only import symbols you need 
// my first program in C++ 
#include <iostream> 
using namespace std ; 
int main () { 
 cout << "Hello World!“ << endl; 
 return 0; 
} 
© 2006 Wouter Verkerke, NIKHEF 
The standard library as example 
• Each C++ compiler comes with a standard suite of 
libraries that provide additional functionality 
– <math> -- Math routines sin(),cos(),exp(),pow(),… 
– <stdlib> -- Standard utilities strlen(),strcat(),… 
– <stdio> -- File manipulation utilities open(),write(),close(),… 
• Nice example of modularity and use of namespaces 
– All Standard Library routines are contained in namespace std 
Debugging tips – Crashes etc...
• Your program crashes – How do you analyze this 
– Recompile your program with the ‘-g’ flag 
(i.e. g++ -g –o blah blah.c). 
• This will preserve source code line-number information in the executable 
– Rerun your program in the debugger: 
unix> gdb blah 
gdb> run <command line args for blah, if any, go here> 
(wait for crash) 
gdb> where
(shows line of code where crash occurred) 
gdb> quit
(exits the debugger)
© 2006 Wouter Verkerke, NIKHEF 
Debugging tips – Memory leaks, corruption etc
• You want to check that no memory leaks occur, no 
memory corruption occurs (e.g. writing beyond 
boundaries of arrays etc...) 
– Recompile your program with the ‘-g’ flag 
(i.e. g++ -g –o blah blah.c). 
• This will preserve source code line-number information in the executable 
– Rerun your problem with valgrind
unix> valgrind blah 
– If memory corruption occurs, ERRORs will be printed in report 
(along with line numbers in code) 
– If memory leakage occurs, only total amount leaked is shown. To 
show report with details (where memory was allocated that was 
not deleted), rerun 
unix> valgrind –-leak-check=full blah
© 2006 Wouter Verkerke, NIKHEF 
© 2006 Wouter Verkerke, NIKHEF 
Object-based programming – Classes 
Class 3 Basics 
© 2006 Wouter Verkerke, NIKHEF 
Encapsulation 
• OO languages like C++ enable you to create your own 
data types. This is important because 
– New data types make program easier to visualize and implement 
new designs 
– User-defined data types are reusable 
– You may modify and enhance new data types as programs evolve 
and specifications change 
– New data types let you create objects with simple declarations 
• Example 
Window w ; // Window object 
Database ood ; // Database object 
Device d ; // Device object 
© 2006 Wouter Verkerke, NIKHEF 
Evolving code design through use of C++ classes 
• Illustration of utility of C++ classes – Designing and 
building a FIFO queue 
– FIFO = ‘First In First Out’ 
• Graphical illustration of a FIFO queue 
‘A’ ‘Z’ ‘Q’ ‘W’ 
write read 
‘S’ ‘L’ 
© 2006 Wouter Verkerke, NIKHEF 
Evolving code design through use of C++ classes 
• First step in design is to write down the interface 
– How will ‘external’ code interact with our FIFO code? 
• List the essential interface tasks 
1. Create and initialize a FIFO 
2. Write a character in a FIFO 
3. Read a character from a FIFO 
– Support tasks 
1. How many characters are currently in the FIFO 
2. Is a FIFO empty 
3. Is a FIFO full 
‘A’ ‘Z’ ‘Q’ ‘W’ 
write read 
‘S’ ‘L’ 
© 2006 Wouter Verkerke, NIKHEF 
Designing the C++ class FIFO – interface 
 // Interface 
 void init() ; 
 void write(char c) ; 
 char read() ; 
 int nitems() ; 
 bool full() ; 
 bool empty() ;
• List of interface tasks 
1. Create and initialize a FIFO 
2. Write a character in a FIFO 
3. Read a character from a FIFO 
• List desired support tasks 
1. How many characters are 
currently in the FIFO 
2. Is a FIFO empty 
3. Is a FIFO full 
‘A’ ‘Z’ ‘Q’ ‘W’ 
write read 
‘S’ ‘L’ 
© 2006 Wouter Verkerke, NIKHEF 
Designing the C++ struct FIFO – implementation 
• Implement FIFO with array of elements 
– Use index integers to keep track of front and rear, size of queue 
// Implementation 
 char s[LEN] ; 
 int rear ; 
 int front ; 
 int count ; 
‘A’ 
‘Z’ 
‘Q’ 
‘W’ 
© 2006 Wouter Verkerke, NIKHEF 
Designing the C++ struct FIFO – implementation 
• Implement FIFO with array of elements 
– Use index integers to keep track of front and rear, size of queue 
– Indices revolve: if they reach end of array, they go back to 0 
‘A’ 
‘Z’ 
‘Q’ 
‘W’ 
// Implementation 
void init() { front = rear = count = 0 ; } 
void write(char c) { count++ ; 
 if(rear==LEN) rear=0 ; 
 s[rear++] = c ; } 
char read() { count-- ; 
 if (front==LEN) front=0 ; 
 return s[front++] ; } 
int nitems() { return count ; } 
bool full() { return (count==LEN) ; } 
bool empty() { return (count==0) ; } 
© 2006 Wouter Verkerke, NIKHEF 
Designing the C++ struct FIFO – implementation 
• Animation of FIFO write operation 
‘A’ 
‘Z’ 
‘Q’ 
‘W’ 
void write(char c) { count++ ; 
 if(rear==LEN) rear=0 ; 
 s[rear++] = c ; } 
front=1 
rear=4 
count=4 
‘X’ 
‘A’ 
‘Z’ 
‘Q’ 
‘W’ front=1 
rear=4 
count=5 
‘X’ 
‘A’ 
‘Z’ 
‘Q’ 
‘W’ front=1 
rear=5 
count=5 
© 2006 Wouter Verkerke, NIKHEF 
Designing the C++ struct FIFO – implementation 
• Animation of FIFO read operation 
‘A’ 
‘Z’ 
‘Q’ 
‘W’ front=1 
rear=5 
count=5 
‘X’ 
‘A’ 
‘Z’ 
‘Q’ 
‘W’ front=1 
rear=5 
count=4 
‘X’ 
‘A’ 
‘Z’ 
‘Q’ 
‘W’ 
front=2 
rear=5 
count=4 
char read() { count-- ; 
 if (front==LEN) front=0 ; 
 return s[front++] ; } 
‘X’ 
© 2006 Wouter Verkerke, NIKHEF 
Putting the FIFO together – the struct concept 
• The finishing touch: putting it all together in a struct 
const int LEN = 80 ; // default fifo length 
struct Fifo { 
 // Implementation 
 char s[LEN] ; 
 int front ; 
 int rear ; 
 int count ; 
 // Interface 
 void init() { front = rear = count = 0 ; } 
 int nitems() { return count ; } 
 bool full() { return (count==LEN) ; } 
 bool empty() { return (count==0) ; } 
 void write(char c) { count++ ; 
 if(rear==LEN) rear=0 ; 
 s[rear++] = c ; } 
 char read() { count-- ; 
 if (front==LEN) front=0 ; 
 return s[front++] ; } 
} ; 
© 2006 Wouter Verkerke, NIKHEF 
Characteristics of the ‘struct’ construct 
• Grouping of data members facilitates storage allocation 
– Single statement allocates all data members 
• A struct organizes access to data members and 
functions through a common symbolic name 
 // Allocate struct data type ‘Fifo’ 
 Fifo f ; 
 // Access function through name ‘f’ 
 f.init() ; 
 // Access data member through name ‘f’ 
 cout << f.count << endl ; 
Type names vs. instance names 
• Note important distinction between 
type name and instance name 
• Compare to basic types 
© 2006 Wouter Verkerke, NIKHEF 
 // Allocate struct data type ‘Fifo’ 
 Fifo f ; 
 // Allocate struct data type ‘Fifo’ 
 Fifo f2 ; 
Type name (Fifo) 
Instance name (f,f2) 
 int i ; 
 int i2 ; 
Type names vs. instance names 
• Instance name (f1,f2) maps to address in memory 
• Type name (Fifo) controls size of memory allocation, 
interpretation of memory in allocated block 
© 2006 Wouter Verkerke, NIKHEF 
C++ symbol name space Memory layout 
Fifo f1 
Fifo f2 
char name[256] 
char s[80] 
int front 
int rear 
int count 
Member access operator 
• The dot (.) and arrow (->) operators implements 
access to members of composite object like struct’s 
– Syntax: TypeName.MemberName 
© 2006 Wouter Verkerke, NIKHEF 
 // Allocate struct 
 // data type ‘Fifo’ 
 Fifo f ; 
 // Access data member 
 // through name ‘f’ 
 cout << f.count << endl ; 
 // Access data member 
 // through pointer to f 
 Fifo* pf = &f ; 
 cout << (*pf).count << endl ; 
 cout << pf->count << endl ; 
C++ symbol Memory layout 
name space 
Fifo f1 
f1.count 
char s[80] 
int front 
int rear 
int count 
© 2006 Wouter Verkerke, NIKHEF 
Characteristics of the ‘struct’ construct 
• Concept of ‘member functions’ automatically ties 
manipulator functions to their data 
– No need to pass data member operated on to interface function 
// Solution without 
// member functions 
struct fifo { 
 int front, rear, count ; 
} ; 
char read_fifo(fifo& f) { 
 f.count-- ; 
 … 
} 
fifo f1,f2 ; 
read_fifo(f1) ; 
read_fifo(f2) ; 
// Solution with 
// member functions 
struct fifo { 
 int front, rear, count ; 
 char read() { 
 count-- ; 
 … 
 } 
} ; 
fifo f1,f2 ; 
f1.read() ; // does f1.count-- 
f2.read() ; // does f2.count-- 
© 2006 Wouter Verkerke, NIKHEF 
Using the FIFO example code 
• Example code using the FIFO struct 
const char* data = “data bytes” ; 
int i, nc = strlen(data) ; 
Fifo f ; 
f.init() ; // initialize FIFO 
// Write chars into fifo 
const char* p = data ; 
for (i=0 ; i<nc && !f.full() ; i++) { 
 f.write(*p++) ; 
} 
// Count chars in fifo 
cout << f.nitems() << “ characters in fifo” << endl ; 
// Read chars back from fifo 
for (i=0 ; i<nc && !f.empty() ; i++) { 
 cout << f.read() << endl ; 
} 
10 chars 
in fifo 
d 
a 
t 
a 
 
b 
y 
t 
e 
s 
Program Output 
© 2006 Wouter Verkerke, NIKHEF 
Characteristics of the FIFO code 
• Grouping data, function members into a struct promotes 
encapsulation 
– All data members needed for fifo operation allocated in a single 
statement 
– All data objects, functions needed for fifo operation have 
implementation contained within the namespace of the FIFO 
object 
– Interface functions associated with struct allow implementation 
of a controlled interface functionality of FIFO 
• For example can check in read(), write() if FIFO is full or empty and 
take appropriate action depending on status 
• Problems with current implementation 
– User needs to explicitly initialize fifo prior to use 
– User needs to check explicitly if fifo is not full/empty when 
writing/reading 
– Data objects used in implementation are visible to user and 
subject to external modification/corruption 
© 2006 Wouter Verkerke, NIKHEF 
Controlled interface 
• Improving encapsulation 
– We improve encapsulation of the FIFO implementation by 
restricting access to the member functions and data members that 
are needed for the implementation 
• Objective – a controlled interface 
– With a controlled interface, i.e. designated member functions that 
perform operations on the FIFO, we can catch error conditions on 
the fly and validate offered input before processing it 
– With a controlled interface there is no ‘back door’ to the data 
members that implement the fifo thus guaranteeing that no 
corruption through external sources can take place 
• NB: This also improves performance since you can afford to be less paranoid. 
© 2006 Wouter Verkerke, NIKHEF 
Private and public 
• C++ access control keyword: ‘public’ and ‘private’ 
• Public data 
– Access is unrestricted. Situation identical to no access control declaration 
• Private data 
– Data objects and member functions in the private section can only be 
accessed by member functions of the struct (which themselves can be 
either private or public) 
struct Name { 
private: 
… members … // Implementation 
public: 
… members … // Interface 
} ; 
© 2006 Wouter Verkerke, NIKHEF 
Redesign of Fifo class with access restrictions 
const int LEN = 80 ; // default fifo length 
struct Fifo { 
 private: // Implementation 
 char s[LEN] ; 
 int front ; 
 int rear ; 
 int count ; 
 public: // Interface 
 void init() { front = rear = count = 0 ; } 
 int nitems() { return count ; } 
 bool full() { return (count==LEN) ; } 
 bool empty() { return (count==0) ; } 
 void write(char c) { count++ ; 
 if(rear==LEN) rear=0 ; 
 s[rear++] = c ; } 
 char read() { count-- ; 
 if (front==LEN) front=0 ; 
 return s[front++] ; } 
} ; 
© 2006 Wouter Verkerke, NIKHEF 
Using the redesigned FIFO struct 
• Effects of access control in improved fifo struct 
Fifo f ; 
f.init() ; // initialize FIFO 
f.front = 5 ; // COMPILER ERROR – not allowed 
cout << f.count << endl ; // COMPILER ERROR – not allowed 
cout << f.nitems() << endl ; // OK – through 
 // designated interface 
front is an implementation detail that’s not part of the 
abstract FIFO concept. Hiding this detail promotes encapsulation 
as we are now able to change the implementation later 
with the certainty that we will not break existing code 
‘A’ ‘Z’ ‘Q’ ‘W’ 
write read 
‘S’ ‘L’ 
© 2006 Wouter Verkerke, NIKHEF 
Class – a better struct 
• In addition to ‘struct’ C++ also defines ‘class’ as a 
method to group data and functions 
– In structs members are by default public, 
In classes member functions are by default private 
– Classes have several additional features that we’ll cover shortly 
struct Name { 
private: 
… members … 
public: 
… members … 
} ; 
class Name { 
… members … 
public: 
… members … 
} ; 
Equivalent 
© 2006 Wouter Verkerke, NIKHEF 
Classes and namespaces 
• Classes (and structs) also define their own namespace 
– Allows to separate interface and implementation even further by 
separating declaration and definition of member functions 
class Fifo { 
public: // Interface 
char read() { 
 count-- ; 
 if (front==len) front=0 ; 
 return s[front++] ; 
 } 
} ; 
class Fifo { 
public: // Interface
char read() ; 
} ; 
#include “fifo.hh” 
char Fifo::read() { 
 count-- ; 
 if (front==len) front=0 ; 
 return s[front++] ; 
} 
Declaration and definition Declaration only 
Definition 
Use of scope operator :: 
to specify read() function 
of Fifo class when outside 
class declaration 
© 2006 Wouter Verkerke, NIKHEF 
Classes and namespaces 
• Scope resolution operator can also be used in class 
member function to resolve ambiguities 
class Fifo { 
public: // Interface 
char read() { 
 … 
 std::read() ; 
 … 
 } 
} ; Use scope operator to specify that you want 
to call the read() function in the std namespace 
rather than yourself 
© 2006 Wouter Verkerke, NIKHEF 
Classes and files 
• Class declarations and definitions have a natural 
separation into separate files 
– A header file with the class declaration 
To be included by everybody that uses the class 
– A definition file with definition 
that is only offered once 
to the compiler 
– Advantage: You do not need to 
recompile code using 
class fifo if only implementation 
(file fifo.cc) changes 
#ifndef FIFO_HH 
#define FIFO_HH 
class Fifo { 
public: // Interface
char read() ; 
} ;
#endif 
#include “fifo.hh” 
char Fifo::read() { 
 count-- ; 
 if (front==len) front=0 ; 
 return s[front++] ; 
} 
fifo.hh 
fifo.cc 
© 2006 Wouter Verkerke, NIKHEF 
Constructors 
• Abstraction of FIFO data type can be further enhanced 
by letting it take care of its own initialization 
– User should not need to know if and how initialization should 
occur 
– Self-initialization makes objects easier to use and gives less 
chances for user mistakes 
• C++ approach to self-initialization – the Constructor 
member function 
– Syntax: member function with function name identical to class 
name 
class ClassName { 
… 
ClassName() ; 
… 
} ; 
© 2006 Wouter Verkerke, NIKHEF 
Adding a Constructor to the FIFO example 
• Improved FIFO example 
• Simplified use of FIFO 
class Fifo { 
public: 
 void init() ; 
 … 
class Fifo { 
public: 
 Fifo() { init() ; } 
private: 
 void init() ; 
 … 
Fifo f ; // creates raw FIFO 
f.init() ; // initialize FIFO 
Fifo f ; // creates initialized FIFO 
© 2006 Wouter Verkerke, NIKHEF 
Default constructors vs general constructors 
• The FIFO code is an example of a default constructor 
– A default constructor by definition takes no arguments 
• Sometimes an object requires user input to properly 
initialize itself 
– Example: A class that represents an open file – Needs file name 
– Use ‘regular constructor’ syntax 
– Supply constructor arguments at construction 
class ClassName { 
… 
ClassName(argument1,argument2,…argumentN) ; 
… 
} ; 
ClassName obj(arg1,…,argN) ; 
ClassName* ptr = new ClassName(Arg1,…,ArgN) ; 
© 2006 Wouter Verkerke, NIKHEF 
Constructor example – a File class 
class File { 
private: 
 int fh ; 
public: 
 File(const char* name) { 
 fh = open(name) ; 
 } 
 void read(char* p, int n) { ::read(fh,p,n) ; } 
 void write(char* p, int n) { ::write(fh,p,n) ; } 
 void close() { ::close(fh) ; } 
} ; 
File* f1 = new File(“dbase”) ; 
File f2(“records”) ; Supply constructor arguments here 
© 2006 Wouter Verkerke, NIKHEF 
Multiple constructors 
• You can define multiple constructors with different 
signatures 
– C++ function overloading concept applies to class member 
functions as well, including the constructor function 
class File { 
private: 
 int fh ; 
public: 
 File() { 
 fh = open(“Default.txt”) ; 
 } 
 File(const char* name) { 
 fh = open(name) ; 
 } 
 read(char* p, int n) { ::read(p,n) ; } 
 write(char* p, int n) { ::write(p,n) ; } 
 close() { ::close(fh) ; } 
} ; 
© 2006 Wouter Verkerke, NIKHEF 
Default constructor and default arguments 
• Default values for function arguments can be applied to 
all class member functions, including the constructor 
– If any constructor can be invoked with no arguments (i.e. it has 
default values for all arguments) it is also the default constructor 
class File { 
private: 
 int fh ; 
public: 
 File(const char* name=“Default.txt”) { 
 fh = open(name) ; 
 } 
 read(char* p, int n) { ::read(p,n) ; } 
 write(char* p, int n) { ::write(p,n) ; } 
 close() { ::close(fh) ; } 
} ; 
© 2006 Wouter Verkerke, NIKHEF 
Default constructors and arrays 
• Array allocation of objects does not allow for 
specification of constructor arguments 
• You can only define arrays of classes that have a 
default constructor 
– Be sure to define one if it is logically allowed 
– Workaround for arrays of objects that need constructor 
arguments: allocate array of pointers ; 
– Don’t forget to delete elements in addition to array afterwards! 
Fifo* fifoArray = new Fifo[100] ; 
Fifo** fifoPtrArray = new (Fifo*)[100] ; 
int i ; 
for (i=0 ; i<100 ; i++) { 
 fifoPtrArray[i] = new Fifo(arguments…) ; 
} 
Data members vs function arguments 
• Note that you can access two types of variables 
in class member functions, including the constructor 
– Data members – Will live beyond function call, 
 but not beyond object lifetime 
– Function arguments – Will only for duration of function call 
© 2006 Wouter Verkerke, NIKHEF 
class Fifo { 
public: 
 
 Fifo(int size) { _size = size ;} 
private: 
 int _size ; 
 … 
If you need to preserve information 
given as function argument to constructor, 
you must copy it to a data member 
© 2006 Wouter Verkerke, NIKHEF 
Classes contained in classes – member initialization 
• If classes have other classes w/o default constructor as 
data member you need to initialize ‘inner class’ in 
constructor of ‘outer class’ 
class File { 
 public: 
 File(const char* name) ; 
 … 
} ; 
class Database { 
 public: 
 Database(const char* fileName) ; 
 private: 
 File f ; 
} ; 
Database::Database(const char* fileName) : f(fileName) { 
 // Database constructor 
} 
© 2006 Wouter Verkerke, NIKHEF 
Class member initialization 
• General constructor syntax with member initialization 
– Note that insofar order matters, data members are initialized in 
the order they are declared in the class, not in the order they 
are listed in the initialization list in the constructor 
– Also for basic types (and any class with default ctor) the member 
initialization form can be used 
– Performance tip: for classes constructor initialization tends to be 
faster than assignment initialization (more on this later) 
ClassName::ClassName(args) : 
 member1(args), 
 member2(args), … 
 memberN(args) { 
 // constructor body 
} 
File(const char* name) { 
 fh = open(name) ; 
} 
File(const char* name) : 
fh(open(name)) { 
} 
Initialization through assignment Initialization through constructor 
Class member initialization in C++2011 
• In C++2011 a new intuitive form of data member 
initialization is supported: assignment in the class 
declaration 
– Conceptually C++ compiler will translates assignments to 
corresponding member initializations ‘front(0) etc’ 
• If both assignment and ctor member initializer are 
specified, latter takes precedence 
– I.e. Assignment can be used as the ‘default’ initializer than can be 
overridden my member init in ctor 
© 2006 Wouter Verkerke, NIKHEF 
class Fifo { 
 private: // Implementation 
 char s[LEN] ; 
 int front = 0; 
 int rear = 0 ; 
 int count = 0; 
 public: // Interface 
 … 
} ; 
© 2006 Wouter Verkerke, NIKHEF 
Destructors 
• Classes that define constructors often allocate dynamic 
memory or acquire resources 
– Example: File class acquires open file handles, any other class 
that allocates dynamic memory as working space 
• C++ defines Destructor function for each class to be 
called at end of lifetime of object 
– Can be used to release memory, resources before death 
• Class destructor syntax: 
class ClassName { 
… 
~ClassName() ; 
… 
} ; 
© 2006 Wouter Verkerke, NIKHEF 
Example of destructor in File class 
class File { 
private: 
int fh ; 
 void close() { ::close(fh) ; } 
public: 
 File(const char* name) { fh = open(name) ; } 
 ~File() { close() ; } 
 … 
} ; File is automatically closed 
when object is deleted 
void readFromFile() { 
 File *f = new File(“theFile.txt”) ; 
 // read something from file 
 delete f ; 
} 
Opens file automatically 
Closes file automatically 
© 2006 Wouter Verkerke, NIKHEF 
Automatic resource control 
• Destructor calls can take care of automatic resource 
control 
– Example with dynamically allocated File object 
– Example with automatic File object 
– Great example of abstraction of 
file concept and of encapsulation 
of resource control 
void readFromFile() { 
 File *f = new File(“theFile.txt”) ; 
 // read something from file 
 delete f ; 
} 
Opens file automatically 
Closes file automatically 
void readFromFile() { 
 File f(“theFile.txt”) ; 
 // read something from file 
} 
Opens file automatically 
Deletion of automatic 
variable f calls destructor 
& closes file automatically 
© 2006 Wouter Verkerke, NIKHEF 
Copy constructor – a special constructor 
• The copy constructor is the constructor with the 
signature 
• It is used to make a clone of your object 
• It exists for all objects because the C++ compiler 
provides a default implementation if you don’t supply 
one 
– The default copy constructor calls the copy constructor for all data 
members. Basic type data members are simply copied 
– The default implementation is not always right for your class, we’ll 
return to this shortly 
ClassA::ClassA(const ClassA&) ; 
ClassA a ; 
ClassA aclone(a) ; // aclone is an identical copy of a 
© 2006 Wouter Verkerke, NIKHEF 
Taking good care of your property 
• Use ‘ownership’ semantics in classes as well 
– Keep track of who is responsible for resources allocated by your 
object 
– The constructor and destructor of a class allow you to 
automatically manage your initialization/cleanup 
– All private resources are always owned by the class so make sure 
that the destructor always releases those 
• Be careful what happens to ‘owned’ objects when you 
make a copy of an object 
– Remember: default copy constructor calls copy ctor on all class 
data member and copies values of all basic types 
– Pointers are basic types 
– If an ‘owned’ pointer is copied by the copy constructor it is no 
longer clear which instance owns the object à danger ahead!
© 2006 Wouter Verkerke, NIKHEF 
Taking good care of your property 
• Example of default copy constructor wreaking havoc 
class Array { 
public: 
 Array(int size) { 
 initialize(size) ; 
 } 
 ~Array() { 
 delete[] _x ; 
 } 
 
private: 
 void initialize(int size) { 
 _size = size ; 
 _x = new double[size] ; 
 } 
 int _size ; 
 double* _x ; 
}; 
Watch out! Pointer data member 
© 2006 Wouter Verkerke, NIKHEF 
Taking good care of your property 
• Example of default copy constructor wreaking havoc 
void example { 
Array a(10) ; 
// ‘a’ Constructor allocates _x ; 
if (some_condition) 
 Array b(a) ; 
 // ‘b’ Copy Constructor does 
 // b._x = a._x ; 
 // b appears to be copy of a 
} 
// ‘b’ Destructor does: 
// delete[] _b.x ; 
// BUT _b.x == _a.x à Memory 
// allocated by ‘Array a’ has 
// been released by ~b() ; 
<Do something with Array> 
// You are dead!
} 
Array a 
_x 
Array b 
_x 
double[] 
Array a 
_x û Problem is here: 
b._x points to 
same array 
as a._x! 
© 2006 Wouter Verkerke, NIKHEF 
Taking good care of your property 
• Example of default copy constructor wreaking havoc 
class Array { 
public: 
 Array(int size) { 
 initialize(size) ; 
 } 
 ~Array() { 
 delete[] _x ; 
 } 
 
private: 
 void initialize(int size) { 
 _size = size ; 
 _x = new double[size] ; 
 } 
 int _size ; 
 double* _x ; 
}; 
void example { 
Array a(10) ; 
// ‘a’ Constructor allocates _x ; 
if (some_condition) 
 Array b(a) ; 
 // ‘b’ Copy Constructor does 
 // b._x = a._x ; 
 // b appears to be copy of a 
} 
// ‘b’ Destructor does 
// delete[] _b.x 
// BUT _b.x == _a.x à Memory 
// allocated by ‘Array a’ has 
// been released by ~b() ; 
<Do something with Array> 
// You are dead!
} 
Whenever your class owns dynamically allocated 
memory or similar resources you need to implement 
your own copy constructor! 
© 2006 Wouter Verkerke, NIKHEF 
Example of a custom copy constructor 
class Array { 
public: 
 Array(int size) { 
 initialize(size) ; 
 } 
 Array(const double* input, int size) { 
 initialize(size) ; 
 int i ; 
 for (i=0 ; i<size ; i++) _x[i] = input[i] ; 
 } 
 Array(const Array& other) { 
 initialize(other._size) ; 
 int i ; 
 for (i=0 ; i<_size ; i++) _x[i] = other._x[i] ; 
 } 
private: 
 void initialize(int size) { 
 _size = size ; 
 _x = new double[size] ; 
 } 
 int _size ; 
 double* _x ; 
}; 
Symbol _x refers 
to data member 
of this instance 
Symbol other._x 
refers to data 
member of other
instance 
Classes vs Instances 
Here we are dealing 
explicitly with one
class and two instances 
© 2006 Wouter Verkerke, NIKHEF 
Another solution to copy constructor problems 
• You can disallow objects being copied by declaring their 
copy constructor as ‘private’ 
– Use for classes that should not copied because they own nonclonable resources or have a unique role 
– Example: class File – logistically and resource-wise tied to a 
single file so a clone of a File instance tied to the same file 
makes no sense 
class File { 
private: 
int fh ; 
 close() { ::close(fh) ; } 
File(const File&) ; // disallow copying 
public: 
 File(const char* name) { fh = open(name) ; } 
 ~File() { close() ; } 
 … 
} ; 
© 2006 Wouter Verkerke, NIKHEF 
Deleting default constructors in C++2011 
• In C++2011 new language feature allows to delete 
default implementations of constructors explicitly as 
follows 
class File { 
private: 
int fh ; 
 close() { ::close(fh) ; } 
public: 
 File(const char* name) { fh = open(name) ; } 
 File(const File&) = delete ; // disallow copying 
 ~File() { close() ; } 
 … 
} ; 
© 2006 Wouter Verkerke, NIKHEF 
Class Analysis and Design 
Class Analysis 4 & Design 
© 2006 Wouter Verkerke, NIKHEF 
Class Analysis and Design 
• We now understand the basics of writing classes 
– Now it’s time to think about how to decompose your problem into 
classes 
• Writing good OO software involves 3 separate steps 
1. Analysis 
2. Design 
3. Programming 
– You can do them formally or informally, well or poorly, but you 
can’t avoid them 
• Analysis 
– How to divide up your problem in classes 
– What should be the functionality of each class 
• Design 
– What should the interface of your class look like? 
© 2006 Wouter Verkerke, NIKHEF 
Analysis – Find the class 
• OO Analysis subject of many text books, many different 
approaches 
– Here some basic guidelines 
1. Try to describe briefly in plain English (or Dutch) what you intend 
your software to do 
• Rationale – This naturally makes you think about your software in a high abstraction 
level 
2. Associate software objects with natural objects (‘objects in the 
application domain’) 
• Actions translate to member functions 
• Attributes translate to data members 
3. Make hierarchical ranking of objects using ‘has-a’ relationships 
• Example: a ‘BankAccount’ has-a ‘Client’ 
• Has-a relationships translate into data members that are objects 
4. Iterate! Nobody gets it right the first time 
© 2006 Wouter Verkerke, NIKHEF 
Analysis – A textbook example 
• Example of telephone hardware represented as class 
hierarchy using ‘has-a’ relationships 
– Programs describing or simulating hardware usually have an 
intuitive decomposition and hierarchy 
Telephone 
Cable Housing Dialer Handset 
Earpiece Mouthpiece Cable 
Each line represents 
a ‘has-a’ relationship 
© 2006 Wouter Verkerke, NIKHEF 
Analysis – Example from High Energy Physics 
• Real life often not so clean cut 
• Example problem from High Energy physics 
– We have a file with experimental data from a calorimeter. 
– A calorimeter is a HEP detector that detects energy through 
absorption. A calorimeter consists of a grid of detector modules 
(cells) that each individually measure deposited energy 
Incoming particle 
Calorimeter 
Cell 
Cells with energy deposit 
© 2006 Wouter Verkerke, NIKHEF 
Analysis – Example from High Energy Physics 
• First attempt to identify objects in data processing 
model and their containment hierarchy 
– Calorimeter global position and cell coordinates are not physical 
objects but separate logical entities so we make separate classes 
for those too 
Calorimeter 
CaloCell 
Coordinate 
has-a 
has-a 
Position 
has-a 
Calorimeter 
CaloCell 
Position 
Coordinate 
© 2006 Wouter Verkerke, NIKHEF 
Analysis – Example from High Energy Physics 
• Key Analysis sanity check – Can we describe what each 
object is, in addition to what it does? 
– Answer: yes 
Calorimeter 
CaloCell 
Coordinate 
has-a 
has-a 
Position 
has-a 
© 2006 Wouter Verkerke, NIKHEF 
Analysis – Example from High Energy Physics 
• Iterating the design – are there other/better solutions? 
– Remember ‘strong cohesion’ and ‘loose coupling’ 
– Try different class decomposition, moving functionality from one 
class to another 
• Example of alternative solution 
– We can store the CaloCells in an intelligent container class 
CellGrid that mimics a 2D array and keeps track of coordinates 
Calorimeter 
CaloCell 
CellGrid 
has-a 
has-a 
Position 
has-a 
Calorimeter 
CaloCell 
Position 
CellGrid 
© 2006 Wouter Verkerke, NIKHEF 
Analysis – Example from High Energy Physics 
• Which solution is better? 
– Source of ambiguity: cell coordinate not really intrinsic property of 
calorimeter cell 
– Path to solution: what are cell coordinates used for? Import for insight in 
best solution. Real-life answer: to find adjacent (surrounding cells) 
– Solution: Adjacency algorithms really couple strongly to layout of cells, not 
to property of individual cells à design with layout in separate class 
probably better
Calorimeter 
CaloCell 
CellGrid 
has-a 
has-a 
Position 
has-a 
Calorimeter 
CaloCell 
Coordinate 
has-a 
has-a 
Position 
has-a 
© 2006 Wouter Verkerke, NIKHEF 
Extending the example – Has-A vs Uses-A 
• Next step in analysis of calorimeter data is to reconstruct 
properties of incoming particles 
– Reconstruct blobs of energy deposited into multiple cells 
– Output stored in new class CaloCluster, which stores properties of cluster 
and refers back to cells that form the cluster 
– Now we run into some problems with ‘has-a’ semantics: All CaloCells in 
Calorimeter are owned by Calorimeter, so CaloCluster doesn’t really 
‘have’ them. Solution: ‘Uses-A’ semantic. 
– A ‘Uses-A’ relation translates into a pointer or reference to an object 
Calorimeter 
CaloCell 
CellGrid 
has-a 
has-a 
Position 
has-a 
CaloCluster 
has-a?, uses-a! 
© 2006 Wouter Verkerke, NIKHEF 
Summary on OO analysis 
• Choosing classes: You should be able to say what a class is 
– A ‘Has-A’ relation translates into data members, a ‘Uses-A’ relation into a 
pointer 
– Functionality of your natural objects translates in member functions 
• Be wary of complexity 
– Signs of complexity: repeated identical code, too many function arguments, 
too many member functions, functions with functionality that cannot be 
succinctly described 
– A complex class is difficult to maintain à Redesign into smaller units 
• There may not be a unique or ‘single best’ decomposition of 
your class analysis 
– Such is life. Iterate your design, adapt to new developments 
• We’ll revisit OOAD again in a while when we will discuss 
polymorphism and inheritance which open up many new 
possibility (and pitfalls) 
© 2006 Wouter Verkerke, NIKHEF 
The art of proper class design 
• Class Analysis tells you what functionality your class should have 
• Class Design now focuses on how to package that best 
• Focus: Make classes easy to use 
– Robust design: copying objects, assigning them (even to themselves) should 
not lead to corruption, memory leaks etc 
– Aim for intuitive behavior: mimic interface of built-in types where possible 
– Proper functionality for ‘const objects’ 
• Reward: better reusability of code, easier maintenance, shorter 
documentation 
• And remember: Write the interface first, then the implementation 
– While writing the interface you might still find flaws or room for improvements 
in the design. It is less effort to iterate if there is no implementation to data 
© 2006 Wouter Verkerke, NIKHEF 
The art of proper class design 
• Focus on following issues next 
– Boilerplate class design
 
– Accessors & Modifiers – Proper interface for const objects 
– Operator overloading
– Assignment – Why you need it 
– Overloading arithmetic, and subscript operators
– Overloading conversion operators, use of explicit 
– Spilling your guts – friends 
© 2006 Wouter Verkerke, NIKHEF 
Accessor / modifier pattern 
• For each data member that is made publicly available 
implement an accessor and a modifier 
• Pattern 1 – Encapsulate read & write access in separate functions 
– Complete control over input and output. Modifier can be protected for better 
access control and modifier can validate input before accepting it 
– Note that returning large data types by value is inefficient. Consider to return a 
const reference instead 
class Demo { 
private: 
 float _val ; 
public: 
 // accessor 
 float getVal() const { 
 return _val ; 
 } 
 // modifier 
 void setVal(float newVal) { 
 // Optional validity checking goes here 
 _val = newVal ; 
 } 
} ; 
const here is important 
otherwise this will fail 
const Demo demo ; 
demo.getVal() ; 
© 2006 Wouter Verkerke, NIKHEF 
Accessor / modifier pattern 
• Pattern 2 – Return reference to internal data member 
– Must implement both const reference and regular reference! 
– Note that no validation is possible on assignment. Best for built-in 
types with no range restrictions or data members that are classes 
themselves with built-in error checking and validation in their 
modifier function 
class Demo { 
private: 
 float _val ; 
public: 
 float& val() { return _val ; } 
 const float& val() const { return _val ; } 
} ; 
const version here is essential, 
otherwise code below will fail 
const Demo demo ; 
float demoVal = demo.val() ; 
© 2006 Wouter Verkerke, NIKHEF 
Making classes behave like built-in objects 
• Suppose we have written a ‘class complex’ that 
represents complex numbers 
– Execution of familiar math through add(),multiply() etc member 
functions easily obfuscates user code 
– Want to redefine meaning of C++ operators +,* etc to perform 
familiar function on newly defined classes, i.e. we want compiler 
to automatically translate: 
• Solution: C++ operator overloading 
complex a(3,4), b(5,1) ; 
b.multiply(complex(0,1)) ; 
a.add(b) ; 
a.multiply(b) ; 
b.subtract(a) ; 
c = a * b ; c.assign(a.multiply(b)) ; 
© 2006 Wouter Verkerke, NIKHEF 
Operator overloading 
• In C++ operations are functions too, i.e. 
• Operators can be both regular functions as well as class 
member functions 
– In example above operator=() is implemented as member 
function of class complex, operator+() is implemented as global 
function 
– You have free choice here, operator+() can also be implemented 
as member function in which case the code would be come 
– Design consideration: member functions (including operators) can 
access ‘private’ parts, so operators that need this are easier to 
implement as member functions 
• More on this in a while… 
complex c = a + b; c.operator=(operator+(a,b)); 
What you write What the compiler does 
c.operator=(a.operator+(b)); 
© 2006 Wouter Verkerke, NIKHEF 
An assignment operator – declaration 
• Lets first have a look at implementing the assignment 
operator for our fictitious class complex 
• Declared as member operator of class complex: 
– Allows to modify left-hand side of assignment 
– Gives access to private section of right-hand side of assignment 
class complex { 
public: 
 complex(double r, double i) : _r(r), _i(i) {} ; 
 complex& operator=(const complex& other) ; 
private: 
 double _r, _i ; 
} ; 
© 2006 Wouter Verkerke, NIKHEF 
Handle self-assignment explicitly 
It happens, really! 
An assignment operator – implementation 
complex& complex::operator=(const complex& other) { 
 // handle self-assignment 
 if (&other == this) return *this ; 
 // copy content of other 
 _r = other._r ; 
 _i = other._i ; 
 // return reference to self 
 return *this ; 
} 
Copy content of other object 
It is the same class, so you have 
access to its private members 
Return reference to self
Takes care of chain assignments 
© 2006 Wouter Verkerke, NIKHEF 
Copy content of other object 
It is the same class, so you have 
access to its private members 
Handle self-assignment explicitly 
It happens, really! 
An assignment operator – implementation 
complex& complex::operator=(const complex& other) { 
 // handle self-assignment 
 if (&other == this) return *this ; 
 // copy content of other 
 _r = other._r ; 
 _i = other._i ; 
 // return reference to self 
 return *this ; 
} 
Why ignoring self-assignment can be bad 
Image you store information in a dynamically allocated array 
that needs to be reallocated on assignment… 
A& A::operator=(const A& other) { 
 delete _array ; 
 _len = other._len; 
 _array = new int[other._len] ; 
 // Refill array here 
 return *this ; 
} 
Oops if (other==*this) 
you just deleted your own 
array! 
© 2006 Wouter Verkerke, NIKHEF 
An assignment operator – implementation 
complex& complex::operator=(const complex& other) { 
 // handle self-assignment 
 if (&other == this) return *this ; 
 // copy content of other 
 _r = other._r ; 
 _i = other._i ; 
 // return reference to self 
 return *this ; 
} 
Return reference to self
Takes care of chain assignments 
Why you should return a reference to yourself 
Returning a reference to yourself allows chain assignment 
Not mandatory, but essential if you want to mimic behavior of built-in types 
complex a,b,c ; 
a = b = c ; complex a,b,c ; 
a.operator=(b.operator=(c)) ; 
Returns reference to b 
© 2006 Wouter Verkerke, NIKHEF 
The default assignment operator 
• The assignment operator is like the copy constructor: 
it has a default implementation 
– Default implementation calls assignment operator for each data member 
• If you have data member that are pointers to ‘owned’ objects 
this will create problems 
– Just like in the copy constructor 
• Rule: If your class owns dynamically allocated memory or 
similar resources you should implement your own assignment 
operator 
• You can disallow objects being assigned by declaring their 
assignment operator as ‘private’ 
– Use for classes that should not copied because they own non-assignable 
resources or have a unique role (e.g. an object representing a file) 
© 2006 Wouter Verkerke, NIKHEF 
Example of assignment operator for owned data members 
class A { 
private: 
 float* _arr ; 
 int _len ; 
public: 
 operator=(const A& other) ; 
} ; 
C++ default operator=() Custom operator=() 
A& operator=(const A& other) { 
 if (&other==this) return *this; 
 _arr = other._arr ; 
 _len = other._len ; 
 return *this ; 
} 
A& operator=(const A& other) { 
 if (&other==this) return *this; 
 _len = other._len ; 
 delete[] _arr ; 
 _arr = new int[_len] ; 
 int i ; 
 for (i=0; i<len ; i++) { 
 _arr[i] = other._arr[i] ; 
 } 
 return *this ; 
} 
YOU DIE. 
If other is deleted before us, _arr will point 
to garbage. Any subsequent use of self has 
undefined results 
If we are deleted before other, we will delete 
_arr=other._arr, which is not owned by us: 
other._arr will point to garbage and will 
attempt to delete array again 
© 2006 Wouter Verkerke, NIKHEF 
Overloading other operators 
• Overloading of operator=() mandatory if object owns 
other objects 
• Overloading of other operators voluntary 
– Can simplify use of your classes (example: class complex) 
– But don’t go overboard – Implementation should be congruent 
with meaning of operator symbol 
• E.g. don’t redefine operator^() to implement exponentiation 
– Comparison operators (<,>,==,!=) useful to be able to put class 
in sortable container 
– Addition/subtraction operator useful in many contexts: math 
objects, container class (add new content/ remove content) 
– Subscript operator[] potentially useful in container classes 
– Streaming operators <<() and operator>>() useful for printing in 
many objects 
• Next: Case study of operator overloading with a custom 
string class 
© 2006 Wouter Verkerke, NIKHEF 
The custom string class 
• Example string class for illustration of operator overloading 
class String { 
private: 
 char* _s ; 
 int _len ; 
 void insert(const char* str) { // private helper function 
 _len = strlen(str) ; 
 if (_s) delete[] _s ; 
 _s = new char[_len+1] ; 
 strcpy(_s,str) ; 
 } 
public: 
 String(const char* str= “”) : _s(0) { insert(str) ; } 
 String(const String& a) : _s(0) { insert(a._s) ; } 
 ~String() { if (_s) delete[] _s ; } 
 int length() const { return _len ; } 
 const char* data() const { return _s ; } 
 String& operator=(const String& a) { 
 if (this != &a) insert(a._s) ; 
 return *this ; 
 } 
} ;
Data members, array & length 
© 2006 Wouter Verkerke, NIKHEF 
The custom string class 
• Example string class for illustration of operator overloading 
class String { 
private: 
 char* _s ; 
 int _len ; 
 void insert(const char* str) { // private helper function 
 _len = strlen(str) ; 
 if (_s) delete[] _s ; 
 _s = new char[_len+1] ; 
 strcpy(_s,str) ; 
 } 
public: 
 String(const char* str= “”) : _s(0) { insert(str) ; } 
 String(const String& a) : _s(0) { insert(a._s) ; } 
 ~String() { if (_s) delete[] _s ; } 
 int length() const { return _len ; } 
 const char* data() const { return _s ; } 
 String& operator=(const String& a) { 
 if (this != &a) insert(a._s) ; 
 return *this ; 
 } 
} ;
Delete old buffer, 
allocate new buffer, 
copy argument into new buffer 
© 2006 Wouter Verkerke, NIKHEF 
The custom string class 
• Example string class for illustration of operator overloading 
class String { 
private: 
 char* _s ; 
 int _len ; 
 void insert(const char* str) { // private helper function 
 _len = strlen(str) ; 
 if (_s) delete[] _s ; 
 _s = new char[_len+1] ; 
 strcpy(_s,str) ; 
 } 
public: 
 String(const char* str= “”) : _s(0) { insert(str) ; } 
 String(const String& a) : _s(0) { insert(a._s) ; } 
 ~String() { if (_s) delete[] _s ; } 
 int length() const { return _len ; } 
 const char* data() const { return _s ; } 
 String& operator=(const String& a) { 
 if (this != &a) insert(a._s) ; 
 return *this ; 
 } 
} ;
Ctor 
Dtor 
© 2006 Wouter Verkerke, NIKHEF 
The custom string class 
• Example string class for illustration of operator overloading 
class String { 
private: 
 char* _s ; 
 int _len ; 
 void insert(const char* str) { // private helper function 
 _len = strlen(str) ; 
 if (_s) delete[] _s ; 
 _s = new char[_len+1] ; 
 strcpy(_s,str) ; 
 } 
public: 
 String(const char* str= “”) : _s(0) { insert(str) ; } 
 String(const String& a) : _s(0) { insert(a._s) ; } 
 ~String() { if (_s) delete[] _s ; } 
 int length() const { return _len ; } 
 const char* data() const { return _s ; } 
 String& operator=(const String& a) { 
 if (this != &a) insert(a._s) ; 
 return *this ; 
 } 
} ;
Overloaded 
assignment 
operator 
© 2006 Wouter Verkerke, NIKHEF 
Overloading operator+(), operator+=() 
• Strings have a natural equivalent of addition 
– “A” + “B” = “AB” 
– Makes sense to implement operator+ 
• Coding guideline: if you implement +, also implement += 
– In C++ they are separate operators. 
– Implementing + will not automatically make += work. 
– Implementing both fulfills aim to mimic behavior of built-in types 
• Practical tip: Do operator+=() first. 
– It is easier 
– Operator+ can trivially be implemented in terms of operator+= 
(code reuse) 
© 2006 Wouter Verkerke, NIKHEF 
Overloading operator+(), operator+=() 
• Example implementation for String 
– Argument is const (it is not modified after all) 
– Return is reference to self, which allows chain assignment 
class String { 
public: 
 String& operator+=(const String& other) { 
 int newlen = _len + other._len ; // calc new length 
 char* newstr = new char[newlen+1] ; // alloc new buffer 
 strcpy(newstr,_s) ; // copy own contents 
 strcpy(newstr+_len,other._s) ; // append new contents 
 if (_s) delete[] _s ; // release orig memory 
 _s = newstr ; // install new buffer 
 _len = newlen ; // set new length
 return *this ; 
 } 
} ; 
© 2006 Wouter Verkerke, NIKHEF 
Overloading operator+(), operator+=() 
• Now implement operator+() using operator+=() 
– Operator is a global function rather than a member function – no 
privileged access is needed to String class content 
– Both arguments are const as neither contents is changed 
– Result string is passed by value 
String operator+(const String& s1, const String& s2) { 
 String result(s1) ; // clone s1 using copy ctor 
 result += s2 ; // append s2 
 return result ; // return new result 
} 
© 2006 Wouter Verkerke, NIKHEF 
Overloading operator+() with different types 
• You can also add heterogeneous types with operator+() 
– Example: String(“A”) + “b” 
• Implementation of heterogeneous operator+ similar 
– Illustration only, we’ll see later why we don’t need it in this particular 
case 
• NB: Arguments of operator+() do not commute 
operator+(const& A, const& B)!=operator+(const& B, const& A) 
– If you need both, implement both 
String operator+(const String& s1, const char* s2) { 
 String result(s1) ; // clone s1 using copy ctor 
 result += String(s2) ; // append String converted s2 
 return result ; // return new result 
} 
Working with class String
• Demonstration of operator+ use on class String 
• Compare ease of use (including correct memory 
management) to join() functions of exercise 2.1...
© 2006 Wouter Verkerke, NIKHEF 
// Create two strings 
String s1(“alpha”) ; 
String s2(“bet”) ; 
// Concatenate strings into 3rd string 
String s3 = s1+s2 ; 
// Print concatenated result 
cout << s1+s2 << endl ; 
cout << String(s1+s2) << endl ; 
Implicit conversion by compiler
© 2006 Wouter Verkerke, NIKHEF 
Class string 
• The C++ Standard Library provides a class string
very similar to the example class String that we have 
used in this chapter 
– Nearly complete set of operators defined, internal buffer memory 
expanded as necessary on the fly 
– Declaration in <string> 
– Example 
string dirname(“/usr/include”) ; 
string filename ; 
cout << “Give first name:” ; 
// filename buffer will expand as necessary 
cin >> filename ; 
// Append char arrays and string intuitively 
string pathname = dirname + ”/” + filename ; 
// But conversion string à char* must be done explicitly 
ifstream infile(pathname.c_str()) ; 
© 2006 Wouter Verkerke, NIKHEF 
Generic programming – Templates 
Generic 
Programming 6 
– Templates 
© 2006 Wouter Verkerke, NIKHEF 
Introduction to generic programming 
• So far concentrated on definitions of objects as means 
of abstraction 
• Next: Abstracting algorithms to be independent of the 
type of data they work with 
• Naïve – max() 
– Integer implementation 
– (Naïve) real-life use 
// Maximum of two values 
int max(int a, int b) { 
 return (a>b) ? a : b ; 
} 
int m = 43, n = 56 ; 
cout << max(m,n) << endl ; // displays 56 (CORRECT) 
double x(4.3), y(5.6) ; 
cout << max(x,y) << endl ; // displays 5 (INCORRECT) 
© 2006 Wouter Verkerke, NIKHEF 
Generic algorithms – the max() example 
• First order solution – function overloading 
– Integer and float implementations 
– (Naïve) real-life use 
// Maximum of two values 
int max(int a, int b) { 
 return (a>b) ? a : b ; 
} 
// Maximum of two values 
float max(float a, float b) { 
 return (a>b) ? a : b ; 
} 
int m = 43, n = 56 ; 
cout << max(m,n) << endl ; // displays 56 (CORRECT) 
double x(4.3), y(5.6) ; 
cout << max(x,y) << endl ; // displays 5.6 (CORRECT) 
© 2006 Wouter Verkerke, NIKHEF 
Generic algorithms – the template solution 
• Overloading solution works but not elegant 
– Duplicated code (always a sign of trouble) 
– We need to anticipate all use cases in advance 
• C++ solution – a template function 
template<class TYPE> 
TYPE max(const TYPE& a, const TYPE& b) { 
 return (a>b) ? a : b ; 
} 
int m = 43, n = 56 ; 
cout << max(m,n) << endl ; // displays 56 (CORRECT) 
double x(4.3), y(5.6) ; 
cout << max(x,y) << endl ; // displays 5.6 (CORRECT) 
© 2006 Wouter Verkerke, NIKHEF 
Basics of templates 
• A template function is function or algorithm for a 
generic TYPE 
– Whenever the compiler encounter use of a template function with 
a given TYPE that hasn’t been used before the compiler will 
instantiate the function for that type 
template<class TYPE> 
TYPE max(const TYPE& a, const TYPE& b) { 
 return (a>b) ? a : b ; 
} 
int m = 43, n = 56 ; 
// compiler automatically instantiates max(int&, int&) 
cout << max(m,n) << endl ; // displays 56 (CORRECT) 
double x(4.3), y(5.6) ; 
// compiler automatically instantiates max(float&, float&) 
cout << max(x,y) << endl ; // displays 5.6 (CORRECT) 
© 2006 Wouter Verkerke, NIKHEF 
Basics of templates – assumptions on TYPE 
• A template function encodes a generic algorithm but not 
a universal algorithm 
– TYPE still has to meet certain criteria to result in proper code 
– For example: 
assumes that TYPE.operator>(TYPE&) is defined 
• Style tip: When you write a template spell out in the 
documentation what assumptions you make (if any) 
template<class TYPE> 
TYPE max(const TYPE& a, const TYPE& b) { 
 return (a>b) ? a : b ; 
} 
© 2006 Wouter Verkerke, NIKHEF 
Basics of templates – another example 
• Here is another template function example 
– Allocation of generic storage space 
– Only assumption of this swap function: TYPE::operator=()
defined 
– Since operator=() has a default implementation for all types this 
swap function truly universal 
• Unless of course a class declares operator=() to be private in which case no 
copies can be made at all 
template <class TYPE> 
void swap(TYPE& a, TYPE& b) { 
 TYPE tmp = a ; // declare generic temporary 
 a = b ; 
 b = tmp ; 
} 
© 2006 Wouter Verkerke, NIKHEF 
Template specialization 
• Sometimes you have a template function that is almost 
generic because 
– It doesn’t work (right) with certain types. 
For example max(const char* a, const char* b)
– Or for certain types there is a more efficient implementation of the 
algorithm 
• Solution: provide a template specialization 
– Can only be done in definition, not in declaration 
– Tells compiler that specialized version of function for given template should 
be used when appropriate 
template<class TYPE> 
TYPE max(const TYPE& a, const TYPE& b) { 
 return (a>b) ? a : b ; // comparing pointer not sensible 
} 
template<> 
const char* max(const char*& a, const char*& b) { 
 return strcmp(a,b)>0 ? a : b ; // Use string comparison instead
} 
© 2006 Wouter Verkerke, NIKHEF 
Template classes 
• Concept of templates also extends to classes 
– Can define a template class just like a template function 
• Class template mechanism allows to create generic 
classes 
– A generic class provides the same set of behaviors for all types 
– Eliminates code duplication 
– Simplifies library design 
– Use case per excellence: container classes (arrays, stacks etc…) 
template<class T> 
class Triplet { 
public: 
 Triplet(T& t1, T& t2, T& t3) () ; 
private: 
 T _array[3] ; 
}; 
© 2006 Wouter Verkerke, NIKHEF 
Generic container class example 
• A generic stack example 
template<class TYPE> 
class Stack { 
public: 
 Stack(int size) : _len(size), _top(0) { // constructor 
 _v = new TYPE[_len] ; 
 } 
 Stack(const Stack<TYPE>& other) ; // copy constructor 
 ~Stack() { delete[] _v ; } 
 void push(const TYPE& d) { _v[_top++] = d ; } 
 TYPE pop() { return _v[--_top] ; } 
 Stack<TYPE>& operator=(const Stack<TYPE>& s) ; // assignment 
private: 
 TYPE* _v ; 
 int _len ; 
 int _top ; 
} ; 
Assumptions on TYPE 
-Default constructor 
-Assignment defined 
© 2006 Wouter Verkerke, NIKHEF 
Using the generic container class 
• Example using Stack 
void example() { 
 Stack<int> s(10) ; // stack of 10 integers 
 Stack<String> t(20) ; // stack of 20 Strings 
 s.push(1) ; 
 s.push(2) ; 
 cout << s.pop() << endl ; 
 // OUTPUTS ‘2’ 
 
 t.push(“Hello”) ; // Exploit automatic 
 t.push(“World”) ; // const char* à String conversion 
 cout << t.pop() << “ “ << t.pop() << endl ; 
 // OUTPUTS ‘World Hello’ 
} 
Initializer list of generic containers (C++ 2011) 
• In C++2011 the compound initializer syntax of arrays 
can be extended to generic container classes 
© 2006 Wouter Verkerke, NIKHEF 
int x[3] = { 0, 1, 2 } ; 
IntVector iv = { 0, 1, 2 } ; // Also works! 
// Because constructor with initializer_list
// was added to class IntVector
class IntVector { 
public: 
 IntVector(std::initializer_list<int> ilist) ; 
 ~IntVector() ; 
private: 
 int* _xvec ; 
} ; 
Initializer list of generic containers (C++ 2011) 
• In C++2011 the compound initializer syntax of arrays 
can be extended to generic container classes 
– Retrieve content with iterator semantics – more in Module 7 
© 2006 Wouter Verkerke, NIKHEF 
class IntVector { 
public: 
 IntVector(std::initializer_list<int> ilist) { 
 _xvec = new int[ilist.size()] ; 
 int i(0) ; 
 auto iter = ilist.begin() ; 
 while (iter != ilist.end()) { 
 _xvec[i++] = *iter ; 
 iter++ ; 
 } 
 ~IntVector() ; 
private: 
 int* _xvec ; 
} ; 
Pointer memory management tools (C++2011) 
• C++ also adds templated-based tools for pointer-based 
memory management 
• Idea: have a dedicated wrapper class that ‘owns’ a 
pointer 
– Can be returned by-value from functions, if wrapper is deleted 
because it goes out of scope, it will delete the pointer 
• Situation without wrapper 
© 2006 Wouter Verkerke, NIKHEF 
double* allocate_buffer(int size) { 
 return new double[size] ; 
} 
int main() { 
 // we own tmp, don’t forget to delete 
 double* tmp = allocate_buffer(100) ; 
 tmp[3] = 5 ; 
} 
Pointer memory management tools (C++2011) 
• C++ also adds templated-based tools for pointer-based 
memory management 
• Idea: have a dedicated wrapper class that ‘owns’ a 
pointer 
– Can be returned by-value from functions, if wrapper is deleted 
because it goes out of scope, it will delete the pointer 
• Situation with wrapper 
© 2006 Wouter Verkerke, NIKHEF 
unique_ptr<double> allocate_buffer(int size) { 
 return unique_ptr<double>(new double[size]) ; 
} 
int main() { 
 // we own tmp, don’t forget to delete 
 unique_ptr<double> tmp = allocate_buffer(100) ; 
 tmp[3] = 5 ; 
} 
// memory held by tmp deleted when tmp goes out of scope 
Pointer memory management tools (C++2011) 
• C++ also adds templated-based tools for pointer-based 
memory management 
• Idea: have a dedicated wrapper class that ‘owns’ a 
pointer 
– Can be returned by-value from functions, if wrapper is deleted 
because it goes out of scope, it will delete the pointer 
• Situation with wrapper 
© 2006 Wouter Verkerke, NIKHEF 
int main() { 
 // we own tmp, don’t forget to delete 
 unique_ptr<double> tmp = allocate_buffer(100) ; 
 tmp[3] = 5 ; 
} 
Class unique_ptr overloads operator-> to
return pointer to payload. Can use unique_ptr<T> 
in same way as T* 
© 2006 Wouter Verkerke, NIKHEF 
The Standard Template Library 
Standard Library II 7 the Template Library 
© 2006 Wouter Verkerke, NIKHEF 
Introduction to STL 
• STL = The Standard Template Library 
– A collection of template classes and functions for general use 
– Started out as experimental project by Hewlett-Packard 
– Now integral part of ANSI C++ definition of ‘Standard Library’ 
– Excellent design! 
• Core functionality – Collection & Organization 
– Containers (such as lists) 
– Iterators (abstract methods to iterate of containers) 
– Algorithms (such as sorting container elements) 
• Some other general-purpose classes 
– Classes string, complex, bits 
© 2006 Wouter Verkerke, NIKHEF 
Overview of STL components 
• Containers 
– Storage facility of objects 
• Iterators 
– Abstract access mechanism to collection contents 
– “Pointer to container element” with functionality to move pointer 
• Algorithms 
– Operations (modifications) of container organization of contents 
– Example: Sort contents, apply operation to each of elements 
Object Object Object Object Object Object 
Container 
© 2006 Wouter Verkerke, NIKHEF 
STL Advantages 
• STL containers are generic 
– Templates let you use the same container class with any class or built-in 
type 
• STL is efficient 
– The various containers provide different data structures. 
– No inheritance nor virtual functions are used (we’ll cover this shortly). 
– You can choose the container that is most efficient for the type of 
operations you expect 
• STL has a consistent interface 
– Many containers have the same interface, making the learning curve easier 
• Algorithms are generic 
– Template functions allow the same algorithm to be applied to different 
containers. 
• Iterators let you access elements consistently 
– Algorithms work with iterators 
– Iterators work like C++ pointers 
• Many aspects can be customized easily 
© 2006 Wouter Verkerke, NIKHEF 
Overview of STL containers classes 
• Sequential containers (with a defined order) 
– vector 
– list 
– deque (double-ended queue) 
– stack 
– queue 
– priority_queue
• Associative containers (no defined order, access by key) 
– set 
– multiset
– map 
– Multimap
– unordered_set, unordered_map (C++2011) 
Fundamental container 
implementations 
with different performance tradeoffs 
Adapters of fundamental 
containers 
that provide a modified functionality 
© 2006 Wouter Verkerke, NIKHEF 
Common container facilities 
• Common operations on fundamental containers 
– insert – Insert element at defined location 
– erase – Remove element at defined location 
 
– push_back – Append element at end 
– pop_back – Remove & return element at end 
– push_front – Append element at front 
– pop_front – Remove & return element at front 
– at – Return element at defined location (with range checking) 
– operator[] – Return element at defined location (no range checking) 
– Not all operations exist at all containers (e.g. push_back is undefined on 
a set as there is no ‘begin’ or ‘end’ in an associative container) 
© 2006 Wouter Verkerke, NIKHEF 
Vector <vector> 
• Vector is similar to an array 
– Manages its own memory allocation 
– Initial length at construction, but can be extended later 
– Elements initialized with default constructor 
– Offers fast random access to elements 
– Example 
0 1 2 
#include <vector> 
vector<int> v(10) ; 
v[0] = 80 ; 
v.push_back(70) ; // creates v[10] and sets it to 70 
vector<double> v2(5,3.14) ; // initialize 5 elements to 3.14 
© 2006 Wouter Verkerke, NIKHEF 
List <list> 
• Implemented as doubly linked list 
– Fast insert/remove of in the middle of the collection 
– No random access 
– Example 
front end 
front end 
#include <list> 
list<double> l ; 
l.push_front(30.5) ; // append element in front 
l.insert(somewhere,47.5) ; // insert in middle 
iterator ‘pointer’ in collection 
Template<class T> 
Struct ListElem { 
 T elem ; 
 ListElem* prev ; 
 ListElem* next ; 
} 
© 2006 Wouter Verkerke, NIKHEF 
Stack <stack> 
• A stack is an adapter of deque 
– It provides a restricted view of a deque 
– Can only insert/remove elements 
at end (‘top’ in stack view’) 
– No random access 
• Example 
top 
bottom void sender() { 
 stack<string> s ; 
 s.push(“Aap”) ; 
 s.push(“Noot”) ; 
 s.push(“Mies”) ; 
 receiver(s) ; 
} 
void receiver(stack<string>& s) { 
 while(!s.empty()) cout << s.pop() << “ “ ; 
} 
// outputs “Mies Noot Aap” 
push() pop() 
© 2006 Wouter Verkerke, NIKHEF 
Sequential versus associative containers 
• So far looked at several forms of sequential containers 
– Defining property: storage organization revolves around ordering: all elements
are stored in a user defined order 
– Access to elements is always done by relative or absolute position in container 
– Example: 
• For many types of problems access by key is much more natural 
– Example: Phone book. You want to know the phone number (=value) for a 
name (e.g. ‘B. Stroustrup’ = key) 
– You don’t care in which order collection is stored as you never retrieve the 
information by positional reference (i.e. you never ask: give me the 103102nd
entry in the phone book) 
– Rather you want to access information with a ‘key’ associated with each value 
• Solution: the associative container
vector<int> v ; 
v[3] = 4rd element of vector v 
List<double> l ; 
double tmp = *(l.begin()) ; // 1st element of list 
© 2006 Wouter Verkerke, NIKHEF 
Sequential versus associative containers 
front end 
Give me 3rd element 
key: 
Bjarne 
value: 
43 
key: 
Thor 
value: 
39 
key: 
Ivar 
value: 
49 
key: 
Leif 
value: 
47 
key: 
Brian 
value: 
52 
Give me value of element 
with key “Leif” 
Sequential 
Associative 
© 2006 Wouter Verkerke, NIKHEF 
Pair <utility> 
• Utility for associative containers – stores a key-value pair 
 
– Main use of pair is as input or return value 
template<type T1, type T2> 
struct pair { 
 T1 first ; 
 T2 second ; 
 pair(const T1&, const T2&) ; 
} ; 
template<type T1, type T2> 
pair<T1,T2> make_pair(T1,T2) ; // exists for convenience 
pair<int,float> calculation() { 
 return make_pair(42,3.14159) ; 
} 
int main() { 
 pair<int,float> result = calculation() ; 
 cout << “result = “ << pair.first 
 << “ “ << pair.second << endl ; 
} 
© 2006 Wouter Verkerke, NIKHEF 
Map <map> 
• Map is an associative container 
– It stores pairs of const keys and values 
– Elements stored in ranking by keys (using key::operator<()) 
– Provides direct access by key 
– Multiple entries with same key prohibited 
Bjarne 33 
Thor 52 
Leif 47 
Gunnar 42 
pair<const T1,T2> 
map<T1,T2> 
© 2006 Wouter Verkerke, NIKHEF 
Map <map> 
• Map example 
– If element is not found, new entry is added using default 
constructors 
map<string,int> shoeSize ; 
shoeSize.insert(pair<string,int>(“Leif”,47)) ; 
showSize.insert(make_pair(“Leif”,47)) ; 
shoeSize[“Bjarne”] = 43 ; 
shoeSize[“Thor”] = 52 ; 
int theSize = shoeSize[“Bjarne”] ; // theSize = 43 
int another = shoeSize[“Stroustrup”] ; // another = 0 
© 2006 Wouter Verkerke, NIKHEF 
Taking a more abstract view of containers 
• So far have dealt directly with container object to insert 
and retrieve elements 
– Drawback: Client code must know exactly what kind of container 
it is accessing 
– Better solution: provide an abstract interface to the container. 
– Advantage: the containers will provide the same interface (as far 
as possible within the constraints of its functionality) 
– Enhanced encapsulation – You can change the type of container 
class you use later without invasive changes to your client code 
• STL abstraction mechanism for container access: 
the iterator 
– An iterator is a pointer to an element in a container 
– So how is an iterator different from a regular C++ pointer? – An 
iterator is aware of the collection it is bound to.
– How do you get an iterator: A member function of the collection 
will give it to you 
© 2006 Wouter Verkerke, NIKHEF 
Taking a more abstract view of containers 
• Illustration of iterators vs C++ pointers 
double array[10] ; 
int i = 0 ; 
double* ptr ; 
ptr = &array[0] ; 
while(i<10) { 
 cout << *ptr << endl ; 
 ++ptr ; 
 ++i ; 
} 
vector<double> v(10) ; 
vector<double>::iterator iter ; 
iter = v.begin() ; 
while(iter!=v.end()) { 
 cout << *iter << endl ; 
 ++iter ; 
} 
Allocate C++ array of 10 elements Allocate STL vector of 10 elements 
© 2006 Wouter Verkerke, NIKHEF 
Taking a more abstract view of containers 
• Illustration of iterators vs C++ pointers 
double array[10] ; 
int i = 0 ; 
double* ptr ; 
ptr = &array[0] ; 
while(i<10) { 
 cout << *ptr << endl ; 
 ++ptr ; 
 ++i ; 
} 
vector<double> v(10) ; 
vector<double>::iterator iter ; 
iter = v.begin() ; 
while(iter!=v.end()) { 
 cout << *iter << endl ; 
 ++iter ; 
} 
Allocate a pointer. 
Also allocate an integer to keep 
track of when you’re at the end 
of the array 
Allocate an STL iterator to a vector 
© 2006 Wouter Verkerke, NIKHEF 
Taking a more abstract view of containers 
• Illustration of iterators vs C++ pointers 
double array[10] ; 
int i = 0 ; 
double* ptr ; 
ptr = &array[0] ; 
while(i<10) { 
 cout << *ptr << endl ; 
 ++ptr ; 
 ++i ; 
} 
vector<double> v(10) ; 
vector<double>::iterator iter ; 
iter = v.begin() ; 
while(iter!=v.end()) { 
 cout << *iter << endl ; 
 ++iter ; 
} 
Make the pointer point to 
the first element of the 
array 
Make the iterator point to 
the first element of the vector 
© 2006 Wouter Verkerke, NIKHEF 
Taking a more abstract view of containers 
• Illustration of iterators vs C++ pointers 
double array[10] ; 
int i = 0 ; 
double* ptr ; 
ptr = &array[0] ; 
while(i<10) { 
 cout << *ptr << endl ; 
 ++ptr ; 
 ++i ; 
} 
vector<double> v(10) ; 
vector<double>::iterator iter ; 
iter = v.begin() ; 
while(iter!=v.end()) { 
 cout << *iter << endl ; 
 ++iter ; 
} 
Check if you’re at the end 
of your array 
Check if you’re at the end of 
your vector 
© 2006 Wouter Verkerke, NIKHEF 
Taking a more abstract view of containers 
• Illustration of iterators vs C++ pointers 
double array[10] ; 
int i = 0 ; 
double* ptr ; 
ptr = &array[0] ; 
while(i<10) { 
 cout << *ptr << endl ; 
 ++ptr ; 
 ++i ; 
} 
vector<double> v(10) ; 
vector<double>::iterator iter ; 
iter = v.begin() ; 
while(iter!=v.end()) { 
 cout << *iter << endl ; 
 ++iter ; 
} 
Access the element the pointer 
is currently pointing to 
Access the element the iterator 
is currently pointing to 
© 2006 Wouter Verkerke, NIKHEF 
Taking a more abstract view of containers 
• Illustration of iterators vs C++ pointers 
double array[10] ; 
int i = 0 ; 
double* ptr ; 
ptr = &array[0] ; 
while(i<10) { 
 cout << *ptr << endl ; 
 ++ptr ; 
 ++i ; 
} 
vector<double> v(10) ; 
vector<double>::iterator iter ; 
iter = v.begin() ; 
while(iter!=v.end()) { 
 cout << *iter << endl ; 
 ++iter ; 
} 
Modifiy the pointer to point 
to the next element in the 
array 
Modify the iterator to point to 
the next element in the array 
Auto types work great with STL contains C++2011 
• Note that ‘auto’ types are particularly handy when using 
STL classes as iterator type names are usually long, and 
never explicitly needed 
© 2006 Wouter Verkerke, NIKHEF 
// Iterator loop 
vector<int> v(10) ; 
vector<int>::iterator iter ; 
for (iter=v.begin() ;iter!=v.end() ; ++iter) { 
 *iter = 0 ; 
} 
// Iterator loop 
vector<int> v(10) ; 
for (auto iter=v.begin() ; iter!=v.end() ; ++iter) { 
 *iter = 0 ; 
} 
Even better: range-based for loops C++2011 
• C++2011 also introduces concept of ‘range-based’ for 
loops over any entity that supports iterators 
• Works for any container that defines methods 
begin() and end() that return an iteratable type 
© 2006 Wouter Verkerke, NIKHEF 
std::vector<int> v = {0, 1, 2, 3, 4, 5}; 
 
// Loop over all elements of v 
for (auto i : v) { // access by value, 
 cout << i << endl ; 
} 
 
// Loop over all elements of v 
for (auto&& i : v) { // access by reference, 
cout << i << endl ; 
} 
© 2006 Wouter Verkerke, NIKHEF 
OO programming – Inheritance & Polymorphism 
Inheritance & 8 Polymorphism 
© 2006 Wouter Verkerke, NIKHEF 
Inheritance – Introduction 
• Inheritance is 
– a technique to build a new class based on an old class 
• Example 
– Class employee holds employee personnel record 
– Company also employs managers, which in addition to being 
employees themselves supervise other personnel 
• Manager class needs to contain additional information: list of subordinates 
– Solution: make Manager class that inherits from Employee 
class Employee { 
public: 
 Employee(const char* name, double salary) ; 
 const char* name() const ; 
 double salary() const ; 
private: 
 string _name ; 
 double _salary ; 
} ; 
© 2006 Wouter Verkerke, NIKHEF 
Inheritance – Syntax 
• Example of Manager class constructed through 
inheritance 
class Manager : public Employee { 
public: 
 Manager(const char* name, double salary, 
 vector<Employee*> subordinates) ; 
 list<Employee*> subs() const ; 
private: 
 list<Employee*> _subs ; 
} ; 
Declaration of public 
inheritance 
Additional data members in 
Manager class 
© 2006 Wouter Verkerke, NIKHEF 
Inheritance and OOAD 
• Inheritance means: Manager Is-An Employee 
– Object of class Manager can be used in exactly the same way as 
you would use an object of class Employee because: 
– class Manager also has all data members and member functions of 
class Employee 
– Detail: examples shows ‘public inheritance’ – Derived class 
inherits public interface of Base class 
• Inheritance offers new possibilities in OO Analysis and 
Design 
– But added complexity is major source for conceptual problems 
– We’ll look at that in a second, let’s first have a better look at 
examples 
© 2006 Wouter Verkerke, NIKHEF 
Inheritance – Example in pictures 
• Schematic view of Manager class 
class Manager 
public: 
 list<Employee*> subs() const ; 
private: 
 list<Employee*> _subs ; 
‘Base class’ 
‘Derived class’ 
Terminology 
class Employee 
public: 
 const char* name() const ; 
 double salary() const ; 
private: 
 string _name ; 
 double _salary ; 
© 2006 Wouter Verkerke, NIKHEF 
Inheritance – Using it 
• Demonstration of Manager-IS-Employee concept 
// Create employee, manager record 
Employee* emp = new Employee(“Wouter”,10000) ; 
list<Employee*> subs ; 
subs.push_back(emp) ; 
Manager* mgr = new Manager(“Stan”,20000,subs) ; 
// Print names and salaries using 
// Employee::salary() and Employee::name() 
cout << emp->name() << endl ; // prints Wouter 
cout << emp->salary() << endl ; // prints 10000 
cout << mgr->name() << endl ; // prints Stan 
cout << mgr->salary() << endl ; // prints 20000 
© 2006 Wouter Verkerke, NIKHEF 
Inheritance – Using it 
• Demonstration of Manager-IS-Employee concept 
– A pointer to a derived class is also a pointer to the base class 
– But the reverse is not true! 
// Pointer-to-derived IS Pointer-to-base
void processEmployee(Employee& emp) { 
 cout << emp.name() << “ : “ << emp.salary() << endl ; 
} 
processEmployee(*emp) ; 
processEmployee(*mgr) ; // OK Manager IS Employee 
// Manager details are not visible through Employee* ptr 
Employee* emp2 = mgr ; // OK Manager IS Employee
emp2->subs() ; // ERROR – Employee is not manager 
© 2006 Wouter Verkerke, NIKHEF 
OO Analysis and Design – ‘Is-A’ versus ‘Has-A’ 
• How is an ‘Is-A’ relationship different from a ‘Has-A’ 
relationship 
– An Is-A relationship expresses inheritance (A is B) 
– A Has-A relationship expresses composition (A is a component of B) 
a Calorimeter HAS-A Position An Manager IS-An Employee 
class Calorimeter { 
public: 
 Position& p() { return _p ; } 
private: 
 Position _p ; 
} ; 
class Manager : 
 public Employee { 
public: 
private: 
} ; 
Calorimeter calo ; 
// access position part 
calo.p() ; 
Manager mgr ; 
// Use employee aspect of mgr 
mgr.salary() ; 
© 2006 Wouter Verkerke, NIKHEF 
Inheritance – constructors, initialization order 
• Construction of derived class involves construction of base 
object and derived object 
– Derived class constructor must call base class constructor 
– The base class constructor is executed before the derived class ctor 
– Applies to all constructors, including the copy constructor
Manager::Manager(const char* _name, double _salary, 
 list<Employee*>& l) : 
 Employee(_name,_salary), 
 _subs(l) { 
 cout << name() << endl ; // OK - Employee part of object 
} // is fully constructed at this
 // point so call to base class 
// function is well defined 
Manager::Manager(const Manager& other) : 
 Employee(other), // OK Manager IS Employee 
 _subs(other._subs) { 
 // body of Manager copy constructor 
} 
© 2006 Wouter Verkerke, NIKHEF 
Inheritance – Destructors, call sequence 
• For destructors the reverse sequences is followed 
– First the destructor of the derived class is executed 
– Then the destructor of the base class is executed 
• Constructor/Destructor sequence example 
class A { 
 A() { cout << “A constructor” << endl ; } 
 ~A() { cout << “A destructor” << endl ; } 
} ; 
class B : public A { 
 B() { cout << “B constructor” << endl ; } 
 ~B() { cout << “B destructor” << endl ; } 
} ; 
int main() { 
 B b ; 
 cout << endl ; 
} 
A constructor 
B constructor 
B destructor 
A destructor 
Output 
© 2006 Wouter Verkerke, NIKHEF 
Sharing information – protected access 
• Inheritance preserves existing encapsulation 
– Private part of base class Employee is not accessible by derived 
class Manager 
• Sometimes useful if derived class can access part of 
private data of base class 
– Solution: ‘protected’ -- accessible by derived class, but not by 
public 
Manager::giveMyselfRaise() { 
 _salary += 1000 ; // NOT ALLOWED: private in base class 
} 
class Base { 
 public: 
 int a ; 
 protected: 
 int b ; 
 private: 
 int c ; 
} ; 
class Derived : public Base { 
 void foo() { 
 a = 3 ; // OK public 
 b = 3 ; // OK protected 
 } 
} ; 
Base base ; 
base.a = 3 ; // OK public 
base.b = 3 ; // ERROR protected 
© 2006 Wouter Verkerke, NIKHEF 
Better example of protected interface 
class Employee { 
public: 
 Employee(const char* name, double salary) ; 
 annualRaise() { setSalary(_salary*1.03) ; } 
 double salary() const { return _salary ; } 
protected: 
 void setSalary(double newSalary) { 
 if (newSalary<_salary) { 
 cout << “ERROR: salary must always increase” << endl ; 
 } else { 
 _salary = newSalary ; 
 } 
 } 
private: 
 string _name ; 
 double _salary ; 
} ; 
The setSalary() function is 
protected: 
Public cannot change salary 
except in controlled way 
through public 
annualRaise() method 
© 2006 Wouter Verkerke, NIKHEF 
Better example of protected interface 
class Employee { 
public: 
 Employee(const char* name, double salary) ; 
 annualRaise() { setSalary(_salary*1.03) ; } 
 double salary() const { return _salary ; } 
protected: 
 void setSalary(double newSalary) { 
 if (newSalary<_salary) { 
 cout << “ERROR: salary must always increase” << endl ; 
 } else { 
 _salary = newSalary ; 
 } 
 } 
private: 
 string _name ; 
 double _salary ; 
} ; 
class Manager : public Employee { 
public: 
 Manager(const char* name, double salary, 
 list<Employee*> subs) ; 
 giveBonus(double amount) { 
 setSalary(salary()+amount) ; 
 } 
private: 
 list<Employee*> _subs ; 
} ; 
Managers can also get additional 
raise through giveBonus() 
Access to protected 
setSalary() method allows 
giveBonus() to modify salary 
© 2006 Wouter Verkerke, NIKHEF 
Better example of protected interface 
class Employee { 
public: 
 Employee(const char* name, double salary) ; 
 annualRaise() { setSalary(_salary*1.03) ; } 
 double salary() const { return _salary ; } 
protected: 
 void setSalary(double newSalary) { 
 if (newSalary<_salary) { 
 cout << “ERROR: salary must always increase” << endl ; 
 } else { 
 _salary = newSalary ; 
 } 
 } 
private: 
 string _name ; 
 double _salary ; 
} ; 
class Manager : public Employee { 
public: 
 Manager(const char* name, double salary, 
 list<Employee*> subs) ; 
 giveBonus(double amount) { 
 setSalary(salary()+amount) ; 
 } 
private: 
 list<Employee*> _subs ; 
} ; 
Note how accessor/modifier 
pattern salary()/setSalary()
is also useful for protected 
access 
Manager is only allowed to 
change salary through 
controlled method: negative 
bonuses are not allowed… 
© 2006 Wouter Verkerke, NIKHEF 
Object Oriented Analysis & Design with Inheritance 
• Principal OOAD rule for inheritance: an Is-A relation is an 
extension of an object, not a restriction 
– manager Is-An employee is good example of a valid Is-A relation: 
A manager conceptually is an employee in all respects, but with 
some extra capabilities 
– Many cases are not that simple however 
• Some other cases to consider 
– A cat is a carnivore that knows how to meow (maybe) 
– A square is a rectangle with equal sides (no!) 
• ‘Is-A except‘ is a restriction, not an extension 
– A rectangle is a square with method to change side lengths (no!) 
• Code in square can make legitimate assumptions that both sides 
are of equal length 
© 2006 Wouter Verkerke, NIKHEF 
Object Oriented Analysis & Design with Inheritance 
• Remarkably easy to get confused 
– Particularly if somebody else inherits from your class later (and you might 
not even know about that) 
• The Iron-Clad rule: The Liskov Subtitution Principle 
– Original version: 
– In plain English: 
– Keep this in mind when you design class hierarchies using Is-A relationships 
‘If for each object o1 of type S there is an object o2 of type T
such that for all programs P defined in terms of T, the behavior 
of P is unchanged when o1 is substituted for o2, then S a subtype of T’ 
‘An object of a subclass must behave indistinguishably from an 
object of the superclass when referenced as an object of the superclass’ 
© 2006 Wouter Verkerke, NIKHEF 
Object Oriented Analysis & Design with Inheritance 
• Extension through inheritance can be quite difficult 
– ‘Family trees’ seen in text books very hard to do in real designs 
• Inheritance for “extension” is non-intuitive, but for 
“restriction” is wrong 
• Inheritance is hard to get right in advance 
– Few things are straightforward extensions 
– Often behavior needs to be overridden rather than extended 
– Design should consider entire hierarchy 
• But do not despair: 
– Polymorphism offers several new features that will make OO 
design with inheritance easier 
© 2006 Wouter Verkerke, NIKHEF 
Polymorphism 
• Polymorphism is the ability of an object to retain its true 
identity even when accessed through a base pointer 
– This is perhaps easiest understood by looking at an example 
without polymorphism 
• Example without polymorphism 
– Goal: have name() append “(Manager)” to name tag for manager 
– Solution: implement Manager::name() to do exactly that 
class Manager : public Employee { 
public: 
 Manager(const char* name, double salary, 
 vector<Employee*> subordinates) ; 
 const char* name() const { 
 cout << _name << “ (Manager)” << endl ; 
 } 
 list<Employee*> subs() const ; 
private: 
 list<Employee*> _subs ; 
} ; 
© 2006 Wouter Verkerke, NIKHEF 
Example without polymorphism 
• Using the improved manager class 
• But it doesn’t work in all circumstances… 
– Why does this happen? 
– Function print() sees mgr as employee, thus the compiler calls 
Employee::name() rather than Manager::name() ; 
– Problem profound: name() function call selected at compile time. No way 
for compiler to know that emp really is a Manager! 
Employee emp(“Wouter”,10000) ; 
Manager mgr(“Stan”,20000,&emp) ; 
cout << emp.name() << endl ; // Prints “Wouter” 
cout << mgr.name() << endl ; // Prints “Stan (manager)” 
void print(Employee& emp) { 
 cout << emp.name() << endl ; 
} 
print(emp) ; // Prints “Wouter” 
print(mgr) ; // Prints “Stan” – NOT WHAT WE WANTED! 
© 2006 Wouter Verkerke, NIKHEF 
Polymorphism 
• Polymorphism is the ability of an object to retain its true 
identity even when accessed through a base pointer 
– I.e. we want this: 
• In other words: Polymorphism is the ability to treat 
objects of different types the same way
– To accomplish that we will need to tell C++ compiler to look at 
run-time what emp really points to. 
– In compiler terminology this is called ‘dynamic binding’ and 
involves the compiler doing some extra work prior to executing 
the emp->name() call 
Employee emp(“Wouter”,10000) ; 
Manager mgr(“Stan”,20000,&emp) ; 
void print(Employee& emp) { 
 cout << emp.name() << endl ; 
} 
print(emp) ; // Prints “Wouter” 
print(mgr) ; // Prints “Stan (Manager)” 
© 2006 Wouter Verkerke, NIKHEF 
Dynamic binding in C++ – keyword virtual 
• The keyword virtual in a function declaration activates 
dynamic binding for that function 
– The example class Employee revisited 
 
– No further changes to class Manager needed 
… And the broken printing example now works 
class Employee { 
public: 
 Employee(const char* name, double salary) ; 
 virtual const char* name() const ; 
 double salary() const ; 
private: 
 … 
} ; 
void print(Employee& emp) { 
 cout << emp.name() << endl ; 
} 
print(emp) ; // Prints “Wouter” 
print(mgr) ; // Prints “Stan (Manager)” EUREKA 
© 2006 Wouter Verkerke, NIKHEF 
Keyword virtual – some more details 
• Declaration ‘virtual’ needs only to be done in the base 
class 
– Repetition in derived classes is OK but not necessary 
• Any member function can be virtual 
– Specified on a member-by-member basis 
class Employee { 
public: 
 Employee(const char* name, double salary) ; 
 ~Employee() ; 
 virtual const char* name() const ; // VIRTUAL 
 double salary() const ; // NON-VIRTUAL 
private: 
 … 
} ; 
© 2006 Wouter Verkerke, NIKHEF 
Virtual functions and overloading 
• For overloaded virtual functions either all or none of the 
functions variants should be redefined 
class A { 
 virtual void func(int) ; 
 virtual void func(float) ; 
} ; 
class B : public A { 
 void func(int) ; 
 void func(float) ; 
} ; 
class A { 
 virtual void func(int) ; 
 virtual void func(float) ; 
} ; 
class B : public A { 
} ; 
class A { 
 virtual void func(int) ; 
 virtual void func(float) ; 
} ; 
class B : public A { 
 void func(float) ; 
} ; 
OK – all redefined 
OK – none redefined 
NOT OK – partially redefined 
© 2006 Wouter Verkerke, NIKHEF 
Virtual functions – Watch the destructor 
• Watch the destructor declaration if you define virtual functions 
– Example 
– Any resources allocated in Manager constructor will not be released as 
Manager destructor is not called (just Employee destructor) 
– Solution: make the destructor virtual as well 
• Lesson: if you ever delete a derived class through a base 
pointer your class should have a virtual destructor 
– In practice: Whenever you have any virtual function, make the destructor 
virtual 
Employee* emp = new Employee(“Wouter”,10000) ; 
Manager* mgr = new Manager(“Stan”,20000,&emp) ; 
void killTheEmployee(Employee* emp) { 
 delete emp ; 
} 
killTheEmployee(emp) ; // OK 
killTheEmployee(mgr) ; // LEGAL but WRONG! 
 // calls ~Employee() only, not ~Manager() 
© 2006 Wouter Verkerke, NIKHEF 
Abstract base classes – concept 
• Virtual functions offer an important tool to OOAD – the 
Abstract Base Class 
– An Abstract Base Class is an interface only. It describes how an 
object can be used but does not offer a (full) implementation 
class Trajectory 
public: 
virtual Point x(float& t)=0; 
class LineTrajectory 
public: 
Point x(float &t) ; 
private: 
Vector _orig ; 
Vector _dir ; 
class HelixTrajectory 
public: 
Point x(float &t) ; 
private: 
Vector _orig ; 
double _rho, _phi, _d, 
_kappa, _lambda ; 
Interface 
only 
Implementation 
© 2006 Wouter Verkerke, NIKHEF 
Abstract base classes – pure virtual functions 
• A class becomes an abstract base class when it has one 
or more pure virtual functions 
– A pure virtual function is a declaration without an implementation 
– Example 
– It is not possible to create an instance of an abstract base 
class, only of implementations of it 
class Trajectory { 
public: 
 Trajectory() ; 
 virtual ~Trajectory() ; 
 virtual Point x(float& t) const = 0 ; 
} ; 
Trajectory* t1 = new Trajectory(…) ; // ERROR abstract class 
Trajectory* t2 = new LineTrajectory(…); // OK 
Trajectory* t3 = new HelixTrajectory(…);// OK 
© 2006 Wouter Verkerke, NIKHEF 
Abstract base classes and design 
• Abstract base classes are a way to express common 
properties and behavior without implementation 
– Especially useful if there are multiple implementations of a 
common interface possible 
– Example: a straight line ‘is a’ trajectory, 
 but a helix also ‘is a’ trajectory 
• Enables you to write code at a higher level abstraction 
– For example, you don’t need to know how trajectory is 
parameterized, just how to get its position at a give flight time. 
– Powered by polymorphism 
• Simplifies extended/augmenting existing code 
– Example: can write new class SegmentedTrajectory. Existing 
code dealing with trajectories can use new class without 
modifications (or even recompilation!) 
© 2006 Wouter Verkerke, NIKHEF 
Abstract Base classes – Example 
• Example on how to use abstract base classes 
void processTrack(Trajectory& track) ; 
int main() { 
 // Allocate array of trajectory pointers 
 Trajectory* tracks[3] ; 
 // Fill array of trajectory pointers 
 tracks[0] = new LineTrajectory(…) ; 
 tracks[1] = new HelixTrajectory(…) ; 
 tracks[2] = new HelixTrajectory(…) ; 
 for (int i=0 ; i<3 ; i++) { 
 processTrack(*tracks[i]) ; 
 } 
} 
void processTrack(Trajectory& track) { 
 cout << “position at flight length 0 is “ 
 << track.pos(0) << endl ; 
}
Use Trajectory 
interface to 
manipulate track 
without knowing 
the exact class 
you’re dealing with 
(HelixTrajectory 
or LineTrajectory) 
© 2006 Wouter Verkerke, NIKHEF 
Object Oriented Analysis and Design and Polymorphism 
• Design of class hierarchies can be much simplified if 
only abstract base classes are used 
– In plain inheritance derived class forcibly inherits full specifications 
of base type 
– Two classes that inherit from a common abstract base class can 
share any subset of their common functionality 
Base 
Derived 
Abstract 
Common 
Interface 
Concrete 
Implementation 
I 
Concrete 
Implementation 
II

      

OOPS MCQ
1) Which of the following language was developed as the first purely object programming language?

SmallTalk
C++
Kotlin
Java





Answer: a. SmallTalk
Explanation: This programming language was invented as the first pure OOPS (object-oriented) language. This language was designed by Alan Kay in the early 1970s.


2) Who developed object-oriented programming?

Adele Goldberg
Dennis Ritchie
Alan Kay
Andrea Ferro





Answer: c. Alan Kay
Explanation: In the year 1970, Alan Kay gave Object-Oriented programming. He coined the concept of OOPS at a grad school in the year 1966 or 1967. Alan kay, Adele Goldberg, Dan Ingalls and others developed the first Smalltalk programming language, which follows the OOPS concept.


3) Which of the following is not an OOPS concept?

Encapsulation
Polymorphism
Exception
Abstraction





Answer: c. Exception
Explanation: None.


4) Which feature of OOPS described the reusability of code?

Abstraction
Encapsulation
Polymorphism
Inheritance





Answer: d. Inheritance
Explanation: Inheritance is the feature of OOPS, which allows the users of OOPS to reuse the code which is already written. This OOPS feature inherits the features of another class in the programs. This mechanism actually inherits the fields and methods of the superclass.


5) Which of the following language supports polymorphism but not the classes?

C++ programming language
Java programming language
Ada programming language
C# programming language





Answer: c. Ada programming language
Explanation: It is a programming language that disapproves of the concept of polymorphism but supports the concept of classes. It is an object-based language. So, it does not follow the Object-oriented programming concepts.


6) Which among the following feature is not in the general definition of OOPS?

Modularity
Efficient Code
Code reusability
Duplicate or Redundant Data





Answer: d. Duplicate or Redundant Data
Explanation: Duplicacy or Redundancy of data is a feature which totally dependent on the programmers. So, it cannot be created by the OOPS.


7) Which feature of OOPS derives the class from another class?

Inheritance
Data hiding
Encapsulation
Polymorphism





Answer: a. Inheritance
Explanation: Inheritance is an important OOPS feature which derives the class from the base class or superclass. This OOPS feature inherits the features of another class in the programs. This mechanism actually inherits the fields and methods of the superclass.


8) Define the programming language, which does not support all four types of inheritance?

Smalltalk
Kotlin
Java
C++





Answer: c. Java
Explanation: Java is a programming language that disapproves of the concept of 'multiple inheritance'. So, it does not agree with all types of inheritance. But, we can implement 'multiple inheritance' in Java language using the interface concept.


9) A single program of OOPS contains _______ classes?

Only 1
Only 999
Only 100
Any number





Answer: d. Any number
Explanation: We can define any number of classes with different names in a single program of OOPS.


10) Which operator from the following can be used to illustrate the feature of polymorphism?

Overloading <<
Overloading &&
Overloading | |
Overloading +=





Answer: a. Overloading <<
Explanation: << is an insertion operator which is used for overloading (polymorphism). 


11) Which two features of object-oriented programming are the same?

Abstraction and Polymorphism features are the same
Inheritance and Encapsulation features are the same
Encapsulation and Polymorphism features are the same
Encapsulation and Abstraction





Answer: d. Encapsulation and Abstraction
Explanation: Encapsulation and Abstraction are the same OOPS concepts. Encapsulation hides the features of the object and binds all the properties inside a single class. And abstraction is a feature that shows the required data to the user.


12) Which header file is required by the C++ programming language to use the OOPS concept?

stdio.h
iostream.h
stdlib.h
We can easily use the OOPS concepts in c++ programs without using any header file.





Answer: d. We can easily use the OOPS concepts in c++ programs without using any header file.
Explanation: There is no need to use any particular header file for using the OOPS concept in the C++ programs. The C++ functions and variables have their respective header files, which should be defined in the program.


13) Which of the following definition is incorrect for polymorphism?

Polymorphism helps in redefining the same functionality
Polymorphism concept is the feature of object-oriented programming (OOP)
It always increases the overhead of function definition
Ease in the readability of the program





Answer: c. It always increases the overhead of function definition
Explanation: This concept of OOPS never increases the overhead of function definition.


14) Which among the following cannot be used for the concept of polymorphism?

Static member function
Constructor Overloading
Member function overloading
Global member function





Answer: a. Static member function
Explanation: These functions are not an object property. That's why they cannot be acceptable for overriding or overloading.


15) Which function best describe the concept of polymorphism in programming languages?

Class member function
Virtual function
Inline function
Undefined function





Answer: b. Virtual function
Explanation: Only those functions are used to achieve the polymorphism, which are declared as 'virtual'. These functions let the OOPS programs decide at runtime which function is to be called by the pointer.


16) Which member function is assumed to call first when there is a case of using function overloading or abstract class?

Global function
Local function
Function with lowest priority
Function with the highest priority





Answer: d. Function with the highest priority
Explanation: The member function with the highest priority is called first when there is function overloading, or abstract class is used.


17) Is it true to use polymorphism in the C programming language?

True
False





Answer: a. True
Explanation: Yes, we can use the concept of polymorphism in the C programming language. Users can use structures and then declare pointers in C programming language, which in turn points to some function.
Here, he/she can easily simulate the functions which are not exactly member function. Hence, users can manipulate the concept of polymorphism in the C language.


18) Which of the following language uses the classes but not the polymorphism concept?

Procedure Oriented language
Object-based language
Class-based language
If classes are used, then the polymorphism concept will always be used in the programming languages.





Answer: b. Object-based language
Explanation: Object-based languages are those languages which support the definition of classes but not the polymorphism. Inheritance is also another feature which is not supported by these languages.


19) Which of the following OOP concept is not true for the C++ programming language?

A class must have member functions
C++ Program can be easily written without the use of classes
At least one instance should be declared within the C++ program
C++ Program must contain at least one class





Answer: d. C++ Program must contain at least one class
Explanation: Use of class in the C++ language is not mandatory. Programs can be easily written without the use of classes. C++ programs classes may or may not contain the member function. That's why it is not a necessary situation in the C++ language.


20) What is the extra feature in classes which was not in the structures?

Member functions
Data members
Public access specifier
Static Data allowed





Answer: a. Member functions
Explanation: Member function is an extra feature which is allowed in class but not in the concept of structures.


21) How many types of polymorphism in the C++ programming language?

Three types of polymorphism
Two types of polymorphism
Five types of polymorphism
Four types of polymorphism





Answer: b. Two types of polymorphism
Explanation: C++ programming language has two types of polymorphism: 1. Runtime Polymorphism 2. Compile-time Polymorphism
Runtime Polymorphism: It is meet by the function overriding. This polymorphism is also known as late or dynamic binding.
Compile-time Polymorphism: It is meet by the operator and function overloading. This polymorphism is also known as early or static binding.


22) Which of the following feature is also known as run-time binding or late binding?

Dynamic typing
Dynamic loading
Dynamic binding
Data hiding





Answer: c. Dynamic binding
Explanation: Dynamic binding or runtime binding or late binding is that type of binding which happens at the execution time of the program or code. Function or method overriding is the perfect example of this type of binding. Virtual functions are used to achieve the concept of function overriding.


23) Which among the following is not a member of the class?

Virtual function
const function
Static function
Friend function





Answer: d. Friend function
Explanation: The public member functions of a class can easily access the private data members of the same class.
This is achieved by the "friend", which is a non-member function to the class. Its private data can be accessed. That's why the friend function is not a member of the class.


24) Which of the following class is known as the generic class?

Final class
Template class
Abstract class
Efficient code





Answer: b. Template class
Explanation: Template classes are those classes which can be used for any value of data type. So, these are known as a generic class.
Template classes help in making the genetic classes and generate the objects of classes based on the parameters. This type of class also saves system memory.


25) Which operator overloads using the friend function?

*
( )
->
=





Answer: a. *
Explanation: The operators ( ->, ( ), =) cannot be overloaded using the friend function because if they are overloaded, then the code will show the compilation error. That's why * (asterisk) is a symbol that can be overloaded using the friend function.


26) Which of the following OOP concept binds the code and data together and keeps them secure from the outside world?

Polymorphism
Inheritance
Abstraction
Encapsulation





Answer: d. Encapsulation
Explanation: Encapsulation is an important concept of Object-oriented programming. This concept binds the data and methods in a single unit. It binds the methods which manipulate the data.


27) Which member of the superclass is never accessible to the subclass?

Public member
Protected member
Private member
All of the mentioned





Answer: c. Private member
Explanation: Private is a member of a class which never be accessible to the derived class.


28) What is the size of a class?

Sum of the size of all inherited variables along with the variables of the same class
The size of the class is the largest size of the variable of the same class
Classes in the programming languages do not have any size
Sum of the size of all the variables within a class.





Answer: c. Classes in the programming languages do not have any size
Explanation: The object size defines the size of the class. That's why classes do not have any size.


29) Which class cannot create its instance?

Parent class
Nested class
Anonymous class
Abstract class





Answer: d. Abstract class
Explanation: The instance of the abstract class can't be created because it will not have any constructor of its own. Hence while creating an instance of a class, it can't initialize the object members.


30) Encapsulation adds the function in a user-defined structure.

True
False





Answer: b. False
Explanation: The encapsulation concept does not add the function in a user-defined structure because if the member functions are involved, then the user cannot call the structures defined by it.


31) Which of the following variable violates the definition of encapsulation?

Array variables
Local variables
Global variables
Public variables





Answer: c. Global variables
Explanation: Global variable is a variable which violates the definition of encapsulation. The definition of encapsulation defines that the data or variable should be accessed by the specified set of elements. But, the global variable is accessible everywhere in the code. This type of variable does not hide the internal performance of the code. That's global variable violates the encapsulation concept.


32) How can the concept of encapsulation be achieved in the program?

By using the Access specifiers
By using the concept of Abstraction
By using only private members
By using the concept of Inheritance





Answer: a. By using the Access specifiers
Explanation: Users can achieve the concept of encapsulation by implementing the access specifiers in the code. It is not compulsory that the user use only private members.


33) The concept of encapsulation helps in writing which type of classes in the Java programming language?

Abstract classes
Wrapper classes
Mutable classes
Immutable classes





Answer: d. Immutable classes
Explanation: The concept of encapsulation helps in writing immutable classes in the Java programming language because these classes are used for caching purposes.


34) Encapsulation is_____?

technique of combining more than one member functions into a single unit.
mechanism of combining more than one data member into a single unit.
mechanism of combining more than one data members and member functions that implement on those data members into a single unit
technique of combining more than one data members and member functions into a single unit, which can manipulate any data.





Answer: c. mechanism of combining more than one data members and member functions that implement on those data members into a single unit
Explanation: Encapsulation is an OOPS mechanism that combines more than one data member and member function and implements the member functions on those data members into a single unit.


35) Which of the following statement of a program is not right?

class teacher{ }; teacher s[5];
class teacher{ }s;
class teacher{ }; teacher s;
class teacher{ }s[];





Answer: d. class teacher{ }s[];
Explanation: This statement is false because it must be compulsory to specify the array with its size.


36) Which of the following syntax is incorrect for the class definition?

student class{ };
class student{ student(int a){} };
class teacher{ public: teacher(int a){ } };
None of the mentioned





Answer: a. student class{ };
Explanation: In this syntax, the keyword 'class' is present after the student. That's why this syntax is incorrect.


37) The object cannot be________?

passed by copy
passed as function
passed by value
passed by reference





Answer: b. passed as function
Explanation: The object cannot be passed as the function because it is an instance of a class. Only the objects passed by the value, reference or copy.


38) Which among the following feature does not come under the concept of OOPS?

Data binding
Data hiding
Platform independent
Message passing





Answer: c. Platform independent
Explanation: Platform independence is a feature which does not come under the OOPS concepts. This feature depends on the programming language. C++ is an object-oriented programming language which is not a platform-independent language.


39) Which of the following feature may be breaked if the user does not use the classes in the code?

Object must be used violated
Only the encapsulation concept is violated
Inheritance cannot be implemented
Basically, all the features of OOPS get violated





Answer: d. Basically, all the features of OOPS get violated
Explanation: If the user does not use the classes in the code, then all the OOP features get violated. And, the encapsulation and inheritance cannot be implemented without the use of classes.


40) Which of the following feature interacts one object with another object?

Message reading
Message passing
Data transfer
Data binding





Answer: b. Message passing
Explanation: Message passing is a feature of OOP that connects one object with another object.
It is a concept of communication for passing the messages between the two objects. It allows objects to send and receive information among them.


41) Which definition best defines the concept of abstraction?

Hides the important data
Hides the implementation and showing only the features
Hiding the implementation
Showing the important data





Answer: b. Hides the implementation and showing only the features
Explanation: It hides the implementation part and showing only the data and features which are required to the end-user.
This technique is used to hide the complexity of code and its details from the user. It is also used to define a good interface in coding.


42) The combination of abstraction of the data and code is viewed in________.

Inheritance
Object
Class
Interfaces





Answer: b. Object
Explanation: Object is a technique which can be viewed as an abstraction of the combination of data and code. This OOPS concept uses the class data members and their functioning as the data abstraction. Code abstraction is used as the object of an inbuilt class.


43) The principle of abstraction___________

is used to achieve OOPS.
is used to avoid duplication
Use abstraction at its minimum
is used to remove longer codes





Answer: b. is used to avoid duplication
Explanation: The principle of abstraction is used to avoid the code duplicacy. In this technique, the program does not contain any redundant functions. And it also makes the program effective.


44) Which among the following concept is correct if a user using the concept of encapsulation in a code?

The modification of the code can be additional overhead
Member functions can be used for modifying the data type of data members
The data type of data member cannot be modified.
The data type of the data member can be easily modified without modifying any other code





Answer: d. The data type of the data member can be easily modified without modifying any other code
Explanation: Data type of a data member can be easily modified without modifying any code. Member functions can never modify the data type of the data members in the same class.


45) Using the concept of encapsulation security of the data is ___________

Ensured to some extent
Purely ensured
Not ensured
Very low





Answer: a. Ensured to some extent
Explanation: The concept of encapsulation can only ensure data security to some extent.


46) Consider the following Java program and select the right option from the given options.

class marksofstudent
{  
     int subjectmarks;
     public : int* fun()
     { 
          return &subjectmarks 
     }
};
main()
{
    marksofstudent s;
    int *ptr = c.fun() ;
    return 0;
}


The above program violates the feature of encapsulation
The above program may result in undesirable conditions
The above program will generate an error
The above program is good to go





Answer: a. The above program violates the feature of encapsulation
Explanation: The code in this question violates the definition of encapsulation.


47) The name of the default access specifier for the member functions or data members in the C++ programming language is_________.

Private access specifier
Public access specifier
Protected access specifier
Depends on compiler





Answer: a. Private access specifier
Explanation: If none of the access specifiers is used, then the data members and member functions are Private by default in C++ classes. This specifier is actually used to increase the privacy of information.


48) Which of the following option best illustrates a friend class?

This class can access and manipulate all the private members of that class which connects to a friend.
Friend class can only access and manipulate the protected data members of that class that connects to a friend.
Friend class can't access any data member of another class but can use its methods
Friend class don't have any implementation





Answer: a. Friend class can access and manipulate all the private members of the class, of which it is a friend
Explanation: A friend class can easily access all the private data members of another class.


49) Which of the following definition best describes the concept of polymorphism?

It is the ability to process the many messages and data in one way
It is the ability to process the undefined messages or data in at least one way
It is the ability to process the message or data in more than one form
It is the ability to process the message or data in only one form





Answer: c. It is the ability for a message or data to be processed in more than one form.
Explanation: None.


50) Which class/ or set of classes can describe the concept of polymorphism in the following code?

abstract class student_details
{
   public : int marksofstudent;
   calculate_grade();
}
class topper:public student_details
{
    public : calculate_grade()
    { 
        return 15; 
    }
};
class average:public student_details
{ 
     public : calculate_grade()
     {
         return 30; 
     }
};
class failed{ int marksofstudent; };


Only the student_details class can show the concept of polymorphism
The class which is 'failed' should also inherit class student for this code to work for polymorphism
The student_details, topper and average classes together can show the concept of polymorphism
Only the student_details and topper class together can show the concept of polymorphism





Answer: c. The student_details, topper and average classes together can show the concept of polymorphism
Explanation: None.




100 MCQs on Abstraction

What is abstraction in C++?
a. A programming technique to hide implementation details
b. A type of variable used for storing data
c. A function that takes no arguments and returns no value
d. A keyword used to define classes

Which access specifier is used to achieve abstraction in C++?
a. public
b. private
c. protected
d. static

What is the purpose of abstraction?
a. To make code easier to read and understand
b. To prevent access to class members
c. To restrict the creation of objects
d. To optimize memory usage

Which keyword is used to define an abstract class in C++?
a. virtual
b. abstract
c. class
d. pure

Can an object be created from an abstract class?
a. Yes
b. No

What is the role of pure virtual functions in an abstract class?
a. They have no role in an abstract class
b. They can be directly called by objects
c. They must be implemented in the derived classes
d. They cannot be overridden in the derived classes

How is data abstraction implemented in C++?
a. Using inheritance
b. Using polymorphism
c. Using encapsulation
d. Using composition

Which feature of C++ supports data hiding?
a. Inheritance
b. Polymorphism
c. Encapsulation
d. Abstraction

What is the purpose of a constructor in C++?
a. To initialize objects of a class
b. To define member functions of a class
c. To define static variables of a class
d. To allocate memory for objects

Which constructor is called when an object is created using the default constructor?
a. Copy constructor
b. Destructor
c. Parameterized constructor
d. Assignment constructor

What is the difference between a shallow copy and a deep copy?
a. Shallow copy only copies the pointers, while deep copy copies the actual data
b. Shallow copy only copies the data, while deep copy copies the pointers
c. Shallow copy creates a new object, while deep copy modifies the existing object
d. Shallow copy is performed automatically, while deep copy requires manual implementation

Which operator is used to perform a shallow copy of an object in C++?
a. =
b. ::
c. .
d. ->

How can you make an object copyable in C++?
a. By defining a copy constructor
b. By defining a destructor
c. By declaring the object as const
d. By using the auto keyword

What is the default behavior when copying objects in C++?
a. Shallow copy
b. Deep copy
c. No copy is allowed
d. Copying is handled automatically by the compiler

What happens if a copy constructor is not defined in C++?
a. The object cannot be copied
b. A default copy constructor is automatically generated
c. The object is deleted automatically
d. The program throws a compilation error

Which keyword is used to explicitly delete the copy constructor in C++?
a. delete
b. remove
c. disable
d. destroy

What is the return type of a copy constructor?
a. void
b. int
c. const
d. None of the above

When is the copy constructor called in C++?
a. When an object is passed by value to a function
b. When an object is returned from a function
c. When an object is created as a copy of another object
d. All of the above

Which function is automatically called when an object is destroyed in C++?
a. Destructor
b. Constructor
c. Copy constructor
d. Assignment operator

What is the purpose of a destructor in C++?
a. To initialize objects of a class
b. To define member functions of a class
c. To deallocate memory for objects
d. To create copies of objects

What is the syntax to declare a destructor in C++?
a. ~classname()
b. classname()
c. destructor classname()
d. void ~classname()

Can a class have multiple destructors in C++?
a. Yes
b. No

Which operator is used to assign one object to another in C++?
a. =
b. ::
c. .
d. ->

What is the purpose of the assignment operator in C++?
a. To compare two objects for equality
b. To initialize objects of a class
c. To copy the values of one object into another
d. To perform arithmetic operations on objects

Which function is automatically called when the assignment operator is used in C++?
a. Destructor
b. Constructor
c. Copy constructor
d. Assignment operator

What is the default behavior when assigning objects in C++?
a. Shallow copy
b. Deep copy
c. No assignment is allowed
d. Assigning is handled automatically by the compiler

How can you make an object non-copyable in C++?
a. By declaring the object as const
b. By defining a copy constructor
c. By defining the assignment operator as private
d. By using the friend keyword

What happens if the assignment operator is not defined in C++?
a. The object cannot be assigned values
b. A default assignment operator is automatically generated
c. The object is deleted automatically
d. The program throws a compilation error

Which keyword is used to explicitly delete the assignment operator in C++?
a. delete
b. remove
c. disable
d. destroy

What is the return type of the assignment operator in C++?
a. void
b. int
c. const
d. None of the above

When is the assignment operator called in C++?
a. When an object is passed by value to a function
b. When an object is returned from a function
c. When an object is assigned values using the assignment operator
d. All of the above

What is the purpose of the keyword "const" in C++?
a. To make a variable constant
b. To make a function constant
c. To make a class constant
d. All of the above

Can you modify a member variable declared as "const" in C++?
a. Yes
b. No

Can you call a non-const member function on a const object in C++?
a. Yes
b. No

What is the purpose of the "mutable" keyword in C++?
a. To make a member variable constant
b. To make a function constant
c. To allow modification of a member variable in a const function
d. All of the above

How can you make an object copyable and assignable in C++?
a. By defining a copy constructor and an assignment operator
b. By defining a destructor and a constructor
c. By declaring the object as const
d. By using the auto keyword

What is the syntax to declare a copy constructor in C++?
a. classname()
b. classname(classname& other)
c. ~classname()
d. void classname()

What is the syntax to declare an assignment operator in C++?
a. classname()
b. classname(classname& other)
c. classname operator=(classname& other)
d. void classname()

What is the syntax to declare a constant member function in C++?
a. void functionName() const
b. void const functionName()
c. void const functionName() const
d. void functionName(const)

How can you prevent copying and assigning of objects in C++?
a. By declaring the object as const
b. By defining the copy constructor and assignment operator as private
c. By using the friend keyword
d. By using the auto keyword

What is the purpose of the keyword "explicit" in C++?
a. To make a member variable constant
b. To make a function constant
c. To prevent implicit conversions during object construction
d. All of the above

Can you use the "explicit" keyword with the assignment operator in C++?
a. Yes
b. No

What is the syntax to declare an explicit constructor in C++?
a. explicit classname()
b. explicit classname(classname& other)
c. explicit operator=(classname& other)
d. explicit void classname()

What is the purpose of the keyword "friend" in C++?
a. To make a member variable constant
b. To make a function constant
c. To allow access to private members of a class
d. All of the above

Can you define a friend function inside a class in C++?
a. Yes
b. No

Which access specifier should be used when declaring a friend function in C++?
a. public
b. private
c. protected
d. None of the above

What is the purpose of the keyword "static" in C++?
a. To make a member variable constant
b. To make a function constant
c. To define a variable or function that belongs to the class, not an instance of the class
d. All of the above

Can a static member function access non-static member variables in C++?
a. Yes
b. No

How can you access a static member variable in C++?
a. By using the object of the class
b. By using the scope resolution operator and the class name
c. By using the keyword "static"
d. By using the friend keyword

Can a non-static member function access static member variables in C++?
a. Yes
b. No

What is the purpose of the keyword "this" in C++?
a. To make a member variable constant
b. To make a function constant
c. To refer to the current object
d. All of the above

Can you modify the value of the "this" pointer in C++?
a. Yes
b. No

What is the purpose of the keyword "operator" in C++?
a. To make a member variable constant
b. To make a function constant
c. To define overloaded operators
d. All of the above

Which operators cannot be overloaded in C++?
a. Arithmetic operators (+, -, *, /)
b. Assignment operator (=)
c. Address-of operator (&)
d. All operators can be overloaded

How is the copy constructor called when overloading the assignment operator in C++?
a. It is called explicitly
b. It is called automatically
c. It is not called
d. It is called indirectly

Which operator is used to compare two objects for equality in C++?
a. ==
b. !=
c. >
d. <

What is the purpose of overloading the equality operator (==) in C++?
a. To compare the addresses of two objects
b. To compare the values of two objects
c. To assign values from one object to another
d. To perform arithmetic operations on objects

Can you define a global overloaded operator in C++?
a. Yes
b. No

Can you define the behavior of the assignment operator using a friend function in C++?
a. Yes
b. No

Which function is called when the "+" operator is used with two objects in C++?
a. The assignment operator
b. The copy constructor
c. The addition operator
d. The equality operator

What is the purpose of overloading the addition operator (+) in C++?
a. To assign values from one object to another
b. To perform addition on objects
c. To compare the values of two objects
d. To increment the value of an object

Which operator is used to access the member variables and functions of an object in C++?
a. .
b. ->
c. ::
d. *

What is the purpose of overloading the arrow operator (->) in C++?
a. To assign values from one object to another
b. To perform arithmetic operations on objects
c. To compare the values of two objects
d. To access member variables and functions of an object through a pointer

Can you define the behavior of the arrow operator using a friend function in C++?
a. Yes
b. No

What is the purpose of the keyword "virtual" in C++?
a. To make a member variable constant
b. To make a function constant
c. To allow polymorphic behavior through inheritance
d. All of the above

Can a constructor be declared as virtual in C++?
a. Yes
b. No

What is a pure virtual function in C++?
a. A function that has no implementation in the base class
b. A function that cannot be overridden in the derived class
c. A function that is automatically called when an object is destroyed
d. A function that is automatically called when an object is created

Can you create an object of an abstract class in C++?
a. Yes
b. No

What is the purpose of dynamic polymorphism in C++?
a. To make a member variable constant
b. To make a function constant
c. To allow different classes to respond to the same function call
d. All of the above

Which keyword is used to override a virtual function in a derived class in C++?
a. override
b. virtual
c. abstract
d. inherit

What is the purpose of the "final" keyword in C++?
a. To make a member variable constant
b. To make a function constant
c. To prevent further overriding of a virtual function in derived classes
d. All of the above

Can you define a virtual destructor in C++?
a. Yes
b. No

What is the purpose of the keyword "pure" in a pure virtual function declaration in C++?
a. To make the function constant
b. To indicate that the function has no implementation
c. To make the function virtual
d. All of the above

Which keyword is used to create an interface in C++?
a. virtual
b. abstract
c. interface
d. pure

Can a class implement multiple interfaces in C++?
a. Yes
b. No

What is the purpose of the keyword "default" in C++?
a. To make a member variable constant
b. To make a function constant
c. To provide a default implementation for a function
d. All of the above

Can you define a default constructor in C++?
a. Yes
b. No

Can you define a default copy constructor in C++?
a. Yes
b. No

What is the purpose of the keyword "delete" in C++?
a. To make a member variable constant
b. To make a function constant
c. To prevent the use of a default constructor, copy constructor, or assignment operator
d. All of the above

Can you define a deleted destructor in C++?
a. Yes
b. No

What is the purpose of the keyword "noexcept" in C++?
a. To make a member variable constant
b. To make a function constant
c. To indicate that a function does not throw any exceptions
d. All of the above

Can you define a noexcept destructor in C++?
a. Yes
b. No

What is the purpose of the keyword "constexpr" in C++?
a. To make a member variable constant
b. To make a function constant
c. To evaluate a function or variable at compile-time
d. All of the above

Can you define a constexpr constructor in C++?
a. Yes
b. No

What is the purpose of the keyword "typename" in C++?
a. To make a member variable constant
b. To make a function constant
c. To declare a dependent type in a template definition
d. All of the above

Can you define a typename constructor in C++?
a. Yes
b. No

What is the purpose of the keyword "explicit" in a constructor in C++?
a. To make a member variable constant
b. To make a function constant
c. To prevent implicit conversions during object construction
d. All of the above

Can you define an explicit destructor in C++?
a. Yes
b. No

What is the purpose of the keyword "namespace" in C++?
a. To make a member variable constant
b. To make a function constant
c. To group related classes, functions, and variables together
d. All of the above

Can you define a nested namespace in C++?
a. Yes
b. No

What is the purpose of the "using" directive in C++?
a. To make a member variable constant
b. To make a function constant
c. To bring all the members of a namespace into scope
d. All of the above

Can you use multiple "using" directives for the same namespace in C++?
a. Yes
b. No

What is the purpose of the "using" declaration in C++?
a. To make a member variable constant
b. To make a function constant
c. To bring specific members of a namespace into scope
d. All of the above

Can you use a "using" declaration to introduce a new name that conflicts with an existing name in C++?
a. Yes
b. No

What is the purpose of the "template" keyword in C++?
a. To make a member variable constant
b. To make a function constant
c. To define a generic type or function
d. All of the above

Can you define a template constructor in C++?
a. Yes
b. No

What is the purpose of the "typename" keyword in a template definition in C++?
a. To make a member variable constant
b. To make a function constant
c. To declare a dependent type
d. All of the above

Can you specialize a template function for a specific type in C++?
a. Yes
b. No

What is the purpose of the "typename" keyword in a template specialization in C++?
a. To make a member variable constant
b. To make a function constant
c. To indicate a dependent type
d. All of the above

Can you define a template specialization for a non-template class in C++?
a. Yes
b. No

What is abstraction in C++?

a. It is a technique to hide the internal implementation details of a class.
b. It is a technique to make objects copyable.
c. It is a technique to define overloaded operators.
d. It is a technique to implement polymorphism.

Answer: a. It is a technique to hide the internal implementation details of a class.

Explanation: Abstraction is the process of hiding the internal implementation details of a class and exposing only the necessary information to the outside world. It allows you to focus on the essential features and behavior of an object, without worrying about how it is implemented.

Which keyword is used to create an abstract class in C++?

a. abstract
b. virtual
c. interface
d. pure

Answer: b. virtual

Explanation: In C++, an abstract class is created by declaring at least one pure virtual function. The virtual keyword is used to declare a virtual function, and when a function is declared as pure virtual by appending "= 0" to its declaration, the class becomes abstract.

Which statement about abstract classes is correct?

a. Objects cannot be created from an abstract class.
b. Abstract classes can be directly instantiated.
c. Abstract classes must have a default constructor.
d. Abstract classes cannot have member functions.

Answer: a. Objects cannot be created from an abstract class.

Explanation: Abstract classes cannot be directly instantiated because they contain pure virtual functions, which means they have one or more functions that do not have an implementation. Objects of an abstract class can only be created through its derived classes.

Which of the following is an example of abstraction?

a. Encapsulation
b. Inheritance
c. Polymorphism
d. All of the above

Answer: a. Encapsulation

Explanation: Encapsulation is one of the principles of object-oriented programming, which involves bundling data and the methods that operate on that data into a single unit (class). It provides abstraction by hiding the internal implementation details and exposing only the necessary interfaces to the outside world.

Which code snippet demonstrates abstraction in C++?
class Car {
public:
    virtual void start() = 0;
    virtual void stop() = 0;
};

class Sedan : public Car {
public:
    void start() override {
        // Code to start a Sedan car
    }

    void stop() override {
        // Code to stop a Sedan car
    }
};


a. The code snippet defines an abstract class "Car" with pure virtual functions "start()" and "stop()".
b. The code snippet demonstrates operator overloading.
c. The code snippet shows how to define a copy constructor.
d. The code snippet illustrates dynamic polymorphism.

Answer: a. The code snippet defines an abstract class "Car" with pure virtual functions "start()" and "stop()".

Explanation: The code snippet demonstrates abstraction by defining an abstract class "Car" with pure virtual functions "start()" and "stop()". The pure virtual functions have no implementation in the abstract class and must be overridden in the derived classes, such as the "Sedan" class.